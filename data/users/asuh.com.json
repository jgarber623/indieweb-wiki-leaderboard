{
  "items": [
    {
      "type": [
        "h-feed"
      ],
      "properties": {
        "author": [
          {
            "type": [
              "h-card"
            ],
            "properties": {
              "photo": [
                {
                  "value": "https://secure.gravatar.com/avatar/17e24693afb7c42d538929e63fbf4578?s=49&d=mm&r=x",
                  "srcset": {
                    "2x": "https://secure.gravatar.com/avatar/17e24693afb7c42d538929e63fbf4578?s=98&d=mm&r=x"
                  },
                  "alt": ""
                }
              ],
              "url": [
                "https://asuh.com/"
              ],
              "name": [
                "Micah Cambre"
              ]
            },
            "value": "Micah Cambre"
          }
        ]
      },
      "children": [
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "relearn using dishwashers"
            ],
            "content": [
              {
                "html": "<section class=\"response u-bookmark-of h-cite\">\n<header>\n<span class=\"svg-icon svg-bookmark\" aria-label=\"Bookmark\" title=\"Bookmark\" style='\"display:' inline-block max-height: margin-right:><span aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 384 512\"><path d=\"M0 512V48C0 21.49 21.49 0 48 0h288c26.51 0 48 21.49 48 48v464L192 400 0 512z\"></path></svg></span></span><span class=\"kind-display-text\">Bookmarked</span> </header>\n<blockquote class=\"e-summary\">\n<div class=\"kind-embed\">\n<div class=\"entry-content-asset\"><iframe loading=\"lazy\" title=\"Detergent packs are kinda wishy-washy (Dishwashers Explained)\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/_rBO8neWw04?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n<p><a class=\"u-url\" href=\"https://www.youtube.com/watch?v=_rBO8neWw04\"></a></p>\n</div>\n</blockquote>\n</section>\n<p><a href=\"https://www.youtube.com/watch?v=_rBO8neWw04\">Detergent packs are kinda wishy-washy (Dishwashers Explained)</a></p>\n<p>I’m writing this post to clear off some of the dust from this site. I’m linking to a YouTube video that goes deeply into using dishwashers and how so many of us have forgotten how to actually use dishwashers well. In fact, we really should stop hand washing too often to conserve water and reduce our bills since dishwashers are so efficient AND effective with less use of everything.</p>\n<p>Four steps to effective dishwashing:</p>\n<ol>\n<li>Turn on the facet water and let it get as hot as it can. The dishwasher needs this hot water from beginning to end.</li>\n<li>Fill the pre-wash cup with detergent. Using a tablet? Drop a tablet into the dishwasher’s bottom. I’m using <a href=\"https://www.finishdishwashing.com/products/detergent/deep-clean\">plain Finish tablets</a> for this</li>\n<li>Fill the main wash cup with detergent. This is usually the one with a door that you lock into place until mid way through the cycle. This is where the fancier tablets can be used, but Finish is also just fine</li>\n<li>Check your rinse aid level. Do you see any in there? Fill it up, it adds a pop to the cleaning!</li>\n</ol>\n<p>And seriously, if you do all four of these steps, you should be seeing a better dishwashing result every time! The biggest benefit you can take away is the pre rinse with both hot water and soap. If you get this right, the rest of the cycles do their job great.</p>\n<p>Now, let’s see if this syndicated a nice little Twitter link into a Tweet. I haven’t tested this feature in a while!</p>",
                "value": "Bookmarked \n\n\n\n\n\n\nDetergent packs are kinda wishy-washy (Dishwashers Explained)\nI’m writing this post to clear off some of the dust from this site. I’m linking to a YouTube video that goes deeply into using dishwashers and how so many of us have forgotten how to actually use dishwashers well. In fact, we really should stop hand washing too often to conserve water and reduce our bills since dishwashers are so efficient AND effective with less use of everything.\nFour steps to effective dishwashing:\n\nTurn on the facet water and let it get as hot as it can. The dishwasher needs this hot water from beginning to end.\nFill the pre-wash cup with detergent. Using a tablet? Drop a tablet into the dishwasher’s bottom. I’m using plain Finish tablets for this\nFill the main wash cup with detergent. This is usually the one with a door that you lock into place until mid way through the cycle. This is where the fancier tablets can be used, but Finish is also just fine\nCheck your rinse aid level. Do you see any in there? Fill it up, it adds a pop to the cleaning!\n\nAnd seriously, if you do all four of these steps, you should be seeing a better dishwashing result every time! The biggest benefit you can take away is the pre rinse with both hot water and soap. If you get this right, the rest of the cycles do their job great.\nNow, let’s see if this syndicated a nice little Twitter link into a Tweet. I haven’t tested this feature in a while!"
              }
            ],
            "bookmark-of": [
              {
                "type": [
                  "h-cite"
                ],
                "properties": {
                  "summary": [
                    {
                      "html": "<div class=\"kind-embed\">\n<div class=\"entry-content-asset\"><iframe loading=\"lazy\" title=\"Detergent packs are kinda wishy-washy (Dishwashers Explained)\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/_rBO8neWw04?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n<p><a class=\"u-url\" href=\"https://www.youtube.com/watch?v=_rBO8neWw04\"></a></p>\n</div>",
                      "value": ""
                    }
                  ],
                  "url": [
                    "https://www.youtube.com/watch?v=_rBO8neWw04"
                  ]
                },
                "value": "https://www.youtube.com/watch?v=_rBO8neWw04"
              }
            ],
            "url": [
              "https://asuh.com/relearn-using-dishwashers/"
            ],
            "published": [
              "2022-01-05T00:35:14-08:00"
            ],
            "updated": [
              "2022-01-05T00:35:14-08:00"
            ],
            "syndication": [
              "https://twitter.com/asuh/status/1478648468956540929"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "custom roms rock"
            ],
            "content": [
              {
                "html": "<p>I am loving using an open source android custom rom! I can pick and choose who gets what and I’m in control of everything. This is a game changer. This deserves a blog post…</p>",
                "value": "I am loving using an open source android custom rom! I can pick and choose who gets what and I’m in control of everything. This is a game changer. This deserves a blog post…"
              }
            ],
            "url": [
              "https://asuh.com/custom-roms-rock/"
            ],
            "published": [
              "2021-07-01T16:18:03-07:00"
            ],
            "updated": [
              "2021-07-01T16:18:03-07:00"
            ],
            "syndication": [
              "https://brid.gy/publish/twitter"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "content": [
              {
                "html": "<section class=\"response\">\n<header>\n<span class=\"svg-icon svg-photo\" aria-label=\"Photo\" title=\"Photo\" style='\"display:' inline-block max-height: margin-right:><span aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 512 512\"><path d=\"M48 32C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48H48zm0 32h106c3.3 0 6 2.7 6 6v20c0 3.3-2.7 6-6 6H38c-3.3 0-6-2.7-6-6V80c0-8.8 7.2-16 16-16zm426 96H38c-3.3 0-6-2.7-6-6v-36c0-3.3 2.7-6 6-6h138l30.2-45.3c1.1-1.7 3-2.7 5-2.7H464c8.8 0 16 7.2 16 16v74c0 3.3-2.7 6-6 6zM256 424c-66.2 0-120-53.8-120-120s53.8-120 120-120 120 53.8 120 120-53.8 120-120 120zm0-208c-48.5 0-88 39.5-88 88s39.5 88 88 88 88-39.5 88-88-39.5-88-88-88zm-48 104c-8.8 0-16-7.2-16-16 0-35.3 28.7-64 64-64 8.8 0 16 7.2 16 16s-7.2 16-16 16c-17.6 0-32 14.4-32 32 0 8.8-7.2 16-16 16z\"></path></svg></span></span><span class=\"kind-display-text\"> </span> </header>\n</section>\n<p>This is a test for using quill on this blog</p>",
                "value": "This is a test for using quill on this blog"
              }
            ],
            "url": [
              "https://asuh.com/1937-2/"
            ],
            "published": [
              "2020-12-02T23:04:44-08:00"
            ],
            "updated": [
              "2020-12-02T23:04:44-08:00"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "content": [
              {
                "html": "<section class=\"response\">\n<header>\n<span class=\"svg-icon svg-rsvp\" aria-label=\"RSVP\" title=\"RSVP\" style='\"display:' inline-block max-height: margin-right:><span aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 448 512\"><path d=\"M436 160H12c-6.627 0-12-5.373-12-12v-36c0-26.51 21.49-48 48-48h48V12c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v52h128V12c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v52h48c26.51 0 48 21.49 48 48v36c0 6.627-5.373 12-12 12zM12 192h424c6.627 0 12 5.373 12 12v260c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V204c0-6.627 5.373-12 12-12zm333.296 95.947l-28.169-28.398c-4.667-4.705-12.265-4.736-16.97-.068L194.12 364.665l-45.98-46.352c-4.667-4.705-12.266-4.736-16.971-.068l-28.397 28.17c-4.705 4.667-4.736 12.265-.068 16.97l82.601 83.269c4.667 4.705 12.265 4.736 16.97.068l142.953-141.805c4.705-4.667 4.736-12.265.068-16.97z\"></path></svg></span></span><span class=\"kind-display-text\">RSVPed</span> <data class=\"p-rsvp\" value=\"yes\">Attending <a href=\"https://2020.indieweb.org/east\" class=\"u-in-reply-to\">IndieWebCamp East</a></data></header>\n<blockquote class=\"e-summary\"><p>IndieWebCamp East 2020 is an online gathering for independent web creators of all kinds, from graphic artists, to designers, UX engineers, coders, hackers, to share ideas, actively work on creating for their own personal websites, and build upon each others creations.</p></blockquote>\n</section>",
                "value": "RSVPed Attending IndieWebCamp East\nIndieWebCamp East 2020 is an online gathering for independent web creators of all kinds, from graphic artists, to designers, UX engineers, coders, hackers, to share ideas, actively work on creating for their own personal websites, and build upon each others creations."
              }
            ],
            "rsvp": [
              "yes"
            ],
            "in-reply-to": [
              "https://2020.indieweb.org/east"
            ],
            "summary": [
              {
                "html": "<p>IndieWebCamp East 2020 is an online gathering for independent web creators of all kinds, from graphic artists, to designers, UX engineers, coders, hackers, to share ideas, actively work on creating for their own personal websites, and build upon each others creations.</p>",
                "value": "IndieWebCamp East 2020 is an online gathering for independent web creators of all kinds, from graphic artists, to designers, UX engineers, coders, hackers, to share ideas, actively work on creating for their own personal websites, and build upon each others creations."
              }
            ],
            "url": [
              "https://asuh.com/indieweb-east-2020/"
            ],
            "published": [
              "2020-11-14T07:41:42-08:00"
            ],
            "updated": [
              "2020-11-14T07:41:42-08:00"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "ghost peppers ouch"
            ],
            "content": [
              {
                "html": "<p>Lesson learned: ghost peppers affect you the whole way through the body! One accidental ingestion and 12 hours of intermittent heat ???</p>",
                "value": "Lesson learned: ghost peppers affect you the whole way through the body! One accidental ingestion and 12 hours of intermittent heat ???"
              }
            ],
            "url": [
              "https://asuh.com/ghost-peppers-ouch/"
            ],
            "published": [
              "2020-09-10T20:57:12-07:00"
            ],
            "updated": [
              "2020-09-10T20:57:12-07:00"
            ],
            "syndication": [
              "https://twitter.com/asuh/status/1304269755415777283"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "react’s separation of concerns"
            ],
            "content": [
              {
                "html": "<p>It’s funny how patterns and styles get recycled. We’ve seen clothing styles of the 60’s get reintroduced and reused decades later. The TV show <em>Mad Men</em> brought back mid century modern style into the 2000s. And we’ve seen it happen with coding patterns as well.</p>\n<h2>React Components</h2>\n<p>One of the first React things I learned is how to create React Components, Capital-C.</p>\n<pre data-rel=\"jsx\"><code class=\"lang-jsx\">export default function NavButton() {\n\treturn(\n\t\t&lt;button type=\"button\"&gt;Switch Step&lt;/button&gt;\n\t)\n}</code></pre>\n<p>To use this button, just <code class=\"lang-jsx\">import</code> it into other files and apply it in the JSX. Straightforward.</p>\n<h3>Props == HTML Attributes</h3>\n<p>Buttons usually need to do things, so let’s give this some interactivity.</p>\n<pre data-rel=\"jsx\"><code class=\"lang-jsx\">function NavButton(props) {\n\tconst { transitionCallback, isDisabled } = props\n\n\tconst handleClick = () =&gt; {\n\t\ttransitionCallback()\n\t}\n\n\treturn(\n\t\t&lt;button\n\t\t\tonClick={handleClick}\n\t\t\tdisabled={isDisabled}\n\t\t&gt;\n\t\t\tSwitch Step\n\t\t&lt;/button&gt;\n\t)\n}</code></pre>\n<p>2000s me looked at this increasingly used React pattern curiously, because I see <code class=\"lang-jsx\">onClick={handleClick}</code> attached to the button element. For so many years, often from jQuery or Javascript, I avoided applying event handlers to elements. But here React made that a pattern and my mind goes back in time.</p>\n<h2>My concerns are separate</h2>\n<p>I spent the 2000s and into the 2010s learning about, what I eventually started reading from industry folks and books, a computer science term called <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">Separation of Concerns</a>. <a href=\"https://adactio.com/journal/14103\">The idea makes sense on the front-end for many reasons</a> and I became fairly dogmatic about it.</p>\n<p>With Separation of Concerns, these three concepts stand on their own:</p>\n<ul>\n<li>\n<span aria-labelledby=\"html\">structure</span> (<abbr title=\"Hypertext Markup Language\" id=\"html\">HTML</abbr>)</li>\n<li>\n<span aria-labelledby=\"css\">presentation</span> (<abbr title=\"Cascading Stylesheets\" id=\"css\">CSS</abbr>)</li>\n<li>\n<span aria-labelledby=\"js\">behavior</span> (<abbr title=\"Javascript\" id=\"js\">JS</abbr>)</li>\n</ul>\n<p>By the middle of the 2010s, I wasn’t mixing JS and CSS into HTML, CSS into JS or HTML into JS. We keep them separate, <code class=\"lang-js\">.html</code>, <code class=\"lang-js\">.css</code>, and <code class=\"lang-js\">.js</code>.</p>\n<p>By contrast and in practice, however, having worked with WordPress all that time, it was often a losing battle to decouple these languages, quick jQuery or CSS fixes were little inline sprinkles here and there. </p>\n<pre data-rel=\"php\"><code class=\"lang-jsx\">&lt;?php\nfunction ratio_calculator() {\n    $html = '&lt;style&gt;\n\t.form-inline .form-group { display:block; margin-bottom: 10px}\n&lt;/style&gt;\n&lt;form id=\"form\" name=\"form\" method=\"GET\" action=\"#\" role=\"form\" class=\"form-inline\"&gt;\n\t&lt;div class=\"form-group\"&gt;\t\n\t\t&lt;label for=\"RT3\" class=\"t3\"&gt;RT3&lt;/label&gt;\n\t\t&lt;input class=\"form-control\" type=\"text\" name=\"RT3\" id=\"RT3\"&gt;\n\t&lt;/div&gt;\n    &lt;input type=\"button\" class=\"btn btn-primary\" name=\"button\" id=\"Submit\" value=\"Get Ratio\"&gt;\n&lt;/form&gt;\n&lt;div id=\"ratio\" style=\"color:blue;font-weight:bold;font-size:120%\"&gt;&lt;/div&gt;';\nreturn $html;\n}\nadd_shortcode('calculator','calculator_form');</code></pre>\n<p>Yuck! I had to grit my teeth and move on.</p>\n<p>Then came modern JS frameworks, cemented by React, slowly blowing this concept up. React’s raw JSX syntax requires to cross the decoupling line by adding HTML-like attributes called props containing Javascript and often CSS. A different and controversial method called <a href=\"https://css-tricks.com/bridging-the-gap-between-css-and-javascript-css-in-js/\">CSS-in-JS</a> is not only accepted but widely adopted by many React developers. And then there’s the other CSS direction of using utility first libraries like Tailwinds polluting HTML classes, but don’t get me started on that concept!</p>\n<h2>Separation of Concerns Remixed</h2>\n<p>In this new paradigm of component-first development, the abstraction for separation of concerns takes on a different look. The separation of concerns is loosely defined within the components themselves. Let’s take a look at what this means.</p>\n<p>Here’s my first iteration of the navigation button control component to go from the initial state to the timer state.</p>\n<pre data-rel=\"jsx\"><code class=\"lang-jsx\">function NavButton(props) {\n\tconst { transitionCallback, isDisabled } = props\n\n\tconst handleClick = () =&gt; {\n\t\ttransitionCallback()\n\t}\n\n\treturn(\n\t\t&lt;button\n\t\t\tstyle={{padding:'1rem', backgroundColor:'white'}}\n\t\t\tonClick={handleClick}\n\t\t\tdisabled={isDisabled}\n\t\t&gt;\n\t\t\t&lt;span className=\"visuallyhidden\"&gt;Switch Step&lt;/span&gt;\n\t\t\ttest\n\t\t&lt;/button&gt;\n\t)\n}</code></pre>\n<p>This code shows a clear mix of all three languages within a Javascript function, with an HTML-like syntax inside of a Javascript return statement, inline CSS in a button element, and an inline <code class=\"lang-js\">onClick</code> event handler calling a function. </p>\n<p>Before I started learning how to make websites, the source code of the web documents used similar syntax that kind of looked like the above.</p>\n<pre data-rel=\"HTML\"><code class=\"lang-html\">&lt;head&gt;\n\t&lt;script type=\"javascript\"&gt;\n\t\tfunction handleClick() { \n\t\t\tvar transitionCallback = props;\n\t\t\ttransitionCallback(); \n\t\t}\n\t&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t\t&lt;input\n\t\t\talign=\"left\"\n\t\t\tclear=\"left\"\n\t\t\tbgcolor=\"white\"\n\t\t\ttype=\"submit\"\n\t\t\tonClick=\"handleClick();\"\n\t\t\tdisabled=\"disabled\"\n\t\t\tvalue=\"test\"\n\t\t&gt;\n&lt;/body&gt;</code></pre>\n<p>When I first saw React’s syntax, you can imagine how alarmed I was by its seemingly reversion back to the 1990s styling of code. My mental model is so conditioned that this bothered me for a long time, still does to some degree.</p>\n<h2>Two what end?</h2>\n<p>As I see modern libraries continue these practices, it appears the pattern of everything inside of JS will continue into the foreseeable future, one way or another. Discussions around native <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">Web Components</a> in the document brings a more dogmatic potential back, but not in its current iteration.</p>\n<p>I’m always excited for the future, but I think there will always be a part of me looking of ways to scale back the abstractions and packages needed to build the modern web. Part of that will be my outdated mental model for separation of concerns. Let’s hope browser makers can find better ways to manipulate the DOM and CSSOM without breaking the clients and mixing our concerns!</p>",
                "value": "It’s funny how patterns and styles get recycled. We’ve seen clothing styles of the 60’s get reintroduced and reused decades later. The TV show Mad Men brought back mid century modern style into the 2000s. And we’ve seen it happen with coding patterns as well.\nReact Components\nOne of the first React things I learned is how to create React Components, Capital-C.\nexport default function NavButton() {\n\treturn(\n\t\t<button type=\"button\">Switch Step</button>\n\t)\n}\nTo use this button, just import it into other files and apply it in the JSX. Straightforward.\nProps == HTML Attributes\nButtons usually need to do things, so let’s give this some interactivity.\nfunction NavButton(props) {\n\tconst { transitionCallback, isDisabled } = props\n\n\tconst handleClick = () => {\n\t\ttransitionCallback()\n\t}\n\n\treturn(\n\t\t<button\n\t\t\tonClick={handleClick}\n\t\t\tdisabled={isDisabled}\n\t\t>\n\t\t\tSwitch Step\n\t\t</button>\n\t)\n}\n2000s me looked at this increasingly used React pattern curiously, because I see onClick={handleClick} attached to the button element. For so many years, often from jQuery or Javascript, I avoided applying event handlers to elements. But here React made that a pattern and my mind goes back in time.\nMy concerns are separate\nI spent the 2000s and into the 2010s learning about, what I eventually started reading from industry folks and books, a computer science term called Separation of Concerns. The idea makes sense on the front-end for many reasons and I became fairly dogmatic about it.\nWith Separation of Concerns, these three concepts stand on their own:\n\nstructure (HTML)\npresentation (CSS)\nbehavior (JS)\n\nBy the middle of the 2010s, I wasn’t mixing JS and CSS into HTML, CSS into JS or HTML into JS. We keep them separate, .html, .css, and .js.\nBy contrast and in practice, however, having worked with WordPress all that time, it was often a losing battle to decouple these languages, quick jQuery or CSS fixes were little inline sprinkles here and there. \n<?php\nfunction ratio_calculator() {\n    $html = '<style>\n\t.form-inline .form-group { display:block; margin-bottom: 10px}\n</style>\n<form id=\"form\" name=\"form\" method=\"GET\" action=\"#\" role=\"form\" class=\"form-inline\">\n\t<div class=\"form-group\">\t\n\t\t<label for=\"RT3\" class=\"t3\">RT3</label>\n\t\t<input class=\"form-control\" type=\"text\" name=\"RT3\" id=\"RT3\">\n\t</div>\n    <input type=\"button\" class=\"btn btn-primary\" name=\"button\" id=\"Submit\" value=\"Get Ratio\">\n</form>\n<div id=\"ratio\" style=\"color:blue;font-weight:bold;font-size:120%\"></div>';\nreturn $html;\n}\nadd_shortcode('calculator','calculator_form');\nYuck! I had to grit my teeth and move on.\nThen came modern JS frameworks, cemented by React, slowly blowing this concept up. React’s raw JSX syntax requires to cross the decoupling line by adding HTML-like attributes called props containing Javascript and often CSS. A different and controversial method called CSS-in-JS is not only accepted but widely adopted by many React developers. And then there’s the other CSS direction of using utility first libraries like Tailwinds polluting HTML classes, but don’t get me started on that concept!\nSeparation of Concerns Remixed\nIn this new paradigm of component-first development, the abstraction for separation of concerns takes on a different look. The separation of concerns is loosely defined within the components themselves. Let’s take a look at what this means.\nHere’s my first iteration of the navigation button control component to go from the initial state to the timer state.\nfunction NavButton(props) {\n\tconst { transitionCallback, isDisabled } = props\n\n\tconst handleClick = () => {\n\t\ttransitionCallback()\n\t}\n\n\treturn(\n\t\t<button\n\t\t\tstyle={{padding:'1rem', backgroundColor:'white'}}\n\t\t\tonClick={handleClick}\n\t\t\tdisabled={isDisabled}\n\t\t>\n\t\t\t<span className=\"visuallyhidden\">Switch Step</span>\n\t\t\ttest\n\t\t</button>\n\t)\n}\nThis code shows a clear mix of all three languages within a Javascript function, with an HTML-like syntax inside of a Javascript return statement, inline CSS in a button element, and an inline onClick event handler calling a function. \nBefore I started learning how to make websites, the source code of the web documents used similar syntax that kind of looked like the above.\n<head>\n\t<script type=\"javascript\">\n\t\tfunction handleClick() { \n\t\t\tvar transitionCallback = props;\n\t\t\ttransitionCallback(); \n\t\t}\n\t</script>\n</head>\n<body>\n\t\t<input\n\t\t\talign=\"left\"\n\t\t\tclear=\"left\"\n\t\t\tbgcolor=\"white\"\n\t\t\ttype=\"submit\"\n\t\t\tonClick=\"handleClick();\"\n\t\t\tdisabled=\"disabled\"\n\t\t\tvalue=\"test\"\n\t\t>\n</body>\nWhen I first saw React’s syntax, you can imagine how alarmed I was by its seemingly reversion back to the 1990s styling of code. My mental model is so conditioned that this bothered me for a long time, still does to some degree.\nTwo what end?\nAs I see modern libraries continue these practices, it appears the pattern of everything inside of JS will continue into the foreseeable future, one way or another. Discussions around native Web Components in the document brings a more dogmatic potential back, but not in its current iteration.\nI’m always excited for the future, but I think there will always be a part of me looking of ways to scale back the abstractions and packages needed to build the modern web. Part of that will be my outdated mental model for separation of concerns. Let’s hope browser makers can find better ways to manipulate the DOM and CSSOM without breaking the clients and mixing our concerns!"
              }
            ],
            "url": [
              "https://asuh.com/reacts-separation-of-concerns/"
            ],
            "published": [
              "2020-08-05T01:49:19-07:00"
            ],
            "updated": [
              "2020-08-05T01:49:19-07:00"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "react reflections in 2020"
            ],
            "content": [
              {
                "html": "<p>A few years ago, realizing that both Javascript and React are probably the future of my career in web development, I slowly started reading more and casually learning what I could. I’ve come from such a front-of-the-front-end mindset, bordering on being a developer envying to be a designer, that learning Javscript has taken years for me.</p>\n<p>Now that I have both training experience and real-world application of React, I want to jot down various things that I’ve learned as well as still struggle with. (It’ll also be entertaining to re-read this in a while to see how primitive my likes and dislikes are!)</p>\n<h2>Logical Operators, aka <code class=\"lang-html\">&amp;&amp;</code>\n</h2>\n<p>I think this is one of my favorite ways to render components in React. It’s concise and very readable.</p>\n<pre data-rel=\"jsx\"><code class=\"lang-jsx\">const [ activeElement, setActiveElement ] = useState(false);\n\nreturn (\n  &lt;&gt;\n    {activeElement &amp;&amp; &lt;Accordion onClick={handleClick} /&gt;}\n  &lt;/&gt;\n)</code></pre>\n<p>Is <code class=\"lang-js\">activeElement</code> true? Sweet, let’s render that Accordion component. Easy to understand, easy to remember.</p>\n<h2>Form components</h2>\n<p>One of the more confusing parts of React is <a href=\"https://reactjs.org/docs/forms.html\">Controlled Components</a> vs <a href=\"https://reactjs.org/docs/uncontrolled-components.html\">Uncontrolled Components</a>. Most of the components I’ve written are uncontrolled because of the amount of things I have to do with them. In fact, I find it difficult to justify writing controlled components because doing this misses things for me.</p>\n<pre data-rel=\"jsx\"><code class=\"lang-jsx\">&lt;input\n  className=\"contact-input\"\n  id=\"first-name\"\n  type=\"text\"\n  name=\"first-name\"\n  defaultValue={first_name}\n  onClick={() =&gt; setSelectedField(\"first-name\")}\n  onKeyDown={e =&gt; handleKeyDown(e, \"first-name\")}\n  onChange={e =&gt; setData({ ...data, first_name: e.target.value })}\n  onKeyUp={validateInput}\n/&gt;</code></pre>\n<p>See all of these event handlers? Whether it’s validation or another key dependent event, even a custom click handler for custom action, controlled components seem too restricted in what they provide. The biggest drawback for uncontrolled components, unfortunately, is taking the power away from the form’s global handlers like <code class=\"lang-jsx\">onSubmit</code>. You have to handle this event in the click handler or keydown handler to be able to send or receive the proper data for the element.</p>\n<h2>Functional Components + Hooks &gt; Class Components</h2>\n<p>Keeping a mindset of using state in a hook, this allows a few quite appealing benefits.</p>\n<ul>\n<li>\n<strong>Avoids prop drilling</strong> – Whether it’s encapsulating state with <code class=\"lang-jsx\">useState()</code> or accessing it more globally with <code class=\"lang-jsx\">useReducer()</code>, state doesn’t have to flow through multiple components to be manipulated as props</li>\n<li>\n<strong>Less code</strong> – It feels and looks better to write functional components with hooks like <code class=\"lang-jsx\">useState()</code>.</li>\n<li>\n<strong>What lifecycle methods?</strong> – I didn’t have to spend a lot of time with a method like ComponentDidMount (among the rest) before I started using <code class=\"lang-jsx\">useEffect()</code> for most methods to work with data. The more I use it, the more I like its simplicity of helping data flow.</li>\n</ul>\n<p>I much prefer updating state with <code class=\"lang-jsx\">useState()</code> instead of <code class=\"lang-jsx\">setState()</code>, despite doing similar things. Maybe this is just my personal optics?</p>\n<h2>Avoiding Prop Drilling</h2>\n<p>It took me some time to really get the concept of state and props, despite the seemingly simple ways to use them. One of the least favorite things I have to do is find where data starts and how it flows. When you have a microapp that declares a lot of state at top, somehow the the child components need to use a lot of that state and it could pass several levels down before it gets to the correct component for updating as state. Here’s a small example.</p>\n<pre data-rel=\"jsx\"><code class=\"lang-jsx\">function Profile() {\n  const [name, setName] = React.useState(\"\")\n  \n  return &lt;Form name={name} setName={setName} /&gt;\n}\n\nfunction Form({name, setName}) {\n  const handleChange = e =&gt; {\n    setName(e.target.value)\n    // Do other things here...\n  }\n\n  return (\n    &lt;div class=\"form-component\"&gt;\n      &lt;input \n        className=\"form-input\"\n        value={name} \n        onChange={() =&gt; handleChange(e)}\n      /&gt;\n      &lt;button type=\"button\" onClick={() =&gt; setName(name)}&gt;Update\n    &lt;/div&gt;\n  )\n}</code></pre>\n<p>You get the idea even if this is imperfect. Essentially, we’re giving this form two ways to update: first through the normal <code class=\"lang-jsx\">onChange</code> method which updates state, which can then be submitted normally, and second using a normal button that sets the name that was already updated by the input field. While this is fairly simple, as an app grows, such as multiple fieldsets of form fields or possibilities of what needs to be stored, updated, created, and so on, props need to be passed down to the various components that are especially written for the form.</p>\n<p>If anything, using hooks has made my functions pretty single purposed in what they do to avoid complexity. Maybe it’s more verbose in some ways but it’s ultimately more readable.</p>\n<h2>Manipulating fetched data</h2>\n<p>JSON data is still one of my bigger challenges as I learn React and modern Javascript at broad. It can be tedious trying to figure out how to get data from an API to the component in the most efficient way.</p>\n<p>Let’s fetch some data.</p>\n<pre data-rel=\"jsx\"><code class=\"lang-jsx\">function PeopleProfiles() {\n  const [ profiles, setProfiles ] = useState([])\n  const [ activeProfile, setActiveProfile ] = useState(undefined)\n\n  const fetchData = async () =&gt; {\n    const results = await fetch(\"https://swapi.co/api/people/1/\")\n      .then(data =&gt; setProfiles(data))\n      .catch(err =&gt; setErrors(err))\n    const activePorfileExists = results.data.some(item =&gt; activeProfile === item.name)\n\n    if (!activeProfileExists) setActiveProfile(results.data[0].name)\n    setProfiles(results.data)\n    return results\n  }\n\n  useEffect(() =&gt; {\n    fetchData()\n      .then(results =&gt; setActiveProfile(results.data[0].name))\n  }, []);\n}</code></pre>\n<p><small>Note: this probably won’t work but it’s an okay example for this purpose</small></p>\n<p>Once the data is fetched from the API, we add the data to the <code class=\"lang-jsx\">profiles</code> state using <code class=\"lang-jsx\">setProfiles</code>. From there, we can replace, update, create and delete as needed. For visual purposes, there’s an active profile state that will choose the first object if no other profiles are in the active state.</p>\n<p>All of this is performed when the component mounts inside of <code class=\"lang-jsx\">useEffect()</code>. You can see that we’re only calling it once</p>\n<p>Because we’re calling the data inside of <code class=\"lang-jsx\">useEffect()</code> with an empty array as the second argument, this only runs when the component mounts the first time. Any time I tried to add state to the second argument, I kept getting a 429 error where it makes too many calls. I needed to update the state dynamically, which would be equivalent to <code class=\"lang-jsx\">componentDidUpdate</code>.</p>\n<p>I found a better way to update the view with new data is to fetch the data outside of <code class=\"lang-jsx\">useEffect()</code> and call this function from the component or method that needs the view to update and show the updated data.</p>\n<p>Let’s say, within the profile component, I have an input that allows me to update the data. In an ideal scenario, <strong>API data fetches are encapsulated into a global file</strong>. This app isn’t big enough for that so I’m passing <code class=\"lang-jsx\">fetchData</code> down to the child component in order to update the view with new data.</p>\n<pre data-rel=\"jsx\"><code class=\"lang-jsx\">  return (\n    &lt;&gt;\n      &lt;form\n        className=\"Form Form--LovedOnesSpecialDates\"\n        id=\"editLovedOne\"\n      &gt;\n        &lt;div className=\"Form--LovedOnesSpecialDates__wrapper\"&gt;\n          {Profiles.map(profile =&gt;\n            &lt;Profiles\n              key={profile.id}\n              fetchData={fetchData}\n            /&gt;  \n          )}\n        &lt;/div&gt;\n      &lt;/form&gt;\n    &lt;/&gt;\n  );</code></pre>\n<p>I think this is one of the biggest problem areas with using React. Best practices for fetching and manipulating data have changed a few times as the language has updated itself. I’ve dived deep into React after ES6 was a big part of React via babel and webpack. I also didn’t have to spend a lot of time to understand React’s class component structure. There was just Javascript</p>\n<p>But still, there’s a lot of legacy and historical knowledge of plain Javascript that is needed to really help understand the nuances of what React is doing whether it’s mapping through an array or knowing how to pass data from the API to the application’s state.</p>\n<h2>Conditional loading</h2>\n<p>Related to logical operators above, React’s conditional loading is not always obvious but interesting nonetheless.</p>\n<pre data-rel=\"jsx\"><code class=\"lang-jsx\">const LovedOne = ({\n  id, // number\n  activeProfile, // string that's actual a number\n  showAddProfile // boolean\n}) =&gt; {\n  return (\n    &lt;article\n      className={`Profile${parseInt(activeProfile) === id ? \" profile-active\" : \"\"}`}\n      onKeyDown={!showAddProfile ? handleProfileSwitcher : undefined}\n      onClick={!showAddProfile ? handleProfileSwitcher : undefined}\n    &gt;\n      // Add code here\n    &lt;/article&gt;\n  )\n}</code></pre>\n<p>It took me too long to find these patterns for render props.</p>\n<p>For some reason, I could not pass down a number in the render prop called <code class=\"lang-jsx\">activeProfile</code>. The console kept complaining so I had to turn the number into a string to get it into this component. So how do I actually use it?</p>\n<p>The first attribute is the using a ternary function to set a specific class. The part that wasn’t obvious was matching the id to the activeProfile, which weren’t matching since it’s a string and number. I guess a using <strong>loose equality</strong> with a <code class=\"lang-jsx\">==</code> might have solved it, but some linters don’t like it in some situations so I always default to strict equality <code class=\"lang-jsx\">===</code>. Either way, I had to turn the string into a number to be able to evaluate if they equal each other.</p>\n<p>The second pattern was also a ternary that uses <code class=\"lang-jsx\">undefined</code> to prevent <code class=\"lang-jsx\">onKeyDown</code> or <code class=\"lang-jsx\">onClick</code> from rendering in the markup. This was necessary because at larger viewport widths, these article elements don’t need to be used to help switch the active profile.</p>\n<h2>The rest</h2>\n<p>I think I’ll never stop cringing at PascalCase component names both in markup and stylesheets or using <code class=\"lang-jsx\">className</code> instead of <code class=\"lang-jsx\">class</code> among other things. I’m still caught in between writing classical components, HTML, CSS and JS vs how React based components. Let’s see what another year of this does!</p>",
                "value": "A few years ago, realizing that both Javascript and React are probably the future of my career in web development, I slowly started reading more and casually learning what I could. I’ve come from such a front-of-the-front-end mindset, bordering on being a developer envying to be a designer, that learning Javscript has taken years for me.\nNow that I have both training experience and real-world application of React, I want to jot down various things that I’ve learned as well as still struggle with. (It’ll also be entertaining to re-read this in a while to see how primitive my likes and dislikes are!)\nLogical Operators, aka &&\nI think this is one of my favorite ways to render components in React. It’s concise and very readable.\nconst [ activeElement, setActiveElement ] = useState(false);\n\nreturn (\n  <>\n    {activeElement && <Accordion onClick={handleClick} />}\n  </>\n)\nIs activeElement true? Sweet, let’s render that Accordion component. Easy to understand, easy to remember.\nForm components\nOne of the more confusing parts of React is Controlled Components vs Uncontrolled Components. Most of the components I’ve written are uncontrolled because of the amount of things I have to do with them. In fact, I find it difficult to justify writing controlled components because doing this misses things for me.\n<input\n  className=\"contact-input\"\n  id=\"first-name\"\n  type=\"text\"\n  name=\"first-name\"\n  defaultValue={first_name}\n  onClick={() => setSelectedField(\"first-name\")}\n  onKeyDown={e => handleKeyDown(e, \"first-name\")}\n  onChange={e => setData({ ...data, first_name: e.target.value })}\n  onKeyUp={validateInput}\n/>\nSee all of these event handlers? Whether it’s validation or another key dependent event, even a custom click handler for custom action, controlled components seem too restricted in what they provide. The biggest drawback for uncontrolled components, unfortunately, is taking the power away from the form’s global handlers like onSubmit. You have to handle this event in the click handler or keydown handler to be able to send or receive the proper data for the element.\nFunctional Components + Hooks > Class Components\nKeeping a mindset of using state in a hook, this allows a few quite appealing benefits.\n\nAvoids prop drilling – Whether it’s encapsulating state with useState() or accessing it more globally with useReducer(), state doesn’t have to flow through multiple components to be manipulated as props\nLess code – It feels and looks better to write functional components with hooks like useState().\nWhat lifecycle methods? – I didn’t have to spend a lot of time with a method like ComponentDidMount (among the rest) before I started using useEffect() for most methods to work with data. The more I use it, the more I like its simplicity of helping data flow.\n\nI much prefer updating state with useState() instead of setState(), despite doing similar things. Maybe this is just my personal optics?\nAvoiding Prop Drilling\nIt took me some time to really get the concept of state and props, despite the seemingly simple ways to use them. One of the least favorite things I have to do is find where data starts and how it flows. When you have a microapp that declares a lot of state at top, somehow the the child components need to use a lot of that state and it could pass several levels down before it gets to the correct component for updating as state. Here’s a small example.\nfunction Profile() {\n  const [name, setName] = React.useState(\"\")\n  \n  return <Form name={name} setName={setName} />\n}\n\nfunction Form({name, setName}) {\n  const handleChange = e => {\n    setName(e.target.value)\n    // Do other things here...\n  }\n\n  return (\n    <div class=\"form-component\">\n      <input \n        className=\"form-input\"\n        value={name} \n        onChange={() => handleChange(e)}\n      />\n      <button type=\"button\" onClick={() => setName(name)}>Update\n    </div>\n  )\n}\nYou get the idea even if this is imperfect. Essentially, we’re giving this form two ways to update: first through the normal onChange method which updates state, which can then be submitted normally, and second using a normal button that sets the name that was already updated by the input field. While this is fairly simple, as an app grows, such as multiple fieldsets of form fields or possibilities of what needs to be stored, updated, created, and so on, props need to be passed down to the various components that are especially written for the form.\nIf anything, using hooks has made my functions pretty single purposed in what they do to avoid complexity. Maybe it’s more verbose in some ways but it’s ultimately more readable.\nManipulating fetched data\nJSON data is still one of my bigger challenges as I learn React and modern Javascript at broad. It can be tedious trying to figure out how to get data from an API to the component in the most efficient way.\nLet’s fetch some data.\nfunction PeopleProfiles() {\n  const [ profiles, setProfiles ] = useState([])\n  const [ activeProfile, setActiveProfile ] = useState(undefined)\n\n  const fetchData = async () => {\n    const results = await fetch(\"https://swapi.co/api/people/1/\")\n      .then(data => setProfiles(data))\n      .catch(err => setErrors(err))\n    const activePorfileExists = results.data.some(item => activeProfile === item.name)\n\n    if (!activeProfileExists) setActiveProfile(results.data[0].name)\n    setProfiles(results.data)\n    return results\n  }\n\n  useEffect(() => {\n    fetchData()\n      .then(results => setActiveProfile(results.data[0].name))\n  }, []);\n}\nNote: this probably won’t work but it’s an okay example for this purpose\nOnce the data is fetched from the API, we add the data to the profiles state using setProfiles. From there, we can replace, update, create and delete as needed. For visual purposes, there’s an active profile state that will choose the first object if no other profiles are in the active state.\nAll of this is performed when the component mounts inside of useEffect(). You can see that we’re only calling it once\nBecause we’re calling the data inside of useEffect() with an empty array as the second argument, this only runs when the component mounts the first time. Any time I tried to add state to the second argument, I kept getting a 429 error where it makes too many calls. I needed to update the state dynamically, which would be equivalent to componentDidUpdate.\nI found a better way to update the view with new data is to fetch the data outside of useEffect() and call this function from the component or method that needs the view to update and show the updated data.\nLet’s say, within the profile component, I have an input that allows me to update the data. In an ideal scenario, API data fetches are encapsulated into a global file. This app isn’t big enough for that so I’m passing fetchData down to the child component in order to update the view with new data.\n  return (\n    <>\n      <form\n        className=\"Form Form--LovedOnesSpecialDates\"\n        id=\"editLovedOne\"\n      >\n        <div className=\"Form--LovedOnesSpecialDates__wrapper\">\n          {Profiles.map(profile =>\n            <Profiles\n              key={profile.id}\n              fetchData={fetchData}\n            />  \n          )}\n        </div>\n      </form>\n    </>\n  );\nI think this is one of the biggest problem areas with using React. Best practices for fetching and manipulating data have changed a few times as the language has updated itself. I’ve dived deep into React after ES6 was a big part of React via babel and webpack. I also didn’t have to spend a lot of time to understand React’s class component structure. There was just Javascript\nBut still, there’s a lot of legacy and historical knowledge of plain Javascript that is needed to really help understand the nuances of what React is doing whether it’s mapping through an array or knowing how to pass data from the API to the application’s state.\nConditional loading\nRelated to logical operators above, React’s conditional loading is not always obvious but interesting nonetheless.\nconst LovedOne = ({\n  id, // number\n  activeProfile, // string that's actual a number\n  showAddProfile // boolean\n}) => {\n  return (\n    <article\n      className={`Profile${parseInt(activeProfile) === id ? \" profile-active\" : \"\"}`}\n      onKeyDown={!showAddProfile ? handleProfileSwitcher : undefined}\n      onClick={!showAddProfile ? handleProfileSwitcher : undefined}\n    >\n      // Add code here\n    </article>\n  )\n}\nIt took me too long to find these patterns for render props.\nFor some reason, I could not pass down a number in the render prop called activeProfile. The console kept complaining so I had to turn the number into a string to get it into this component. So how do I actually use it?\nThe first attribute is the using a ternary function to set a specific class. The part that wasn’t obvious was matching the id to the activeProfile, which weren’t matching since it’s a string and number. I guess a using loose equality with a == might have solved it, but some linters don’t like it in some situations so I always default to strict equality ===. Either way, I had to turn the string into a number to be able to evaluate if they equal each other.\nThe second pattern was also a ternary that uses undefined to prevent onKeyDown or onClick from rendering in the markup. This was necessary because at larger viewport widths, these article elements don’t need to be used to help switch the active profile.\nThe rest\nI think I’ll never stop cringing at PascalCase component names both in markup and stylesheets or using className instead of class among other things. I’m still caught in between writing classical components, HTML, CSS and JS vs how React based components. Let’s see what another year of this does!"
              }
            ],
            "url": [
              "https://asuh.com/react-reflections-in-2020/"
            ],
            "published": [
              "2020-03-31T22:23:35-07:00"
            ],
            "updated": [
              "2020-03-31T22:23:35-07:00"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "content": [
              {
                "html": "<p>Good riddance, #chrome. Hello #brave. But #firefox forever. I can’t find a reason to install Chrome on any new computer anymore and have removed it from my existing devices. #privacy</p>",
                "value": "Good riddance, #chrome. Hello #brave. But #firefox forever. I can’t find a reason to install Chrome on any new computer anymore and have removed it from my existing devices. #privacy"
              }
            ],
            "url": [
              "https://asuh.com/bye-bye-chrome/"
            ],
            "published": [
              "2020-01-09T15:02:07-08:00"
            ],
            "updated": [
              "2020-01-09T15:02:07-08:00"
            ],
            "syndication": [
              "https://twitter.com/asuh/status/1215408551650181120"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "online resolutions"
            ],
            "content": [
              {
                "html": "<p>I never made formal resolutions for any new year. That said, it’s a good practice to better yourself so I think I’ll continue what I started doing last year with my digital presence.</p>\n<p>I’m struggling to find a balance between personal privacy and being public. I don’t know where to draw the line right now. For that reason, I’ve practically given up publishing my content or data online. It’s gloomy to feel like the internet wants to do nothing more than take advantage of me. That’s where most of my thoughts go every time I want to post something like this.</p>\n<p>So, as a continuation of a personal resolution to take back control of my digital life instead of mindlessly feeding my data into all the apps, I will do two things this year.</p>\n<h2>Hide</h2>\n<p>I began a personal quest to protect myself from services like Facebook by encapsulating how I use it everywhere. In a significant way, I’ve removed my voice from most apps and sites by participating as little as possible. I’ve removed any data I can from search engines that I don’t think belongs there. I continue doing these things like not installing Google Chrome on any computer and uninstall it from all my personal computers. Chrome is replaced with <a href=\"https://brave.com/\">Brave Browser</a> but I primarily use Firefox for everything now. I will continue to wind down using large companies products as I’m able to and support freely available open source software.</p>\n<p>This all comes at a cost. I don’t have a way to privately share my life outside of some targeted private messages, calls or seeing people in person. It’s extreme and uneasy to disconnect from large parts of society. However, the more I learn about what’s going on, the more I think this active approach to privacy is needed.</p>\n<h2>Share</h2>\n<p>I don’t know how I’ll find a good balance, but I must consider that the majority of people I care about live outside of my personal physical and digital bubble. I want to be more present with life outside of occasional private messages. Anything that goes here on this website will be public enough that data aggregators can have it. I can’t control that part but I can control what I put out there.</p>\n<p>This is a public pledge that I treat as a fun adventure to learn and help society however possible. I will live as a naive optimist that privacy isn’t completely dead, doesn’t have to be, and there’s always a good way to be online. The internet has provided so much to me, but it’s now a place that takes even more from me. I choose not to give it so much. I will continue this journey by embracing <a href=\"https://small-tech.org/about/#small-technology\">ideals of using small technology</a>.</p>\n<h2>Inspiration</h2>\n<p>This is me reminding myself that <a href=\"https://www.nytimes.com/2019/12/28/opinion/sunday/2019-best-year-poverty.html\">we’re living in the best of times in human history</a>. Even if my privacy fears are real, I need reminders that ultimately I’ll be fine. Too often, nothing is as bad as it seems in a moment. I can’t change reality but I can change how I react.</p>",
                "value": "I never made formal resolutions for any new year. That said, it’s a good practice to better yourself so I think I’ll continue what I started doing last year with my digital presence.\nI’m struggling to find a balance between personal privacy and being public. I don’t know where to draw the line right now. For that reason, I’ve practically given up publishing my content or data online. It’s gloomy to feel like the internet wants to do nothing more than take advantage of me. That’s where most of my thoughts go every time I want to post something like this.\nSo, as a continuation of a personal resolution to take back control of my digital life instead of mindlessly feeding my data into all the apps, I will do two things this year.\nHide\nI began a personal quest to protect myself from services like Facebook by encapsulating how I use it everywhere. In a significant way, I’ve removed my voice from most apps and sites by participating as little as possible. I’ve removed any data I can from search engines that I don’t think belongs there. I continue doing these things like not installing Google Chrome on any computer and uninstall it from all my personal computers. Chrome is replaced with Brave Browser but I primarily use Firefox for everything now. I will continue to wind down using large companies products as I’m able to and support freely available open source software.\nThis all comes at a cost. I don’t have a way to privately share my life outside of some targeted private messages, calls or seeing people in person. It’s extreme and uneasy to disconnect from large parts of society. However, the more I learn about what’s going on, the more I think this active approach to privacy is needed.\nShare\nI don’t know how I’ll find a good balance, but I must consider that the majority of people I care about live outside of my personal physical and digital bubble. I want to be more present with life outside of occasional private messages. Anything that goes here on this website will be public enough that data aggregators can have it. I can’t control that part but I can control what I put out there.\nThis is a public pledge that I treat as a fun adventure to learn and help society however possible. I will live as a naive optimist that privacy isn’t completely dead, doesn’t have to be, and there’s always a good way to be online. The internet has provided so much to me, but it’s now a place that takes even more from me. I choose not to give it so much. I will continue this journey by embracing ideals of using small technology.\nInspiration\nThis is me reminding myself that we’re living in the best of times in human history. Even if my privacy fears are real, I need reminders that ultimately I’ll be fine. Too often, nothing is as bad as it seems in a moment. I can’t change reality but I can change how I react."
              }
            ],
            "url": [
              "https://asuh.com/online-resolutions/"
            ],
            "published": [
              "2020-01-01T23:58:47-08:00"
            ],
            "updated": [
              "2020-01-01T23:58:47-08:00"
            ],
            "syndication": [
              "https://twitter.com/asuh/status/1212758921523281921"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "20 plus 20"
            ],
            "content": [
              {
                "html": "<p>This year, I lived as many years after 2000 as I did before 2000.</p>",
                "value": "This year, I lived as many years after 2000 as I did before 2000."
              }
            ],
            "url": [
              "https://asuh.com/20-plus-20/"
            ],
            "published": [
              "2020-01-01T12:55:44-08:00"
            ],
            "updated": [
              "2020-01-01T12:55:44-08:00"
            ],
            "syndication": [
              "https://twitter.com/asuh/status/1212477442234826752"
            ]
          }
        }
      ]
    }
  ],
  "rels": {
    "canonical": [
      "https://asuh.com/"
    ],
    "next": [
      "https://asuh.com/page/2/"
    ],
    "alternate": [
      "https://asuh.com/feed/"
    ],
    "stylesheet": [
      "https://asuh.com/wp/wp-content/mmr/b49d46f5-1666018404.min.css"
    ],
    "authorization_endpoint": [
      "https://asuh.com/wp-json/indieauth/1.0/auth"
    ],
    "token_endpoint": [
      "https://asuh.com/wp-json/indieauth/1.0/token"
    ],
    "me": [
      "https://github.com/asuh",
      "https://twitter.com/asuh",
      "https://www.facebook.com/micasuh",
      "https://www.instagram.com/micasuh",
      "https://asuh.com/"
    ],
    "micropub_media": [
      "https://asuh.com/wp-json/micropub/1.0/media"
    ],
    "micropub": [
      "https://asuh.com/wp-json/micropub/1.0/endpoint"
    ]
  },
  "rel-urls": {
    "https://asuh.com/": {
      "rels": [
        "canonical"
      ]
    },
    "https://asuh.com/page/2/": {
      "rels": [
        "next"
      ]
    },
    "https://asuh.com/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "asuh.com » Feed",
      "type": "application/rss+xml"
    },
    "https://asuh.com/wp/wp-content/mmr/b49d46f5-1666018404.min.css": {
      "rels": [
        "stylesheet"
      ]
    },
    "https://asuh.com/wp-json/indieauth/1.0/auth": {
      "rels": [
        "authorization_endpoint"
      ]
    },
    "https://asuh.com/wp-json/indieauth/1.0/token": {
      "rels": [
        "token_endpoint"
      ]
    },
    "https://github.com/asuh": {
      "rels": [
        "me"
      ]
    },
    "https://twitter.com/asuh": {
      "rels": [
        "me"
      ]
    },
    "https://www.facebook.com/micasuh": {
      "rels": [
        "me"
      ]
    },
    "https://www.instagram.com/micasuh": {
      "rels": [
        "me"
      ]
    },
    "https://asuh.com/wp-json/micropub/1.0/media": {
      "rels": [
        "micropub_media"
      ]
    },
    "https://asuh.com/wp-json/micropub/1.0/endpoint": {
      "rels": [
        "micropub"
      ]
    }
  }
}