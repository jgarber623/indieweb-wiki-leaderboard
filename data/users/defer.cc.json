{
  "items": [
    {
      "type": [
        "h-feed"
      ],
      "properties": {},
      "children": [
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/sherlock-doing-sherlock-things/"
            ],
            "uid": [
              "https://defer.cc/sherlock-doing-sherlock-things/"
            ],
            "published": [
              "2022-10-12 23:01:31"
            ],
            "content": [
              {
                "html": "<p><img src=\"https://defer.cc/sherlock-1.jpeg\" alt></p>",
                "value": ""
              },
              {
                "html": "",
                "value": ""
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/hugify/"
            ],
            "uid": [
              "https://defer.cc/hugify/"
            ],
            "published": [
              "2022-10-12 08:41:00"
            ],
            "content": [
              {
                "html": "<p>Thought about the Hugo -&gt; GitHub -&gt; Netlify stack and I think <strong>Hugify</strong> is a good name.</p>",
                "value": "Thought about the Hugo -> GitHub -> Netlify stack and I think Hugify is a good name."
              },
              {
                "html": "<ul class=\"tags\"><li><small><a href=\"https://defer.cc/tags/showerthoughts/\">#showerthoughts</a></small></li></ul>",
                "value": "#showerthoughts"
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/prepare-your-forkbomb-for-halloween/"
            ],
            "uid": [
              "https://defer.cc/prepare-your-forkbomb-for-halloween/"
            ],
            "published": [
              "2022-10-06 05:42:23"
            ],
            "content": [
              {
                "html": "<p>Found this tweet yesterday from <a href=\"https://twitter.com/ryancdotorg\">Ryan</a> and I did not know that either</p>\n<blockquote>\n<p>I am shocked to discover that this works in bash from at least version 4.4.x:</p>\n<p><code>🎃(){ 🎃|🎃&amp; };🎃</code></p>\n</blockquote>\n<p>Link to the original tweet <a href=\"https://twitter.com/ryancdotorg/status/1577729437785018368\">here</a></p>",
                "value": "Found this tweet yesterday from Ryan and I did not know that eitherI am shocked to discover that this works in bash from at least version 4.4.x:🎃(){ 🎃|🎃& };🎃Link to the original tweet here"
              },
              {
                "html": "<ul class=\"tags\"><li><small><a href=\"https://defer.cc/tags/bash/\">#bash</a></small></li></ul>",
                "value": "#bash"
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/mute-retweets-for-everyone/"
            ],
            "uid": [
              "https://defer.cc/mute-retweets-for-everyone/"
            ],
            "published": [
              "2022-09-26 00:00:00"
            ],
            "content": [
              {
                "html": "<p>Today I learned that <a href=\"https://twitter.com/\">Twitter</a> still uses the\noriginal retweet style format “RT @” in the background for native retweets too.</p>\n<p>So I muted “RT @” for everyone in my Home timeline and it looks like that it works.</p>\n<ul>\n<li>Go to your Twitter settings<ul><li><a href=\"https://twitter.com/settings/muted_keywords\">https://twitter.com/settings/muted_keywords</a></li></ul>\n</li>\n<li>Go to “Muted words”</li>\n<li>Add “+”</li>\n<li>Enter the phrase “RT @”</li>\n<li>Check “Home timeline”</li>\n<li>Check “Until you unmute the word”</li>\n<li>Click “Save”</li>\n</ul>",
                "value": "Today I learned that Twitter still uses the\noriginal retweet style format “RT @” in the background for native retweets too.So I muted “RT @” for everyone in my Home timeline and it looks like that it works.Go to your Twitter settingshttps://twitter.com/settings/muted_keywordsGo to “Muted words”Add “+”Enter the phrase “RT @”Check “Home timeline”Check “Until you unmute the word”Click “Save”"
              },
              {
                "html": "<ul class=\"tags\"><li><small><a href=\"https://defer.cc/tags/twitter/\">#twitter</a></small></li></ul>",
                "value": "#twitter"
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/shamazing/"
            ],
            "uid": [
              "https://defer.cc/shamazing/"
            ],
            "published": [
              "2022-03-09 10:20:00"
            ],
            "content": [
              {
                "html": "<p>Find the longest string or integer in a SHA1 Hash (or whatever).\nIt’s just sha-mazing and without any sense.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-go\" data-lang=\"go\"><span class=\"kn\">package</span> <span class=\"nx\">shamazing</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n\t<span class=\"s\">\"regexp\"</span>\n\t<span class=\"s\">\"strconv\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// FindLongestString will retrieve a string like a SHA1, MD5 or whatever\n</span><span class=\"c1\">// and return the longest string (first one)\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">FindLongestString</span><span class=\"p\">(</span><span class=\"nx\">str</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">re</span> <span class=\"p\">=</span> <span class=\"nx\">regexp</span><span class=\"p\">.</span><span class=\"nf\">MustCompile</span><span class=\"p\">(</span><span class=\"s\">\"[a-zA-Z]+\"</span><span class=\"p\">)</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">values</span> <span class=\"p\">=</span> <span class=\"nx\">re</span><span class=\"p\">.</span><span class=\"nf\">FindAll</span><span class=\"p\">([]</span><span class=\"nb\">byte</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">return</span> <span class=\"nb\">string</span><span class=\"p\">(</span><span class=\"nf\">findLongest</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// FindLongestInteger will retrieve a string like a SHA1, MD5 or whatever\n</span><span class=\"c1\">// and return longest integer (first one)\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">FindLongestInteger</span><span class=\"p\">(</span><span class=\"nx\">str</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">int64</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">re</span> <span class=\"p\">=</span> <span class=\"nx\">regexp</span><span class=\"p\">.</span><span class=\"nf\">MustCompile</span><span class=\"p\">(</span><span class=\"s\">\"[0-9]+\"</span><span class=\"p\">)</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">values</span> <span class=\"p\">=</span> <span class=\"nx\">re</span><span class=\"p\">.</span><span class=\"nf\">FindAll</span><span class=\"p\">([]</span><span class=\"nb\">byte</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">max</span> <span class=\"p\">=</span> <span class=\"nf\">findLongest</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">)</span>\n\n\t<span class=\"kd\">var</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"p\">=</span> <span class=\"nx\">strconv</span><span class=\"p\">.</span><span class=\"nf\">Atoi</span><span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">(</span><span class=\"nx\">max</span><span class=\"p\">))</span>\n\t<span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">err</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"nb\">int64</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">),</span> <span class=\"kc\">nil</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">findLongest</span><span class=\"p\">(</span><span class=\"nx\">values</span> <span class=\"p\">[][]</span><span class=\"kt\">byte</span><span class=\"p\">)</span> <span class=\"p\">[]</span><span class=\"kt\">byte</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">max</span> <span class=\"p\">[]</span><span class=\"kt\">byte</span>\n\t<span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">value</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">values</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">max</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nx\">max</span> <span class=\"p\">=</span> <span class=\"nx\">value</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">max</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
                "value": "Find the longest string or integer in a SHA1 Hash (or whatever).\nIt’s just sha-mazing and without any sense.package shamazing\n\nimport (\n\t\"regexp\"\n\t\"strconv\"\n)\n\n// FindLongestString will retrieve a string like a SHA1, MD5 or whatever\n// and return the longest string (first one)\nfunc FindLongestString(str string) string {\n\tvar re = regexp.MustCompile(\"[a-zA-Z]+\")\n\tvar values = re.FindAll([]byte(str), -1)\n\n\treturn string(findLongest(values))\n}\n\n// FindLongestInteger will retrieve a string like a SHA1, MD5 or whatever\n// and return longest integer (first one)\nfunc FindLongestInteger(str string) (int64, error) {\n\tvar re = regexp.MustCompile(\"[0-9]+\")\n\tvar values = re.FindAll([]byte(str), -1)\n\tvar max = findLongest(values)\n\n\tvar a, err = strconv.Atoi(string(max))\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn int64(a), nil\n}\n\nfunc findLongest(values [][]byte) []byte {\n\tvar max []byte\n\tfor _, value := range values {\n\t\tif len(value) > len(max) {\n\t\t\tmax = value\n\t\t}\n\t}\n\treturn max\n}"
              },
              {
                "html": "<ul class=\"tags\"><li><small><a href=\"https://defer.cc/tags/golang/\">#golang</a></small></li></ul>",
                "value": "#golang"
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/coinbase-api/"
            ],
            "uid": [
              "https://defer.cc/coinbase-api/"
            ],
            "published": [
              "2022-02-16 10:11:00"
            ],
            "content": [
              {
                "html": "<p>Created an package in <a href=\"https://go.dev/\">Go</a> to retrieve the current price for an crypto currency.\nI used this in another project and thought it will make sense to publish this as an own package.</p>\n<p><a href=\"https://github.com/mnlwldr/coinbase\">GitHub</a></p>",
                "value": "Created an package in Go to retrieve the current price for an crypto currency.\nI used this in another project and thought it will make sense to publish this as an own package.GitHub"
              },
              {
                "html": "<ul class=\"tags\"><li><small><a href=\"https://defer.cc/tags/golang/\">#golang</a></small></li></ul>",
                "value": "#golang"
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/payone/"
            ],
            "uid": [
              "https://defer.cc/payone/"
            ],
            "published": [
              "2022-02-14 10:20:00"
            ],
            "content": [
              {
                "html": "<p>Published a package today to create a <a href=\"https://www.payone.com/\">Payone</a> request.</p>\n<p><a href=\"https://github.com/mnlwldr/payone\">GitHub</a></p>",
                "value": "Published a package today to create a Payone request.GitHub"
              },
              {
                "html": "<ul class=\"tags\"><li><small><a href=\"https://defer.cc/tags/golang/\">#golang</a></small></li></ul>",
                "value": "#golang"
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/rsstohtml/"
            ],
            "uid": [
              "https://defer.cc/rsstohtml/"
            ],
            "published": [
              "2022-02-04 10:20:00"
            ],
            "content": [
              {
                "html": "<p>I build a tool today to generate a HTML page from several RSS feeds.\nInspired by <a href=\"https://engineeringblogs.xyz/\">engineeringblogs.xyz</a> (<a href=\"https://github.com/peterc/engblogs\">GitHub</a>).</p>\n<p><kbd>go run Reader.go example-urls &gt; example-output.html</kbd></p>\n<p>The generated HTML page will lool like <a href=\"https://htmlpreview.github.io/?https://github.com/mnlwldr/rss-reader/blob/main/example-output.html\">this</a>. You can find the code <a href=\"https://github.com/mnlwldr/rss-feeds-to-html/\">on GitHub</a>.</p>",
                "value": "I build a tool today to generate a HTML page from several RSS feeds.\nInspired by engineeringblogs.xyz (GitHub).go run Reader.go example-urls > example-output.htmlThe generated HTML page will lool like this. You can find the code on GitHub."
              },
              {
                "html": "<ul class=\"tags\"><li><small><a href=\"https://defer.cc/tags/golang/\">#golang</a></small></li></ul>",
                "value": "#golang"
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/hi-lo/"
            ],
            "uid": [
              "https://defer.cc/hi-lo/"
            ],
            "published": [
              "2022-01-21 10:26:00"
            ],
            "content": [
              {
                "html": "<p>Implemented the old game “Hi-Lo” in <a href=\"https://go.dev/\">Go</a> today after I stumpled over <a href=\"https://ovid.github.io/blog/programming-in-1987-versus-today.html\">this blog post</a> and <a href=\"https://github.com/coding-horror/basic-computer-games\">basic-computer-games</a>.</p>\n<blockquote><p>This game is an adaptation of the game GUESS; however, instead of just guessing a number between 1 and 100, in this game you win dollars when you guess the number.</p></blockquote>\n<p>You can find my implementation in <a href=\"https://github.com/mnlwldr/Hi-Lo/\">GitHub</a></p>",
                "value": "Implemented the old game “Hi-Lo” in Go today after I stumpled over this blog post and basic-computer-games.This game is an adaptation of the game GUESS; however, instead of just guessing a number between 1 and 100, in this game you win dollars when you guess the number.You can find my implementation in GitHub"
              },
              {
                "html": "<ul class=\"tags\"><li><small><a href=\"https://defer.cc/tags/golang/\">#golang</a></small></li></ul>",
                "value": "#golang"
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/wordle-opener-golang/"
            ],
            "uid": [
              "https://defer.cc/wordle-opener-golang/"
            ],
            "published": [
              "2022-01-13 00:00:00"
            ],
            "content": [
              {
                "html": "<p>Like some other people, I played Wordle the last days. Today, I wrote a little tool to find out whats can be a good opener. Jotto is a similar game so it’s easy to find a list of words like this <a href=\"https://www.easysurf.cc/list1.htm\" rel=\"noopener nofollow noreferrer\" target=\"_blank\" title=\"https://www.easysurf.cc/list1.htm\"></a><a href=\"https://www.easysurf.cc/list1.htm\">https://www.easysurf.cc/list1.htm</a></p>\n<p>I downloaded and checked it against my helper tool. The code is not a beauty but it works (and I hope correctly)</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-go\" data-lang=\"go\"><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n\t<span class=\"s\">\"bufio\"</span>\n\t<span class=\"s\">\"fmt\"</span>\n\t<span class=\"s\">\"os\"</span>\n\t<span class=\"s\">\"sort\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"nf\">checkAgainstWordlist</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">checkAgainstWordlist</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">lettercount</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"kd\">map</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"kt\">int</span><span class=\"p\">)</span>\n\n\t<span class=\"nx\">file</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">os</span><span class=\"p\">.</span><span class=\"nf\">Open</span><span class=\"p\">(</span><span class=\"s\">\"Wordlist\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n\t\t<span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">defer</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nf\">Close</span><span class=\"p\">()</span>\n\n\t<span class=\"nx\">scanner</span> <span class=\"o\">:=</span> <span class=\"nx\">bufio</span><span class=\"p\">.</span><span class=\"nf\">NewScanner</span><span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span> <span class=\"nx\">scanner</span><span class=\"p\">.</span><span class=\"nf\">Scan</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t\t<span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">letter</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">scanner</span><span class=\"p\">.</span><span class=\"nf\">Text</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"nx\">ok</span> <span class=\"o\">:=</span> <span class=\"nx\">lettercount</span><span class=\"p\">[</span><span class=\"nf\">rune2c</span><span class=\"p\">(</span><span class=\"nx\">letter</span><span class=\"p\">)];</span> <span class=\"nx\">ok</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"nx\">lettercount</span><span class=\"p\">[</span><span class=\"nf\">rune2c</span><span class=\"p\">(</span><span class=\"nx\">letter</span><span class=\"p\">)]</span> <span class=\"p\">=</span> <span class=\"nx\">val</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"nx\">lettercount</span><span class=\"p\">[</span><span class=\"nf\">rune2c</span><span class=\"p\">(</span><span class=\"nx\">letter</span><span class=\"p\">)]</span> <span class=\"p\">=</span> <span class=\"mi\">1</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"nf\">rankByWordCount</span><span class=\"p\">(</span><span class=\"nx\">lettercount</span><span class=\"p\">))</span>\n\n\t<span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">scanner</span><span class=\"p\">.</span><span class=\"nf\">Err</span><span class=\"p\">();</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n\t\t<span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">rune2c</span><span class=\"p\">(</span><span class=\"nx\">r</span> <span class=\"kt\">rune</span><span class=\"p\">)</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"%c\"</span><span class=\"p\">,</span> <span class=\"nx\">r</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// https://stackoverflow.com/questions/18695346/how-can-i-sort-a-mapstringint-by-its-values\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">rankByWordCount</span><span class=\"p\">(</span><span class=\"nx\">wordFrequencies</span> <span class=\"kd\">map</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"nx\">PairList</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">pl</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"nx\">PairList</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">wordFrequencies</span><span class=\"p\">))</span>\n\t<span class=\"nx\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\t<span class=\"k\">for</span> <span class=\"nx\">k</span><span class=\"p\">,</span> <span class=\"nx\">v</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">wordFrequencies</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">pl</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"nx\">Pair</span><span class=\"p\">{</span><span class=\"nx\">k</span><span class=\"p\">,</span> <span class=\"nx\">v</span><span class=\"p\">}</span>\n\t\t<span class=\"nx\">i</span><span class=\"o\">++</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"nx\">sort</span><span class=\"p\">.</span><span class=\"nf\">Sort</span><span class=\"p\">(</span><span class=\"nx\">sort</span><span class=\"p\">.</span><span class=\"nf\">Reverse</span><span class=\"p\">(</span><span class=\"nx\">pl</span><span class=\"p\">))</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">pl</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">Pair</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">Key</span>   <span class=\"kt\">string</span>\n\t<span class=\"nx\">Value</span> <span class=\"kt\">int</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">PairList</span> <span class=\"p\">[]</span><span class=\"nx\">Pair</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">p</span> <span class=\"nx\">PairList</span><span class=\"p\">)</span> <span class=\"nf\">Len</span><span class=\"p\">()</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">p</span> <span class=\"nx\">PairList</span><span class=\"p\">)</span> <span class=\"nf\">Less</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"nx\">j</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">bool</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">Value</span> <span class=\"p\">&lt;</span> <span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">].</span><span class=\"nx\">Value</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">p</span> <span class=\"nx\">PairList</span><span class=\"p\">)</span> <span class=\"nf\">Swap</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"nx\">j</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">],</span> <span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">],</span> <span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n</code></pre></div>\n<p>The result was</p>\n<p><code>[{e 709} {a 679} {r 565} {t 499} {i 480} {o 457} {s 429} {l 428} {n 418} {c 352} {u 335} {h 302} {d 258} {p 240} {y 238} {m 222} {g 203} {b 185} {k 154} {w 137} {f 137} {v 99} {x 30} {q 26} {z 24} {j 19}]</code></p>\n<p>(e = 709 times, a = 679 times, &amp;mldr;)</p>\n<p>That means e,a,r,t, and i are the most used letters in the list. A word for this combination of letters can be <code>IRATE</code>.</p>\n<h4 id=\"update-14012022\">Update 14.01.2022</h4>\n<p>I got the Wordlist from Wordle itself and run my code again. The result are:</p>\n<p><code>[{s 6665} {e 6662} {a 5990} {o 4438} {r 4158} {i 3759} {l 3371} {t 3295} {n 2952} {u 2511} {d 2453} {y 2074} {c 2028} {p 2019} {m 1976} {h 1760} {g 1644} {b 1627} {k 1505} {f 1115} {w 1039} {v 694} {z 434} {j 291} {x 288} {q 112}]</code></p>\n<p>That meas a possible good opener can be <code>AROSE</code>.</p>\n<h4 id=\"update-15012022\">Update 15.01.2022</h4>\n<p>Someone told me that Wordle are using two list. The first list for the Wordle itself and the second list for possible words. I made the mistake and combined both lists in the\nlast result.</p>\n<p>I tried it again with the list for the game and the result is slightly different:</p>\n<p><code>[{e 1233} {a 979} {r 899} {o 754} {t 729} {l 719} {i 671} {s 669} {n 575} {c 477} {u 467} {y 425} {d 393} {h 389} {p 367} {m 316} {g 311} {b 281} {f 230} {k 210} {w 195} {v 153} {z 40} {x 37} {q 29} {j 27}]</code></p>\n<p><code>e,a,r,o, and t</code> are the most used letters. I don’t know a word with this letters so I think I will stay with <code>AROSE</code> as an opener.</p>",
                "value": "Like some other people, I played Wordle the last days. Today, I wrote a little tool to find out whats can be a good opener. Jotto is a similar game so it’s easy to find a list of words like this https://www.easysurf.cc/list1.htmI downloaded and checked it against my helper tool. The code is not a beauty but it works (and I hope correctly)package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"sort\"\n)\n\nfunc main() {\n\tcheckAgainstWordlist()\n}\n\nfunc checkAgainstWordlist() {\n\tlettercount := make(map[string]int)\n\n\tfile, err := os.Open(\"Wordlist\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\n\t\tfor _, letter := range scanner.Text() {\n\t\t\tif val, ok := lettercount[rune2c(letter)]; ok {\n\t\t\t\tlettercount[rune2c(letter)] = val + 1\n\t\t\t} else {\n\t\t\t\tlettercount[rune2c(letter)] = 1\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(rankByWordCount(lettercount))\n\n\tif err := scanner.Err(); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc rune2c(r rune) string {\n\treturn fmt.Sprintf(\"%c\", r)\n}\n\n// https://stackoverflow.com/questions/18695346/how-can-i-sort-a-mapstringint-by-its-values\nfunc rankByWordCount(wordFrequencies map[string]int) PairList {\n\tpl := make(PairList, len(wordFrequencies))\n\ti := 0\n\tfor k, v := range wordFrequencies {\n\t\tpl[i] = Pair{k, v}\n\t\ti++\n\t}\n\tsort.Sort(sort.Reverse(pl))\n\treturn pl\n}\n\ntype Pair struct {\n\tKey   string\n\tValue int\n}\n\ntype PairList []Pair\n\nfunc (p PairList) Len() int {\n\treturn len(p)\n}\n\nfunc (p PairList) Less(i, j int) bool {\n\treturn p[i].Value < p[j].Value\n}\n\nfunc (p PairList) Swap(i, j int) {\n\tp[i], p[j] = p[j], p[i]\n}\n\nThe result was[{e 709} {a 679} {r 565} {t 499} {i 480} {o 457} {s 429} {l 428} {n 418} {c 352} {u 335} {h 302} {d 258} {p 240} {y 238} {m 222} {g 203} {b 185} {k 154} {w 137} {f 137} {v 99} {x 30} {q 26} {z 24} {j 19}](e = 709 times, a = 679 times, &mldr;)That means e,a,r,t, and i are the most used letters in the list. A word for this combination of letters can be IRATE.Update 14.01.2022I got the Wordlist from Wordle itself and run my code again. The result are:[{s 6665} {e 6662} {a 5990} {o 4438} {r 4158} {i 3759} {l 3371} {t 3295} {n 2952} {u 2511} {d 2453} {y 2074} {c 2028} {p 2019} {m 1976} {h 1760} {g 1644} {b 1627} {k 1505} {f 1115} {w 1039} {v 694} {z 434} {j 291} {x 288} {q 112}]That meas a possible good opener can be AROSE.Update 15.01.2022Someone told me that Wordle are using two list. The first list for the Wordle itself and the second list for possible words. I made the mistake and combined both lists in the\nlast result.I tried it again with the list for the game and the result is slightly different:[{e 1233} {a 979} {r 899} {o 754} {t 729} {l 719} {i 671} {s 669} {n 575} {c 477} {u 467} {y 425} {d 393} {h 389} {p 367} {m 316} {g 311} {b 281} {f 230} {k 210} {w 195} {v 153} {z 40} {x 37} {q 29} {j 27}]e,a,r,o, and t are the most used letters. I don’t know a word with this letters so I think I will stay with AROSE as an opener."
              },
              {
                "html": "<ul class=\"tags\"><li><small><a href=\"https://defer.cc/tags/golang/\">#golang</a></small></li></ul>",
                "value": "#golang"
              }
            ]
          }
        }
      ]
    }
  ],
  "rels": {
    "authorization_endpoint": [
      "https://indieauth.com/auth"
    ],
    "webmention": [
      "https://webmention.io/defer.cc/webmention"
    ],
    "pingback": [
      "https://webmention.io/defer.cc/xmlrpc"
    ],
    "me": [
      "https://twitter.com/mnlwldr",
      "https://github.com/mnlwldr",
      "mailto:mnlwldr@gmail.com"
    ],
    "canonical": [
      "https://defer.cc/"
    ],
    "alternate": [
      "https://defer.cc/atom.xml"
    ],
    "nofollow": [
      "https://www.easysurf.cc/list1.htm"
    ],
    "noopener": [
      "https://www.easysurf.cc/list1.htm"
    ],
    "noreferrer": [
      "https://www.easysurf.cc/list1.htm"
    ]
  },
  "rel-urls": {
    "https://indieauth.com/auth": {
      "rels": [
        "authorization_endpoint"
      ]
    },
    "https://webmention.io/defer.cc/webmention": {
      "rels": [
        "webmention"
      ]
    },
    "https://webmention.io/defer.cc/xmlrpc": {
      "rels": [
        "pingback"
      ]
    },
    "https://twitter.com/mnlwldr": {
      "rels": [
        "me"
      ]
    },
    "https://github.com/mnlwldr": {
      "rels": [
        "me"
      ]
    },
    "mailto:mnlwldr@gmail.com": {
      "rels": [
        "me"
      ]
    },
    "https://defer.cc/": {
      "rels": [
        "canonical"
      ]
    },
    "https://defer.cc/atom.xml": {
      "rels": [
        "alternate"
      ],
      "title": "defer.cc",
      "type": "application/rss+xml"
    },
    "https://www.easysurf.cc/list1.htm": {
      "rels": [
        "nofollow",
        "noopener",
        "noreferrer"
      ],
      "title": "https://www.easysurf.cc/list1.htm"
    }
  }
}