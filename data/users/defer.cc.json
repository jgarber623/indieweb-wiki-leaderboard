{
  "items": [
    {
      "type": [
        "h-card"
      ],
      "properties": {
        "photo": [
          {
            "value": "https://defer.cc/favicon.jpg",
            "alt": "me"
          }
        ],
        "nickname": [
          "mnlwldr"
        ],
        "note": [
          "Thoughts about programming and other things I want to share"
        ],
        "email": [
          "mailto:mnlwldr@gmail.com"
        ]
      }
    },
    {
      "type": [
        "h-feed"
      ],
      "properties": {},
      "children": [
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/think-thats-okay/"
            ],
            "uid": [
              "https://defer.cc/think-thats-okay/"
            ],
            "published": [
              "2022-10-13 22:23:00"
            ],
            "content": [
              {
                "html": "<p><img src=\"https://defer.cc/Fd7fILZWAAYwgcG.jpeg\" alt=\"Bunny\"></p>",
                "value": "Bunny"
              }
            ],
            "name": [
              "Bunny"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/hugify/"
            ],
            "uid": [
              "https://defer.cc/hugify/"
            ],
            "published": [
              "2022-10-12 08:41:00"
            ],
            "content": [
              {
                "html": "<p>Thought about the Hugo -&gt; GitHub -&gt; Netlify stack and I think <strong>Hugify</strong> is a good name.</p>",
                "value": "Thought about the Hugo -> GitHub -> Netlify stack and I think Hugify is a good name."
              }
            ],
            "name": [
              "Thought about the Hugo -> GitHub -> Netlify stack and I think Hugify is a good name."
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/prepare-your-forkbomb-for-halloween/"
            ],
            "uid": [
              "https://defer.cc/prepare-your-forkbomb-for-halloween/"
            ],
            "published": [
              "2022-10-06 05:42:23"
            ],
            "content": [
              {
                "html": "<p>Found this tweet yesterday from <a href=\"https://twitter.com/ryancdotorg\">Ryan</a> and I did not know that either</p>\n<blockquote>\n<p>I am shocked to discover that this works in bash from at least version 4.4.x:</p>\n<p><code>🎃(){ 🎃|🎃&amp; };🎃</code></p>\n</blockquote>\n<p>Link to the original tweet <a href=\"https://twitter.com/ryancdotorg/status/1577729437785018368\">here</a></p>",
                "value": "Found this tweet yesterday from Ryan and I did not know that eitherI am shocked to discover that this works in bash from at least version 4.4.x:🎃(){ 🎃|🎃& };🎃Link to the original tweet here"
              }
            ],
            "name": [
              "Found this tweet yesterday from Ryan and I did not know that eitherI am shocked to discover that this works in bash from at least version 4.4.x:🎃(){ 🎃|🎃& };🎃Link to the original tweet here"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/as-if-nothing-happened/"
            ],
            "uid": [
              "https://defer.cc/as-if-nothing-happened/"
            ],
            "published": [
              "2022-10-05 20:00:21"
            ],
            "content": [
              {
                "html": "<blockquote><p>“As If Nothing Happened”: I Used Artificial Intelligence To See How Some Celebrities Would Look Today If They Were Alive</p></blockquote>\n<p><a href=\"https://www.boredpanda.com/ai-images-of-celebrities-as-if-nothing-happened-to-them-alper-yesiltas/\">Boredpanda</a></p>",
                "value": "“As If Nothing Happened”: I Used Artificial Intelligence To See How Some Celebrities Would Look Today If They Were AliveBoredpanda"
              }
            ],
            "name": [
              "“As If Nothing Happened”: I Used Artificial Intelligence To See How Some Celebrities Would Look Today If They Were AliveBoredpanda"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/mute-retweets-for-everyone/"
            ],
            "uid": [
              "https://defer.cc/mute-retweets-for-everyone/"
            ],
            "published": [
              "2022-09-26 00:00:00"
            ],
            "content": [
              {
                "html": "<p>Today I learned that <a href=\"https://twitter.com/\">Twitter</a> still uses the\noriginal retweet style format “RT @” in the background for native retweets too.</p>\n<p>So I muted “RT @” for everyone in my Home timeline and it looks like that it works.</p>\n<ul>\n<li>Go to your Twitter settings<ul><li><a href=\"https://twitter.com/settings/muted_keywords\">https://twitter.com/settings/muted_keywords</a></li></ul>\n</li>\n<li>Go to “Muted words”</li>\n<li>Add “+”</li>\n<li>Enter the phrase “RT @”</li>\n<li>Check “Home timeline”</li>\n<li>Check “Until you unmute the word”</li>\n<li>Click “Save”</li>\n</ul>",
                "value": "Today I learned that Twitter still uses the\noriginal retweet style format “RT @” in the background for native retweets too.So I muted “RT @” for everyone in my Home timeline and it looks like that it works.Go to your Twitter settingshttps://twitter.com/settings/muted_keywordsGo to “Muted words”Add “+”Enter the phrase “RT @”Check “Home timeline”Check “Until you unmute the word”Click “Save”"
              }
            ],
            "name": [
              "Today I learned that Twitter still uses the\noriginal retweet style format “RT @” in the background for native retweets too.So I muted “RT @” for everyone in my Home timeline and it looks like that it works.Go to your Twitter settingshttps://twitter.com/settings/muted_keywordsGo to “Muted words”Add “+”Enter the phrase “RT @”Check “Home timeline”Check “Until you unmute the word”Click “Save”"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/loose-weight-difficult/"
            ],
            "uid": [
              "https://defer.cc/loose-weight-difficult/"
            ],
            "published": [
              "2022-09-24 16:05:09"
            ],
            "content": [
              {
                "html": "<p>Lose Weight the Slow and Incredibly Difficult Way</p>\n<p><a href=\"https://nautil.us/lose-weight-the-slow-and-incredibly-difficult-way-239703/\">nautil.us</a></p>",
                "value": "Lose Weight the Slow and Incredibly Difficult Waynautil.us"
              }
            ],
            "name": [
              "Lose Weight the Slow and Incredibly Difficult Waynautil.us"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/shamazing/"
            ],
            "uid": [
              "https://defer.cc/shamazing/"
            ],
            "published": [
              "2022-03-09 10:20:00"
            ],
            "content": [
              {
                "html": "<p>Find the longest string or integer in a SHA1 Hash (or whatever).\nIt’s just sha-mazing and without any sense.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-go\" data-lang=\"go\"><span class=\"kn\">package</span> <span class=\"nx\">shamazing</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n\t<span class=\"s\">\"regexp\"</span>\n\t<span class=\"s\">\"strconv\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// FindLongestString will retrieve a string like a SHA1, MD5 or whatever\n</span><span class=\"c1\">// and return the longest string (first one)\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">FindLongestString</span><span class=\"p\">(</span><span class=\"nx\">str</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">re</span> <span class=\"p\">=</span> <span class=\"nx\">regexp</span><span class=\"p\">.</span><span class=\"nf\">MustCompile</span><span class=\"p\">(</span><span class=\"s\">\"[a-zA-Z]+\"</span><span class=\"p\">)</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">values</span> <span class=\"p\">=</span> <span class=\"nx\">re</span><span class=\"p\">.</span><span class=\"nf\">FindAll</span><span class=\"p\">([]</span><span class=\"nb\">byte</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">return</span> <span class=\"nb\">string</span><span class=\"p\">(</span><span class=\"nf\">findLongest</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// FindLongestInteger will retrieve a string like a SHA1, MD5 or whatever\n</span><span class=\"c1\">// and return longest integer (first one)\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">FindLongestInteger</span><span class=\"p\">(</span><span class=\"nx\">str</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">int64</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">re</span> <span class=\"p\">=</span> <span class=\"nx\">regexp</span><span class=\"p\">.</span><span class=\"nf\">MustCompile</span><span class=\"p\">(</span><span class=\"s\">\"[0-9]+\"</span><span class=\"p\">)</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">values</span> <span class=\"p\">=</span> <span class=\"nx\">re</span><span class=\"p\">.</span><span class=\"nf\">FindAll</span><span class=\"p\">([]</span><span class=\"nb\">byte</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">max</span> <span class=\"p\">=</span> <span class=\"nf\">findLongest</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">)</span>\n\n\t<span class=\"kd\">var</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"p\">=</span> <span class=\"nx\">strconv</span><span class=\"p\">.</span><span class=\"nf\">Atoi</span><span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">(</span><span class=\"nx\">max</span><span class=\"p\">))</span>\n\t<span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">err</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"nb\">int64</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">),</span> <span class=\"kc\">nil</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">findLongest</span><span class=\"p\">(</span><span class=\"nx\">values</span> <span class=\"p\">[][]</span><span class=\"kt\">byte</span><span class=\"p\">)</span> <span class=\"p\">[]</span><span class=\"kt\">byte</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">var</span> <span class=\"nx\">max</span> <span class=\"p\">[]</span><span class=\"kt\">byte</span>\n\t<span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">value</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">values</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">max</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nx\">max</span> <span class=\"p\">=</span> <span class=\"nx\">value</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">max</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
                "value": "Find the longest string or integer in a SHA1 Hash (or whatever).\nIt’s just sha-mazing and without any sense.package shamazing\n\nimport (\n\t\"regexp\"\n\t\"strconv\"\n)\n\n// FindLongestString will retrieve a string like a SHA1, MD5 or whatever\n// and return the longest string (first one)\nfunc FindLongestString(str string) string {\n\tvar re = regexp.MustCompile(\"[a-zA-Z]+\")\n\tvar values = re.FindAll([]byte(str), -1)\n\n\treturn string(findLongest(values))\n}\n\n// FindLongestInteger will retrieve a string like a SHA1, MD5 or whatever\n// and return longest integer (first one)\nfunc FindLongestInteger(str string) (int64, error) {\n\tvar re = regexp.MustCompile(\"[0-9]+\")\n\tvar values = re.FindAll([]byte(str), -1)\n\tvar max = findLongest(values)\n\n\tvar a, err = strconv.Atoi(string(max))\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn int64(a), nil\n}\n\nfunc findLongest(values [][]byte) []byte {\n\tvar max []byte\n\tfor _, value := range values {\n\t\tif len(value) > len(max) {\n\t\t\tmax = value\n\t\t}\n\t}\n\treturn max\n}"
              }
            ],
            "name": [
              "Find the longest string or integer in a SHA1 Hash (or whatever).\nIt’s just sha-mazing and without any sense.package shamazing\n\nimport (\n\t\"regexp\"\n\t\"strconv\"\n)\n\n// FindLongestString will retrieve a string like a SHA1, MD5 or whatever\n// and return the longest string (first one)\nfunc FindLongestString(str string) string {\n\tvar re = regexp.MustCompile(\"[a-zA-Z]+\")\n\tvar values = re.FindAll([]byte(str), -1)\n\n\treturn string(findLongest(values))\n}\n\n// FindLongestInteger will retrieve a string like a SHA1, MD5 or whatever\n// and return longest integer (first one)\nfunc FindLongestInteger(str string) (int64, error) {\n\tvar re = regexp.MustCompile(\"[0-9]+\")\n\tvar values = re.FindAll([]byte(str), -1)\n\tvar max = findLongest(values)\n\n\tvar a, err = strconv.Atoi(string(max))\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn int64(a), nil\n}\n\nfunc findLongest(values [][]byte) []byte {\n\tvar max []byte\n\tfor _, value := range values {\n\t\tif len(value) > len(max) {\n\t\t\tmax = value\n\t\t}\n\t}\n\treturn max\n}"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/coinbase-api/"
            ],
            "uid": [
              "https://defer.cc/coinbase-api/"
            ],
            "published": [
              "2022-02-16 10:11:00"
            ],
            "content": [
              {
                "html": "<p>I created a new package today to retrieve the current price for an crypto currency from <a href=\"https://coinbase.com/\">Coinbase</a>.</p>\n<p>I used this in another project and thought it will make sense to publish this as an own package.\nFor this, you don’t need a <a href=\"https://coinbase.com/\">Coinbase</a> account or something.</p>\n<p>You can find the package on <a href=\"https://github.com/mnlwldr/coinbase\">GitHub</a> and on <a href=\"https://pkg.go.dev/github.com/mnlwldr/coinbase\">pkg.go.dev</a>.</p>\n<p><a href=\"https://pkg.go.dev/github.com/mnlwldr/coinbase\"><img src=\"https://pkg.go.dev/badge/github.com/mnlwldr/coinbase.svg\" alt=\"Go Reference\"></a></p>",
                "value": "I created a new package today to retrieve the current price for an crypto currency from Coinbase.I used this in another project and thought it will make sense to publish this as an own package.\nFor this, you don’t need a Coinbase account or something.You can find the package on GitHub and on pkg.go.dev. Go Reference"
              }
            ],
            "name": [
              "I created a new package today to retrieve the current price for an crypto currency from Coinbase.I used this in another project and thought it will make sense to publish this as an own package.\nFor this, you don’t need a Coinbase account or something.You can find the package on GitHub and on pkg.go.dev. Go Reference"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/payone/"
            ],
            "uid": [
              "https://defer.cc/payone/"
            ],
            "published": [
              "2022-02-14 10:20:00"
            ],
            "content": [
              {
                "html": "<p>I created a new package today to create a <a href=\"https://www.payone.com/\">Payone</a> request.</p>\n<p>You can find the package on <a href=\"https://github.com/mnlwldr/payone\">GitHub</a> and on <a href=\"https://pkg.go.dev/github.com/mnlwldr/payone\">pkg.on.dev</a>.^:s</p>\n<p><a href=\"https://pkg.go.dev/github.com/mnlwldr/payone\"><img src=\"https://pkg.go.dev/badge/github.com/mnlwldr/payone.svg\" alt=\"Go Reference\"></a></p>",
                "value": "I created a new package today to create a Payone request.You can find the package on GitHub and on pkg.on.dev.^:s Go Reference"
              }
            ],
            "name": [
              "I created a new package today to create a Payone request.You can find the package on GitHub and on pkg.on.dev.^:s Go Reference"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://defer.cc/rsstohtml/"
            ],
            "uid": [
              "https://defer.cc/rsstohtml/"
            ],
            "published": [
              "2022-02-04 10:20:00"
            ],
            "content": [
              {
                "html": "<p>I build a tool today to generate a HTML page from several RSS feeds.\nInspired by <a href=\"https://engineeringblogs.xyz/\">engineeringblogs.xyz</a> (<a href=\"https://github.com/peterc/engblogs\">GitHub</a>).</p>\n<p><kbd>go run Reader.go example-urls &gt; example-output.html</kbd></p>\n<p>The generated HTML page will lool like <a href=\"https://htmlpreview.github.io/?https://github.com/mnlwldr/rss-reader/blob/main/example-output.html\">this</a>. You can find the code <a href=\"https://github.com/mnlwldr/rss-feeds-to-html/\">on GitHub</a>.</p>",
                "value": "I build a tool today to generate a HTML page from several RSS feeds.\nInspired by engineeringblogs.xyz (GitHub).go run Reader.go example-urls > example-output.htmlThe generated HTML page will lool like this. You can find the code on GitHub."
              }
            ],
            "name": [
              "I build a tool today to generate a HTML page from several RSS feeds.\nInspired by engineeringblogs.xyz (GitHub).go run Reader.go example-urls > example-output.htmlThe generated HTML page will lool like this. You can find the code on GitHub."
            ]
          }
        }
      ]
    }
  ],
  "rels": {
    "authorization_endpoint": [
      "https://indieauth.com/auth"
    ],
    "webmention": [
      "https://webmention.io/defer.cc/webmention"
    ],
    "pingback": [
      "https://webmention.io/defer.cc/xmlrpc"
    ],
    "me": [
      "https://twitter.com/mnlwldr",
      "https://github.com/mnlwldr",
      "mailto:mnlwldr@gmail.com",
      "https://defer.cc/"
    ],
    "canonical": [
      "https://defer.cc/"
    ],
    "alternate": [
      "https://defer.cc/atom.xml"
    ]
  },
  "rel-urls": {
    "https://indieauth.com/auth": {
      "rels": [
        "authorization_endpoint"
      ]
    },
    "https://webmention.io/defer.cc/webmention": {
      "rels": [
        "webmention"
      ]
    },
    "https://webmention.io/defer.cc/xmlrpc": {
      "rels": [
        "pingback"
      ]
    },
    "https://twitter.com/mnlwldr": {
      "rels": [
        "me"
      ]
    },
    "https://github.com/mnlwldr": {
      "rels": [
        "me"
      ]
    },
    "mailto:mnlwldr@gmail.com": {
      "rels": [
        "me"
      ]
    },
    "https://defer.cc/": {
      "rels": [
        "canonical"
      ]
    },
    "https://defer.cc/atom.xml": {
      "rels": [
        "alternate"
      ],
      "title": "notes from mnlwldr",
      "type": "application/rss+xml"
    }
  }
}