{
  "items": [
    {
      "type": [
        "h-card"
      ],
      "properties": {
        "photo": [
          "https://seblog.nl/photo.jpg"
        ],
        "name": [
          "Sebastiaan Andeweg"
        ],
        "url": [
          "https://seblog.nl/"
        ]
      }
    },
    {
      "type": [
        "h-feed"
      ],
      "properties": {
        "name": [
          "Seblog.nl"
        ],
        "url": [
          "https://seblog.nl/"
        ],
        "author": [
          "https://seblog.nl/"
        ]
      },
      "id": "main",
      "children": [
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "content": [
              {
                "html": "<p>In mijn <a href=\"https://seblog.nl/2022/11/05/3/poging-tot-mastodon\">post van vorig weekend</a> wilde ik niet toegeven dat de requests die Mastdon naar mijn inbox stuurde helemaal niet door mijn eigen verificatie-code heen kwamen.</p>\n<p>Het stappenplan is als volgt: Mastodon stuurt een bericht naar mijn inbox, stuurt daarbij een HTTP-header met daarin een <code>keyId</code>, een <code>signature</code> en een lijstje aan namen van headers. Ik moet dan de waardes van de HTTP-headers bij de namen zoeken, de <code>keyId</code> ophalen (dit is een URL) en dan verifiëren of de signature van de headers inderdaad ondertekend is met de public key uit de <code>keyId</code>. Omdat het cryptografie is gaf de functie alleen maar <code>false</code> terug, zonder enige verder info.</p>\n<p>Na heel veel zoeken bleek dat in elk geval de deletes een simpele verklaring hadden: zodra de Actor is verwijderd is ook de public key weg, en dus valt er niets te verifyen. Dat is geen bug, <a href=\"https://github.com/mastodon/mastodon/issues/10286\">zeggen ze</a>. Ik negeer nu lekker alle Actor-deletes want ik haal toch geen profielen op. Follows en Follow-Undo's die ik als test bleef doen bleven wel falen.</p>\n<p>Na letterlijk uren te hebben doorgebracht met specs zoeken en code lezen uit <a href=\"https://pixelfed.org/\">Pixelfed</a> (PHP Laravel) en <a href=\"https://pleroma.social/\">Pleroma</a> (Elixir), bleef ik er toch echt van overtuigd dat ik alles goed berekende, aan elkaar knoopte, ophaalde, alles. Heel frustrerend.</p>\n<p>Maar, wat bleek: de <code>(request-target)</code> vulde ik aan als <code>(request-target) /inbox</code>, terwijl ik mijn inbox op <code>/activitypub/inbox</code> had neergezet. De andere implementaties plakten die path dynamisch op uit de Request/conn. Daar ging 6 uur waarin ik al heel veel verder kon zijn geweest met Activitypub. Maar goed, volgend weekend weer een weekend.</p>",
                "value": "In mijn post van vorig weekend wilde ik niet toegeven dat de requests die Mastdon naar mijn inbox stuurde helemaal niet door mijn eigen verificatie-code heen kwamen.\nHet stappenplan is als volgt: Mastodon stuurt een bericht naar mijn inbox, stuurt daarbij een HTTP-header met daarin een keyId, een signature en een lijstje aan namen van headers. Ik moet dan de waardes van de HTTP-headers bij de namen zoeken, de keyId ophalen (dit is een URL) en dan verifiëren of de signature van de headers inderdaad ondertekend is met de public key uit de keyId. Omdat het cryptografie is gaf de functie alleen maar false terug, zonder enige verder info.\nNa heel veel zoeken bleek dat in elk geval de deletes een simpele verklaring hadden: zodra de Actor is verwijderd is ook de public key weg, en dus valt er niets te verifyen. Dat is geen bug, zeggen ze. Ik negeer nu lekker alle Actor-deletes want ik haal toch geen profielen op. Follows en Follow-Undo's die ik als test bleef doen bleven wel falen.\nNa letterlijk uren te hebben doorgebracht met specs zoeken en code lezen uit Pixelfed (PHP Laravel) en Pleroma (Elixir), bleef ik er toch echt van overtuigd dat ik alles goed berekende, aan elkaar knoopte, ophaalde, alles. Heel frustrerend.\nMaar, wat bleek: de (request-target) vulde ik aan als (request-target) /inbox, terwijl ik mijn inbox op /activitypub/inbox had neergezet. De andere implementaties plakten die path dynamisch op uit de Request/conn. Daar ging 6 uur waarin ik al heel veel verder kon zijn geweest met Activitypub. Maar goed, volgend weekend weer een weekend."
              }
            ],
            "url": [
              "https://seblog.nl/2022/11/13/1/mastodon-debuggen"
            ],
            "published": [
              "2022-11-13T21:27:24+0000"
            ],
            "updated": [
              "2022-11-13T21:27:24+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/317/1"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "mastodon",
              "activitypub"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Muis"
            ],
            "content": [
              {
                "html": "<p>In de traditie van bloggen over <a href=\"https://seblog.nl/2016/11/27/1/beesten-op-je-kamer\">beesten in mijn kamer</a>, <a href=\"https://seblog.nl/2011/08/06/2/de-wesp\">door de jaren heen</a>, hier een nieuwe aflevering: ik had een muis.</p>\n<p>Ik hoorde mijn buren al eens smoezen dat er muizen waren. O jee, dacht ik, daar heb ik dus hélemaal geen zin in. Ik negeerde het een beetje omdat ik zelf nergens last van had. Mijn bovenbuurman ging flink aan het schrobben, kon ik horen.</p>\n<p>Op een dag kwam ik thuis en zag ik het snoer van mijn staafmixer half uit het keukenkastje hangen. Dat is gek, dacht ik nog, dat zou ik toch nooit zo laten hangen, ik werk vast veel te hard. (Ja.)</p>\n<p>Een avond later die week was ik dus weer veel te hard aan het werk tot veel te laat, toen ik opeens iets bij de deur van mijn kantoor zag bewegen. Ik schrok daar een beetje van, maar het schrok ook van mij, en ging er in een dolle vaart vandoor.</p>\n<p>Dit was het moment dat ik de connectie naar het keukenkastje maakte: in dat kastje zit achterin een gat naar een stopcontact, voor mijn elektrische fornuis. Toen ik het beter inspecteerde zag ik er inderdaad wat zaagsel liggen, alsof er iemand door dat gat naar binnen was gekomen.</p>\n<p>Het punt van het keukenkastje is echter: zodra die dicht is gevallen, kan je als muis in elk geval niet zo makkelijk meer naar buiten via diezelfde weg. En verder zijn hier niet zo veel gaten in de muur, wat waarschijnlijk bijdroeg aan het feit dat ik het muizenprobleem tot nu toe kon negeren.</p>\n<p>In die week verdween er inderdaad een hagelslagje dat ik zorgvuldig op een vlek in de vloer had gelegd: de muis was er nog steeds. Toch negeerde ik het nog wat verder, tot ik op een zekere nacht wakker werd van gekraak en geknaag.</p>\n<p>Na wat gordijnen op zij te hebben getrokken zag ik hem: de muis zat ín mijn slaapkamer. Dit was vorige week zondag. Wat volgde was een halve nacht op de bank (ben ik veel te lang voor), diverse opruimacties om de muis te vinden, slapen op een luchtbed in een andere kamer, en vooral: de deur dicht houden.</p>\n<p>Woensdag kwam de DAR langs, en die hebben ons alles uitgelegd over muizen. 'Als er een potlood in kan kan er een muis door.' Ik met grote ogen. 'Als een potlood past, past een muis,' bleef de muizenman stellig. Zo liepen we een rondje rond het huis en vonden we inderdaad veel gaten.</p>\n<p>Ik had dingen te doen in de randstad, dus ik heb mijn spullen gepakt en ben een paar dagen bij mijn ouders gaan logeren. Op de kamer stond een val. Nu ik net thuis ben vond ik daar de muis in. Ik moet toegeven dat ik daar dan weer even bijna van moest huilen: het arme beest, moest hij nou echt dood voor mij?</p>\n<p>De muis is opgeruimd, de gaten zijn dicht, er ligt gif in de kruipruimte, het lijkt de goede kant op te gaan. Maar zielig is het wel.</p>",
                "value": "In de traditie van bloggen over beesten in mijn kamer, door de jaren heen, hier een nieuwe aflevering: ik had een muis.\nIk hoorde mijn buren al eens smoezen dat er muizen waren. O jee, dacht ik, daar heb ik dus hélemaal geen zin in. Ik negeerde het een beetje omdat ik zelf nergens last van had. Mijn bovenbuurman ging flink aan het schrobben, kon ik horen.\nOp een dag kwam ik thuis en zag ik het snoer van mijn staafmixer half uit het keukenkastje hangen. Dat is gek, dacht ik nog, dat zou ik toch nooit zo laten hangen, ik werk vast veel te hard. (Ja.)\nEen avond later die week was ik dus weer veel te hard aan het werk tot veel te laat, toen ik opeens iets bij de deur van mijn kantoor zag bewegen. Ik schrok daar een beetje van, maar het schrok ook van mij, en ging er in een dolle vaart vandoor.\nDit was het moment dat ik de connectie naar het keukenkastje maakte: in dat kastje zit achterin een gat naar een stopcontact, voor mijn elektrische fornuis. Toen ik het beter inspecteerde zag ik er inderdaad wat zaagsel liggen, alsof er iemand door dat gat naar binnen was gekomen.\nHet punt van het keukenkastje is echter: zodra die dicht is gevallen, kan je als muis in elk geval niet zo makkelijk meer naar buiten via diezelfde weg. En verder zijn hier niet zo veel gaten in de muur, wat waarschijnlijk bijdroeg aan het feit dat ik het muizenprobleem tot nu toe kon negeren.\nIn die week verdween er inderdaad een hagelslagje dat ik zorgvuldig op een vlek in de vloer had gelegd: de muis was er nog steeds. Toch negeerde ik het nog wat verder, tot ik op een zekere nacht wakker werd van gekraak en geknaag.\nNa wat gordijnen op zij te hebben getrokken zag ik hem: de muis zat ín mijn slaapkamer. Dit was vorige week zondag. Wat volgde was een halve nacht op de bank (ben ik veel te lang voor), diverse opruimacties om de muis te vinden, slapen op een luchtbed in een andere kamer, en vooral: de deur dicht houden.\nWoensdag kwam de DAR langs, en die hebben ons alles uitgelegd over muizen. 'Als er een potlood in kan kan er een muis door.' Ik met grote ogen. 'Als een potlood past, past een muis,' bleef de muizenman stellig. Zo liepen we een rondje rond het huis en vonden we inderdaad veel gaten.\nIk had dingen te doen in de randstad, dus ik heb mijn spullen gepakt en ben een paar dagen bij mijn ouders gaan logeren. Op de kamer stond een val. Nu ik net thuis ben vond ik daar de muis in. Ik moet toegeven dat ik daar dan weer even bijna van moest huilen: het arme beest, moest hij nou echt dood voor mij?\nDe muis is opgeruimd, de gaten zijn dicht, er ligt gif in de kruipruimte, het lijkt de goede kant op te gaan. Maar zielig is het wel."
              }
            ],
            "url": [
              "https://seblog.nl/2022/11/12/2/muis"
            ],
            "published": [
              "2022-11-12T22:09:13+0000"
            ],
            "updated": [
              "2022-11-12T22:09:13+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/316/2"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "muis"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Slome Mastodon"
            ],
            "content": [
              {
                "html": "<p>Mastodon is nog steeds een hot-topic op mijn Mastodon- en feedreader-tijdlijn. Zo kwam ik <a href=\"https://ar.al/2022/11/09/is-the-fediverse-about-to-get-fryed-or-why-every-toot-is-also-a-potential-denial-of-service-attack/\">dit artikel</a> van Aral tegen waarin hij uitlegt hoe een beetje populair zijn (22.000 volgers op 3000 servers) en een beetje actief posten en reacties uitlokken al snel kan leiden tot een enorme queue en dus vastzittende instances.</p>\n<p>Zijn oplossing: populaire mensen moeten hun eigen server draaien. Ergens is daar wat voor te zeggen, op Twitter waren het ook de populaire mensen die het meeste geld kosten (en opleverden waarschijnlijk maar soit). Het is logisch dat als jij veel interactie hebt, computers daar dus harder voor moeten werken, en dat je dan misschien wat meer moet betalen aan je Mastodon-host.</p>\n<p>Maar los van dat computers draaien geld kost, kosten computers ook stroom en dus naar alle waarschijnlijkheid CO². Een beetje minder daarvan zou best fijn zijn, en dit is in mijn optiek wel een beetje een tekortkoming van Activitypub (te actief) en Mastodon (gekke technische keuzes).</p>\n<p>Toen Twitter begon bouwden ze het platform op Ruby on Rails, een framework bekend om het gemak waarmee je een nieuwe applicatie kan opzetten, maar niet om z'n snelheid. Twitter liep echter tegen de grenzen aan van die architectuur, met veel plaatjes van een door vogels opgetilde walvis als het weer mis ging. In <a href=\"https://blog.twitter.com/engineering/en_us/a/2011/twitter-search-is-now-3x-faster\"></a> stapten ze over naar een andere architectuur en kwam er eindelijk een eind aan de 'fail whale'.</p>\n<p>In 2016 deed Gargron de eerste commit voor Mastodon. Het zette een lege Ruby on Rails applicatie neer, die later uitgroeide tot de Mastodon die we nu hebben. Als het Twitter niet lukte ermee te schalen, heb ik ook vraagtekens of Mastodon het wel kan.</p>\n<p>Maar daarnaast ook Activitypub nogal onnodig werk: op moment van schrijven heb ik drie features van het protocol geïmplementeerd op dit weblog (webfinger, de actor, de inbox) en één keer mijn 'profiel' bezocht via Mastodon.social. Sindsdien heb ik 1507 berichten ontvangen over verwijderde gebruikers. 1507 berichten, alleen omdat iemand anders (oké ik zelf) mijn profiel bezocht. (Ik begon vanochtend al met schrijven aan deze post, maar inmiddels zie ik dat Aaron <a href=\"https://aaronparecki.com/2022/11/11/51/activitypub\">nog meer</a> deletes heeft ontvangen. Oeps.)</p>\n<p>Ik ben een voorstander van 'eerst gebruiken dan pas de protocollen', en aangezien we nu Activitypub gebruiken is dat een beter protocol dan elke nieuwe die we verzinnen zonder actieve gebruikers, maar ergens hoop ik wel dat we dit nog kunnen fixen.</p>",
                "value": "Mastodon is nog steeds een hot-topic op mijn Mastodon- en feedreader-tijdlijn. Zo kwam ik dit artikel van Aral tegen waarin hij uitlegt hoe een beetje populair zijn (22.000 volgers op 3000 servers) en een beetje actief posten en reacties uitlokken al snel kan leiden tot een enorme queue en dus vastzittende instances.\nZijn oplossing: populaire mensen moeten hun eigen server draaien. Ergens is daar wat voor te zeggen, op Twitter waren het ook de populaire mensen die het meeste geld kosten (en opleverden waarschijnlijk maar soit). Het is logisch dat als jij veel interactie hebt, computers daar dus harder voor moeten werken, en dat je dan misschien wat meer moet betalen aan je Mastodon-host.\nMaar los van dat computers draaien geld kost, kosten computers ook stroom en dus naar alle waarschijnlijkheid CO². Een beetje minder daarvan zou best fijn zijn, en dit is in mijn optiek wel een beetje een tekortkoming van Activitypub (te actief) en Mastodon (gekke technische keuzes).\nToen Twitter begon bouwden ze het platform op Ruby on Rails, een framework bekend om het gemak waarmee je een nieuwe applicatie kan opzetten, maar niet om z'n snelheid. Twitter liep echter tegen de grenzen aan van die architectuur, met veel plaatjes van een door vogels opgetilde walvis als het weer mis ging. In  stapten ze over naar een andere architectuur en kwam er eindelijk een eind aan de 'fail whale'.\nIn 2016 deed Gargron de eerste commit voor Mastodon. Het zette een lege Ruby on Rails applicatie neer, die later uitgroeide tot de Mastodon die we nu hebben. Als het Twitter niet lukte ermee te schalen, heb ik ook vraagtekens of Mastodon het wel kan.\nMaar daarnaast ook Activitypub nogal onnodig werk: op moment van schrijven heb ik drie features van het protocol geïmplementeerd op dit weblog (webfinger, de actor, de inbox) en één keer mijn 'profiel' bezocht via Mastodon.social. Sindsdien heb ik 1507 berichten ontvangen over verwijderde gebruikers. 1507 berichten, alleen omdat iemand anders (oké ik zelf) mijn profiel bezocht. (Ik begon vanochtend al met schrijven aan deze post, maar inmiddels zie ik dat Aaron nog meer deletes heeft ontvangen. Oeps.)\nIk ben een voorstander van 'eerst gebruiken dan pas de protocollen', en aangezien we nu Activitypub gebruiken is dat een beter protocol dan elke nieuwe die we verzinnen zonder actieve gebruikers, maar ergens hoop ik wel dat we dit nog kunnen fixen."
              }
            ],
            "url": [
              "https://seblog.nl/2022/11/11/1/slome-mastodon"
            ],
            "published": [
              "2022-11-11T22:50:31+0000"
            ],
            "updated": [
              "2022-11-11T22:50:31+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/315/1"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "mastodon"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "content": [
              {
                "html": "<p>Sinds ik van <a href=\"https://hacdias.com/\">Henrique</a> een account heb gekregen op zijn Miniflux RSS-reader ben ik weer wat fanatieker aan het lezen en bloggen. Henrique moedigt mij steeds aan om ergens over te bloggen, en ik hem ook. In mijn geval gaat dat natuurlijk nergens over, maar hij komt met uitgebreide analyses van <a href=\"https://hacdias.com/2022/11/04/trying-out-ovpay\">onze nieuwe OV-chipkaart, OVPay</a>, en <a href=\"https://hacdias.com/2022/11/08/issues-with-digid-as-foreigner\">problemen met DigiD</a> waar hij als Portugees in Nederland tegenaan loopt. Volg en lees.</p>",
                "value": "Sinds ik van Henrique een account heb gekregen op zijn Miniflux RSS-reader ben ik weer wat fanatieker aan het lezen en bloggen. Henrique moedigt mij steeds aan om ergens over te bloggen, en ik hem ook. In mijn geval gaat dat natuurlijk nergens over, maar hij komt met uitgebreide analyses van onze nieuwe OV-chipkaart, OVPay, en problemen met DigiD waar hij als Portugees in Nederland tegenaan loopt. Volg en lees."
              }
            ],
            "url": [
              "https://seblog.nl/2022/11/09/1/volg-henrique"
            ],
            "published": [
              "2022-11-09T07:34:40+0000"
            ],
            "updated": [
              "2022-11-09T07:34:40+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/313/1"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "#blogroll"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://seblog.nl/2022/11/06/4/like",
              "https://seblog.nl/2022/11/06/4/like"
            ],
            "content": [
              "Seb vindt dit leuk."
            ],
            "name": [
              "Seb vindt dit leuk."
            ],
            "like-of": [
              "https://simonwillison.net/2022/Nov/6/what-to-blog-about/"
            ],
            "published": [
              "2022-11-06T19:03:32+0000"
            ],
            "updated": [
              "2022-11-06T19:03:32+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/310/4"
            ],
            "author": [
              "https://seblog.nl/"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Poging tot Mastodon"
            ],
            "content": [
              {
                "html": "<p>In navolging van velen sinds het aantreden van de nieuwe Oppervogelman ben ik vandaag bezig geweest met 'overstappen' naar Mastodon. In mijn geval betekende dat het opsnorren van mijn oude account, en een zoektocht naar de vraag: hoe werkt dat eigenlijk, Activitypub?</p>\n<p>Als achtergrond: Mastodon's mogelijkheid om over meerdere servers heen met elkaar te kunnen praten is niet beperkt tot alleen servers die Mastodon-software draaien. Het is gebouwd op een open standaard die Activitypub heet. Ik heb vandaag een poging gedaan om die een beetje beter te begrijpen.</p>\n<p>De volledige uitleg ga ik hier niet geven, want ik ben er ook maar pas net ingedoken. Maar interessante artikelen zijn <a href=\"https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/\">deze van Eugen Rochko</a>, de maker van Mastodon, en ook de <a href=\"https://blog.joinmastodon.org/2018/07/how-to-make-friends-and-verify-requests/\">followup ervan</a>. Eugen legt hierin uit hoe je met wat statische bestanden en een beetje Ruby een paar Activitypub-dingen kan doen.</p>\n<p>Een van die dingen heb ik toegepast: je kan dit domein nu webfingeren (jaja) en daarmee kan je mijn Activitypub Actor vinden, die weer leidt tot een Activitypub Inbox. Op het moment van schrijven is het er allemaal wel, maar ik beloof niets voor de toekomst, want ik ben er nog niet helemaal over uit of ik dit echt wil.</p>\n<p>Het gevolg van het bovenstaande is dat je nu op <code>@seb@seblog.nl</code> kan zoeken in je favoriete Mastodon-instance, en dat je mij daar dan ziet verschijnen. Je kan daar naar alle waarschijnlijkheid ook op 'Follow' drukken en daar krijg ik dan een melding over. Vervolgens doe ik daar helemaal niets mee, want zo ver ben ik gewoon nog niet.</p>\n<p>Ik heb veel horrorverhalen gehoord over Activitypub en ik moet zeggen dat ze deels waar zijn: het is inderdaad behoorlijk veel gedoe allemaal. Om een bericht te accepteren moet je dingen doen met public en private keys, waarvan ik nog steeds denk dat ik het niet helemaal goed doe.</p>\n<p>Bovendien ontvang ik sinds ik mijn naam bij Mastodon.social heb ingevoerd allerhande berichten over verwijderde gebruikers. Ik heb nooit om een lijst van alle gebruikers gevraagd, dus ik ben ook niet per se geïnteresseerd in elke verwijderde gebruiker, maar ik ontvang er nu wel bericht over. Ik hoop niet dat elke server in de Fediverse dit gaat doen, want dan ben ik er wel snel klaar mee.</p>\n<p>Misschien dat ik morgen nog wat dieper duik, maar zoals gezegd beloof ik niets en verwijder ik de functionaliteit misschien zelfs wel. Het idee is alleen zo vet: met zo veel meer mensen in contact staan via een dergelijk protocol.</p>\n<p>Wat verder ook niet onvermeld moet blijven is <a href=\"https://tinysubversions.com/notes/reading-activitypub/\">deze geweldige post</a> over hoe je de verschillende Activitypub specs zou moeten lezen, in welke volgorde en hoe de boel zich tot elkaar verhoudt. Maar dat dus misschien voor morgen. Tot toots.</p>",
                "value": "In navolging van velen sinds het aantreden van de nieuwe Oppervogelman ben ik vandaag bezig geweest met 'overstappen' naar Mastodon. In mijn geval betekende dat het opsnorren van mijn oude account, en een zoektocht naar de vraag: hoe werkt dat eigenlijk, Activitypub?\nAls achtergrond: Mastodon's mogelijkheid om over meerdere servers heen met elkaar te kunnen praten is niet beperkt tot alleen servers die Mastodon-software draaien. Het is gebouwd op een open standaard die Activitypub heet. Ik heb vandaag een poging gedaan om die een beetje beter te begrijpen.\nDe volledige uitleg ga ik hier niet geven, want ik ben er ook maar pas net ingedoken. Maar interessante artikelen zijn deze van Eugen Rochko, de maker van Mastodon, en ook de followup ervan. Eugen legt hierin uit hoe je met wat statische bestanden en een beetje Ruby een paar Activitypub-dingen kan doen.\nEen van die dingen heb ik toegepast: je kan dit domein nu webfingeren (jaja) en daarmee kan je mijn Activitypub Actor vinden, die weer leidt tot een Activitypub Inbox. Op het moment van schrijven is het er allemaal wel, maar ik beloof niets voor de toekomst, want ik ben er nog niet helemaal over uit of ik dit echt wil.\nHet gevolg van het bovenstaande is dat je nu op @seb@seblog.nl kan zoeken in je favoriete Mastodon-instance, en dat je mij daar dan ziet verschijnen. Je kan daar naar alle waarschijnlijkheid ook op 'Follow' drukken en daar krijg ik dan een melding over. Vervolgens doe ik daar helemaal niets mee, want zo ver ben ik gewoon nog niet.\nIk heb veel horrorverhalen gehoord over Activitypub en ik moet zeggen dat ze deels waar zijn: het is inderdaad behoorlijk veel gedoe allemaal. Om een bericht te accepteren moet je dingen doen met public en private keys, waarvan ik nog steeds denk dat ik het niet helemaal goed doe.\nBovendien ontvang ik sinds ik mijn naam bij Mastodon.social heb ingevoerd allerhande berichten over verwijderde gebruikers. Ik heb nooit om een lijst van alle gebruikers gevraagd, dus ik ben ook niet per se geïnteresseerd in elke verwijderde gebruiker, maar ik ontvang er nu wel bericht over. Ik hoop niet dat elke server in de Fediverse dit gaat doen, want dan ben ik er wel snel klaar mee.\nMisschien dat ik morgen nog wat dieper duik, maar zoals gezegd beloof ik niets en verwijder ik de functionaliteit misschien zelfs wel. Het idee is alleen zo vet: met zo veel meer mensen in contact staan via een dergelijk protocol.\nWat verder ook niet onvermeld moet blijven is deze geweldige post over hoe je de verschillende Activitypub specs zou moeten lezen, in welke volgorde en hoe de boel zich tot elkaar verhoudt. Maar dat dus misschien voor morgen. Tot toots."
              }
            ],
            "url": [
              "https://seblog.nl/2022/11/05/3/poging-tot-mastodon"
            ],
            "published": [
              "2022-11-05T20:13:38+0000"
            ],
            "updated": [
              "2022-11-05T20:13:38+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/309/3"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "mastodon",
              "activitypub"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "content": [
              {
                "html": "<p>Ik heb uitgevonden dat ik nog een account op Mastodon had liggen uit 2016. Op dit moment accepteert die instance (Mastodon.social) geen nieuwe gebruikers meer, mede om decentralisatie te promoten, maar misschien ook om de load op de server beheersbaar te houden.</p>\n<p>Die instance heeft dan wel een interessant extra 'probleem': als er veel mensen al een account hadden kunnen ze die allemaal activeren, om zo de server het alsnog zwaar te laten hebben. Een Mastodon zombie apocalyps.</p>",
                "value": "Ik heb uitgevonden dat ik nog een account op Mastodon had liggen uit 2016. Op dit moment accepteert die instance (Mastodon.social) geen nieuwe gebruikers meer, mede om decentralisatie te promoten, maar misschien ook om de load op de server beheersbaar te houden.\nDie instance heeft dan wel een interessant extra 'probleem': als er veel mensen al een account hadden kunnen ze die allemaal activeren, om zo de server het alsnog zwaar te laten hebben. Een Mastodon zombie apocalyps."
              }
            ],
            "url": [
              "https://seblog.nl/2022/11/05/2/mastodon-zombie-apocalyps"
            ],
            "published": [
              "2022-11-05T11:40:15+0000"
            ],
            "updated": [
              "2022-11-05T11:41:47+0000"
            ],
            "syndication": [
              "https://mastodon.social/@sebsel/109291009471049235"
            ],
            "uid": [
              "https://seblog.nl/2022/309/2"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "mastodon"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://seblog.nl/2022/11/05/1/like",
              "https://seblog.nl/2022/11/05/1/like"
            ],
            "content": [
              "Seb vindt Trying Out OVPay With Hermes and HTM van Henrique Dias leuk."
            ],
            "name": [
              "Seb vindt Trying Out OVPay With Hermes and HTM van Henrique Dias leuk."
            ],
            "like-of": [
              "https://hacdias.com/2022/11/04/trying-out-ovpay"
            ],
            "published": [
              "2022-11-05T09:16:05+0000"
            ],
            "updated": [
              "2022-11-05T09:16:05+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/309/1"
            ],
            "author": [
              "https://seblog.nl/"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "content": [
              {
                "html": "<p>Ik heb het een tijdje volgehouden, maar vandaag is het zo ver: ik heb de lader van mijn Apple Watch niet bij me, maar hij is wel leeg. Sinds 16 september heb ik de Series 8 en die draag ik nu ook 's nachts, maar dat betekent dat ik ergens op de dag moet bijladen. Wel 7 hele weken goed gegaan, maar vandaag dus niet.</p>",
                "value": "Ik heb het een tijdje volgehouden, maar vandaag is het zo ver: ik heb de lader van mijn Apple Watch niet bij me, maar hij is wel leeg. Sinds 16 september heb ik de Series 8 en die draag ik nu ook 's nachts, maar dat betekent dat ik ergens op de dag moet bijladen. Wel 7 hele weken goed gegaan, maar vandaag dus niet."
              }
            ],
            "url": [
              "https://seblog.nl/2022/11/04/2/watch-leeg"
            ],
            "published": [
              "2022-11-04T08:30:22+0000"
            ],
            "updated": [
              "2022-11-04T08:30:22+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/308/2"
            ],
            "author": [
              "https://seblog.nl/"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "content": [
              {
                "html": "<p>DHH, met veel gebliepte scheldwoorden: huur je server niet maar, maar koop ze. De cloud is tegenwoordig even complex als het is om je eigen servers te beheren.</p>\n<div><a href=\"https://changelog.com/shipit/77\" class=\"card h-cite\"><div class=\"url\">changelog.com/shipit/77</div></a></div>",
                "value": "DHH, met veel gebliepte scheldwoorden: huur je server niet maar, maar koop ze. De cloud is tegenwoordig even complex als het is om je eigen servers te beheren.\nchangelog.com/shipit/77"
              }
            ],
            "url": [
              "https://seblog.nl/2022/11/04/1/ship-it"
            ],
            "published": [
              "2022-11-04T08:26:07+0000"
            ],
            "updated": [
              "2022-11-04T08:26:07+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/308/1"
            ],
            "author": [
              "https://seblog.nl/"
            ]
          },
          "children": [
            {
              "type": [
                "h-cite"
              ],
              "properties": {
                "name": [
                  "changelog.com/shipit/77"
                ],
                "url": [
                  "https://changelog.com/shipit/77"
                ]
              }
            }
          ]
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Terug naar de reader"
            ],
            "content": [
              {
                "html": "<p>De afgelopen jaren ben ik steeds minder actief op Twitter. Ik tel ongeveer 13 tweets dit jaar, 17 tussen nu en 1 november 2021. Ik heb altijd het idee dat ik in een leeg gat praat: de mensen die mij volgen zeggen niets terug en iedereen die ik zelf volg lijkt mij niet te volgen. Ik heb 480 volgers, maar mijn recente tweet kwam niet boven de 50 weergaven.</p>\n<p>Nu met de ontwikkelingen rond de nieuwe Oppervogelman vraag ik me af: moet ik wel welke dag zijn app openen en doorscrollen? Dus nu ben ik weer voor de zoveelste keer terug bij een RSS-reader, ditmaal een Miniflux, gehost en mij aangeboden door <a href=\"https://hacdias.com/\">Henrique</a>.</p>\n<p>Op moment van schrijven zit ik op 10 feeds, na dit weekend met 5 te zijn begonnen. Ik heb namelijk wel vaker feedreaders gebruikt, en altijd val ik in dezelfde val:</p>\n<ul>\n<li>ik gebruik geen feedreader</li>\n<li>ik neem er een, volg een paar mensen</li>\n<li>nog steeds erg leeg</li>\n<li>ik volg iedereen die ik maar kan verzinnen</li>\n<li>aaaaaaa</li>\n<li>ik gebruik geen feedreader</li>\n</ul>\n<p>Hoewel ik steeds weer tegen Twitter zeg dat ik geen algoritmische tijdlijn wil, wil ik een algoritmische tijdlijn, blijkt keer op keer opnieuw.</p>\n<p>Het grote voordeel van een feedreader is echter dat het me indirect aanmoedigt om meer te bloggen. Dit is waarschijnlijk vreemd: de meeste mensen gaan op Twitter omdat je daar makkelijker kan antwoorden. Omdat ik mezelf de regel heb gesteld dat alle antwoorden ook op dit blog moeten verschijnen heb ik reageren op Twitter zó moeilijk gemaakt dat ik het nooit doe.</p>\n<p>Enfin, we zien wel waar deze episode eindigt. <a href=\"https://seblog.nl/2020/04/20/2/veel-lezen\">De vorige</a> is alweer van 2020, zo blijkt. Wie erover schrijft kan terugvinden.</p>",
                "value": "De afgelopen jaren ben ik steeds minder actief op Twitter. Ik tel ongeveer 13 tweets dit jaar, 17 tussen nu en 1 november 2021. Ik heb altijd het idee dat ik in een leeg gat praat: de mensen die mij volgen zeggen niets terug en iedereen die ik zelf volg lijkt mij niet te volgen. Ik heb 480 volgers, maar mijn recente tweet kwam niet boven de 50 weergaven.\nNu met de ontwikkelingen rond de nieuwe Oppervogelman vraag ik me af: moet ik wel welke dag zijn app openen en doorscrollen? Dus nu ben ik weer voor de zoveelste keer terug bij een RSS-reader, ditmaal een Miniflux, gehost en mij aangeboden door Henrique.\nOp moment van schrijven zit ik op 10 feeds, na dit weekend met 5 te zijn begonnen. Ik heb namelijk wel vaker feedreaders gebruikt, en altijd val ik in dezelfde val:\n\nik gebruik geen feedreader\nik neem er een, volg een paar mensen\nnog steeds erg leeg\nik volg iedereen die ik maar kan verzinnen\naaaaaaa\nik gebruik geen feedreader\n\nHoewel ik steeds weer tegen Twitter zeg dat ik geen algoritmische tijdlijn wil, wil ik een algoritmische tijdlijn, blijkt keer op keer opnieuw.\nHet grote voordeel van een feedreader is echter dat het me indirect aanmoedigt om meer te bloggen. Dit is waarschijnlijk vreemd: de meeste mensen gaan op Twitter omdat je daar makkelijker kan antwoorden. Omdat ik mezelf de regel heb gesteld dat alle antwoorden ook op dit blog moeten verschijnen heb ik reageren op Twitter zó moeilijk gemaakt dat ik het nooit doe.\nEnfin, we zien wel waar deze episode eindigt. De vorige is alweer van 2020, zo blijkt. Wie erover schrijft kan terugvinden."
              }
            ],
            "url": [
              "https://seblog.nl/2022/11/01/1/terug-naar-de-reader"
            ],
            "published": [
              "2022-11-01T07:44:06+0000"
            ],
            "updated": [
              "2022-11-01T07:44:06+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/305/1"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "rss"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "content": [
              {
                "html": "<p><a href=\"https://www.zylstra.org/blog/2022/10/mister-anton/\">Ton</a> schrijft over verhaspelde namen omdat <a href=\"https://brainbaking.com/post/2022/10/name-pronunciation-and-spelling-mistakes/\">Wouter</a> erover begon.</p>\n<p>Zelf heb ik een naam waar veel Nederlanders graag een 'r' in plaatsen: Anderweg. Maar de mooiste was op de ov-chipkaart van mijn broertje: daar had de NS er 'Onderweg' van gemaakt, wat ook wel erg toepasselijk was.</p>",
                "value": "Ton schrijft over verhaspelde namen omdat Wouter erover begon.\nZelf heb ik een naam waar veel Nederlanders graag een 'r' in plaatsen: Anderweg. Maar de mooiste was op de ov-chipkaart van mijn broertje: daar had de NS er 'Onderweg' van gemaakt, wat ook wel erg toepasselijk was."
              }
            ],
            "url": [
              "https://seblog.nl/2022/10/30/2/verhaspelde-namen"
            ],
            "published": [
              "2022-10-30T10:13:55+0000"
            ],
            "updated": [
              "2022-10-30T10:13:55+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/303/2"
            ],
            "author": [
              "https://seblog.nl/"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "photo": [
              {
                "value": "https://seblog.nl/thumbs/2022/303/1/strava-map-957x957-blur.jpg",
                "alt": "strava-map-957x957-blur"
              }
            ],
            "content": [
              {
                "html": "<p>Voor oktober en november is de <a href=\"https://www.cifla.nl/uitslag-trailrunchallenge-september/\">trailrun challenge van AV Cifla</a> om Strava art te maken. Ik deed mee en maakte <a href=\"https://www.strava.com/activities/8040654139\">dit Melkmeisje van Vermeer</a>.</p>",
                "value": "Voor oktober en november is de trailrun challenge van AV Cifla om Strava art te maken. Ik deed mee en maakte dit Melkmeisje van Vermeer."
              }
            ],
            "url": [
              "https://seblog.nl/2022/10/30/1/melkmeisje"
            ],
            "published": [
              "2022-10-30T10:10:23+0000"
            ],
            "updated": [
              "2022-10-30T11:01:07+0000"
            ],
            "syndication": [
              "https://twitter.com/Sebsel/status/1586674298403622912"
            ],
            "uid": [
              "https://seblog.nl/2022/303/1"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "strava-art"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Using PHPStan to fill Vim's Quickfix list"
            ],
            "content": [
              {
                "html": "<p>I am using PHPStan and the <a href=\"https://github.com/w0rp/ale\">ALE plugin</a> to add some error checking to my Vim. It gives red arrows on lines that contain errors in my currently opened files. But sometimes, in a big refactor, I want to know all errors in my project.</p>\n<p>Vim has a build-in feature for this: the quickfix list. It is designed to take the error output of a compiler and lets you jump to all those locations with the <code>:cnext</code> and <code>:cprev</code> commands. I personally use the essential <a href=\"https://github.com/tpope/vim-unimpaired\">Unimpaired</a> plugin by the one and only tpope, which maps these to <code>]q</code> and <code>[q</code>.</p>\n<p>I use these a lot: the <code>:grep</code> command fills the quickfix list with all the occurrences of your search, like normal grep but with pagination (or, if you set your <code>grepprg</code> to something faster: like ripgrep with pagination).</p>\n<p>To get PHPStan to fill this quickfix list, I looked for plugins, but they all seemed hairy. I was convinced this should be simple, and it was. The following leader mapping seems to just work:</p>\n<pre><code class=\"language-vim\">nmap &lt;leader&gt;pa :cexpr system('vendor/bin/phpstan analyse --no-progress --error-format=raw')&lt;cr&gt;</code></pre>",
                "value": "I am using PHPStan and the ALE plugin to add some error checking to my Vim. It gives red arrows on lines that contain errors in my currently opened files. But sometimes, in a big refactor, I want to know all errors in my project.\nVim has a build-in feature for this: the quickfix list. It is designed to take the error output of a compiler and lets you jump to all those locations with the :cnext and :cprev commands. I personally use the essential Unimpaired plugin by the one and only tpope, which maps these to ]q and [q.\nI use these a lot: the :grep command fills the quickfix list with all the occurrences of your search, like normal grep but with pagination (or, if you set your grepprg to something faster: like ripgrep with pagination).\nTo get PHPStan to fill this quickfix list, I looked for plugins, but they all seemed hairy. I was convinced this should be simple, and it was. The following leader mapping seems to just work:\nnmap <leader>pa :cexpr system('vendor/bin/phpstan analyse --no-progress --error-format=raw')<cr>"
              }
            ],
            "url": [
              "https://seblog.nl/2022/10/28/1/phpstan-vim-quickfix-list"
            ],
            "published": [
              "2022-10-28T11:19:39+0000"
            ],
            "updated": [
              "2022-10-28T11:19:39+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/301/1"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "vim",
              "phpstan",
              "php"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Customising Git: some things I did"
            ],
            "content": [
              {
                "html": "<p>One thing that always puzzled me a bit about my own workflow, is that almost all of it is based in the terminal (I use Vim and Tmux), except for Git: where most people seem to use the Git CLI commands, I use a graphical program (<a href=\"https://git-fork.com/\">Fork</a>, which is quite good).</p>\n<p>Another thing then: I never used <a href=\"https://github.com/\">Github</a> professionally, apart from the time I was a self employed web developer, but back then I was the only developer on my projects. All my previous jobs had a self-hosted <a href=\"https://gitlab.com/\">Gitlab</a> running somewhere.</p>\n<p>Long story short: I am trying to get better at Git in the terminal and using Github. And 'better at Git' to me both means 'being able to confidently rebase' as well as 'customise my workflow'.</p>\n<h2>Aliases in the Gitconfig file</h2>\n<p>Customising Git means setting configuration in the <code>~/.gitconfig</code> file. This file contains settings for Git, like your name and email, but can also be used to add aliases. To create the first alias you can run <code>git config --global alias.co checkout</code>. After this, you can use <code>git co</code> as <code>git checkout</code>, which is shorter to type and yes I use this often now.</p>\n<p>Another alias I have is this one:</p>\n<pre><code>publish = !git push --set-upstream origin $(git symbolic-ref --short HEAD)</code></pre>\n<p>If you try to push a branch that has no linked branch on Github (the upstream), Git will complain about it. It will be nice to you and state the command you should have ran, but I got tired of having to copy and paste that new command.</p>\n<pre><code>fatal: The current branch feature/new-shoes has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin feature/new-shoes</code></pre>\n<p>In Fork, this was just a checkbox away. With my new <code>git publish</code> command I get the convenience again: it will push the branch and set the upstream with the same name as I have locally, exactly as Git suggested I should have done, but in less typing.</p>\n<h2>Links to Github</h2>\n<p>So far we have seen two kinds of aliases: one that just aliases a simple Git command (<code>b = branch</code>) and one that actually ran a shell command, because we started it with a <code>!</code> (note that you will have to start with <code>! git</code> there). But there is another way: having a command that starts with <code>git-</code> in your path.</p>\n<p>I have the following file as <code>~/bin/git-github</code>, marked as executable (<code>chmod +x ~/bin/git-github</code>) and in my path (<code>export PATH=\"$HOME/bin:$PATH\"</code> in my <code>~/.zshrc</code> file):</p>\n<pre><code>#!/bin/zsh\n\nlocal url\nurl=$(git remote get-url $(git remote))\nurl=$(echo $url | sed 's/.*github\\.com[:\\/]\\(.*\\).git$/https:\\/\\/github.com\\/\\1/')\n\nif [ -n \"$1\" ]; then\n  append=\"/$1/$(git symbolic-ref --short HEAD)\"\nfi\n\nopen -u \"$url$append\"</code></pre>\n<p>Yes, my ZSH is crude. Yes, I can better share this in Bash. Yes, it could've probably been on one line and be included as an alias in my Gitconfig. But it works for me.</p>\n<p>The command figures out the Github URL of the project, based on the URL of the remote (it assumes you have only one). It then opens that URL with the macOS <code>open</code> command. If an argument is given, it appends that to the URL, with the name of the branch too.</p>\n<p>In my Gitconfig I have two aliases that use this command:</p>\n<pre><code>pr = github pull/new\ncompare = github compare</code></pre>\n<p>With <code>git github</code>, my default browser will open a tab with the 'homepage' of the repository. With <code>git compare</code>, it will open a tab that contains a diff of the current branch and the default branch on Github (the remote versions of those). With <code>git pr</code>, the browser will open the correct page to open a for the current branch.</p>\n<h2>And you mentioned Vim and Tmux?</h2>\n<p>Yes, I actually use the obligatory Tim Pope plugin <a href=\"https://github.com/tpope/vim-fugitive\">Fugitive</a>. This means I can do a lot of things which you can also read about in the <a href=\"https://github.com/tpope/vim-fugitive/blob/master/doc/fugitive.txt\">help file</a>. (Which I read a lot these days.)</p>\n<p>But this allows me to stage and commit and rebase and reword all my changes in Vim, and then when I am ready, run <code>:G publish</code> and <code>:G pr</code> and make a PR for it on Github. These two commands alone make me feel so much more productive: no longer do I have to search for another program to compose commits and then search for the browser to handle the cooperative side of it... I just handle everything in my editor.</p>\n<p>For Tmux I have another nice addition: in my <code>~/.tmux.conf</code> I have the following command:</p>\n<pre><code>bind-key y display-popup -E -h \"90%\" \"git log --oneline --decorate --graph --all\"</code></pre>\n<p>This will – when I press <code>&lt;prefix&gt; + y</code> – open a popup window, which closes when the command exits and has a certain height. It will show me an ASCII-art style graph of all the commits – one of the features I missed from Fork – as an overlay over my editor, a small keystroke away.</p>\n<p>With this configuration – and a lot of reading the Fugitive help file – I feel much more at home with Git in the terminal.</p>\n<p><em>I also watched <a href=\"https://thoughtbot.com/upcase/mastering-git\">this</a> fantastic series on mastering Git and <a href=\"http://vimcasts.org/blog/2011/05/the-fugitive-series/\">these</a> unfortunately dated but still useful screencasts on Fugitive.</em></p>",
                "value": "One thing that always puzzled me a bit about my own workflow, is that almost all of it is based in the terminal (I use Vim and Tmux), except for Git: where most people seem to use the Git CLI commands, I use a graphical program (Fork, which is quite good).\nAnother thing then: I never used Github professionally, apart from the time I was a self employed web developer, but back then I was the only developer on my projects. All my previous jobs had a self-hosted Gitlab running somewhere.\nLong story short: I am trying to get better at Git in the terminal and using Github. And 'better at Git' to me both means 'being able to confidently rebase' as well as 'customise my workflow'.\nAliases in the Gitconfig file\nCustomising Git means setting configuration in the ~/.gitconfig file. This file contains settings for Git, like your name and email, but can also be used to add aliases. To create the first alias you can run git config --global alias.co checkout. After this, you can use git co as git checkout, which is shorter to type and yes I use this often now.\nAnother alias I have is this one:\npublish = !git push --set-upstream origin $(git symbolic-ref --short HEAD)\nIf you try to push a branch that has no linked branch on Github (the upstream), Git will complain about it. It will be nice to you and state the command you should have ran, but I got tired of having to copy and paste that new command.\nfatal: The current branch feature/new-shoes has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin feature/new-shoes\nIn Fork, this was just a checkbox away. With my new git publish command I get the convenience again: it will push the branch and set the upstream with the same name as I have locally, exactly as Git suggested I should have done, but in less typing.\nLinks to Github\nSo far we have seen two kinds of aliases: one that just aliases a simple Git command (b = branch) and one that actually ran a shell command, because we started it with a ! (note that you will have to start with ! git there). But there is another way: having a command that starts with git- in your path.\nI have the following file as ~/bin/git-github, marked as executable (chmod +x ~/bin/git-github) and in my path (export PATH=\"$HOME/bin:$PATH\" in my ~/.zshrc file):\n#!/bin/zsh\n\nlocal url\nurl=$(git remote get-url $(git remote))\nurl=$(echo $url | sed 's/.*github\\.com[:\\/]\\(.*\\).git$/https:\\/\\/github.com\\/\\1/')\n\nif [ -n \"$1\" ]; then\n  append=\"/$1/$(git symbolic-ref --short HEAD)\"\nfi\n\nopen -u \"$url$append\"\nYes, my ZSH is crude. Yes, I can better share this in Bash. Yes, it could've probably been on one line and be included as an alias in my Gitconfig. But it works for me.\nThe command figures out the Github URL of the project, based on the URL of the remote (it assumes you have only one). It then opens that URL with the macOS open command. If an argument is given, it appends that to the URL, with the name of the branch too.\nIn my Gitconfig I have two aliases that use this command:\npr = github pull/new\ncompare = github compare\nWith git github, my default browser will open a tab with the 'homepage' of the repository. With git compare, it will open a tab that contains a diff of the current branch and the default branch on Github (the remote versions of those). With git pr, the browser will open the correct page to open a for the current branch.\nAnd you mentioned Vim and Tmux?\nYes, I actually use the obligatory Tim Pope plugin Fugitive. This means I can do a lot of things which you can also read about in the help file. (Which I read a lot these days.)\nBut this allows me to stage and commit and rebase and reword all my changes in Vim, and then when I am ready, run :G publish and :G pr and make a PR for it on Github. These two commands alone make me feel so much more productive: no longer do I have to search for another program to compose commits and then search for the browser to handle the cooperative side of it... I just handle everything in my editor.\nFor Tmux I have another nice addition: in my ~/.tmux.conf I have the following command:\nbind-key y display-popup -E -h \"90%\" \"git log --oneline --decorate --graph --all\"\nThis will – when I press <prefix> + y – open a popup window, which closes when the command exits and has a certain height. It will show me an ASCII-art style graph of all the commits – one of the features I missed from Fork – as an overlay over my editor, a small keystroke away.\nWith this configuration – and a lot of reading the Fugitive help file – I feel much more at home with Git in the terminal.\nI also watched this fantastic series on mastering Git and these unfortunately dated but still useful screencasts on Fugitive."
              }
            ],
            "url": [
              "https://seblog.nl/2022/09/19/1/customising-git"
            ],
            "published": [
              "2022-09-19T18:51:48+0000"
            ],
            "updated": [
              "2022-09-19T18:51:48+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/262/1"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "git",
              "vim",
              "tmux"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Storing posts by juggling with Git internals"
            ],
            "content": [
              {
                "html": "<p>I have been wanting to rework the core of this website for a couple of years now, but since the current setup still works, and since I have many other things to do, and finally since I am very picky about how I <em>want</em> it to work, I have never really finished this part at all. This makes me stuck at the save version of this site, both visually as behind the scenes.</p>\n<p>Now that I am in between jobs I wanted to work on it a bit more, but I still do not have time enough to fully finish it. I guess it all comes down to a few choices I have to make regarding trade-offs. In order to make better decisions, I wanted document my current storage and the one I have been working on. After I wrote it all out I think I am deciding not to use it, but it was a nice exploration so I will share it anyway.</p>\n<p>The description heavily leans on some knowledge about Git, which is software for versioning your code, or in this case, plain text files. I will try to explain a bit along the way but it is useful to have some familiarity with it already.</p>\n<p><em>tl;dr: I did fancy with Git but might not pursue.</em></p>\n<h2>How it is currently done</h2>\n<p>At the time of writing, my posts are stored in a plain text format with a lot of folders. It is derived from the format which the <a href=\"https://getkirby.com/\">Kirby CMS</a> expects: folders for pages with text files within it, of which the name of the text file dictates the template that is being used to render the page. In my case, it is always <code>entry.txt</code>.</p>\n<p>I have one folder per year, one folder per day of the year and one folder per post of the day. In that last folder is the <code>entry.txt</code> and some other files related to the post, like pictures, but also metadata like received and sent <a href=\"https://indieweb.org/Webmention\">Webmentions</a>.</p>\n<p>An example of the <code>tree</code> view is below. It shows two entries on two days in one year. Note that days and years also have their own <code>.txt</code> file that is actually almost empty and pretty much useless in this setup, but still required for Kirby to work properly. The first day of the year my site is broken because it does not automatically create the required <code>year.txt</code> (or did I fix that finally?).</p>\n<pre><code>./content\n└── 2022\n    ├── 001\n    │   ├── 1\n    │   │   └── entry.txt\n    │   │   ├── .webmentions\n    │   │   │   ├── 1641117941-f6bc3209f3f33f0cb8e4d92e5d46b5090b53aa11.json\n    │   │   │   └── pings.json\n    │   └── day.txt\n    ├── 002\n    │   ├── 1\n    │   │   ├── some_image.jpg\n    │   │   └── entry.txt\n    │   └── day.txt\n    └── year.txt</code></pre>\n<p>Also note that there is a hidden <code>.webmentions</code> folder which contains a <code>pings.json</code> for all the sent webmentions and a JSON file with timestamp and content hash in the name for every received webmention. Not in the diagram but also present are some other folders for pages like <code>./login/login.txt</code> (because that is how Kirby works) and <code>./isbn/9780349411903/book.txt</code> (for <a href=\"https://seblog.nl/isbn/9780349411903\">books</a>).</p>\n<p>All these files are stored in a Git repository, which I <em>manually</em> update every so often (more bimonthly than weekly, sadly) via SSH to my server. I give it a very generic commit name (’sync’ or so) and push to a private repo on Github, which takes a while because the commits and the repo contain all those images and all those folders.</p>\n<h2>What is wrong with this</h2>\n<p>The main point of wanting to move off of this structure by Kirby, is that it requires those placeholder pages in my content folder. I have no need for a <code>./login/login.txt</code>: the login page is just a feature of the software and should be handled by that part of the code. But at least that file contains some text for that page: the files for <code>year.txt</code> and <code>day.txt</code> are completely useless.</p>\n<p>Another point is that I want to make the Git commits automatically with every <a href=\"https://indieweb.org/Micropub\">Micropub</a> request: Git provides me with a history, but only if I actually commit the files once I changed them. Also, if I do not push the changes to Github, I have no backup of recent posts.</p>\n<p>The metadata of the received and sent Webmentions are now also available in the repo. This is nice, as it stores the information right next to the post it belongs to, but on the other hand it feels kind of polluting: these Webmentions contain content by <em>others</em>, where as the rest of the content is by me. There is some other external content hidden in the <code>entry.txt</code> file but I’ll get to that later.</p>\n<p>The last point is that the full size images are stored in the repo and every book and article about Git says that you should not use it to store big files in it. Doing a <code>git status</code> takes a while and also the pushes are much slower than any other Git repository I work with.</p>\n<h2>Git history: the Git Object Model</h2>\n<p>Before I go further into the avenue I am taking to solve the problem, I need to explain a bit about the Git Object Model, also known as ‘how Git works under the hood’. For a more thorough explanation, see <a href=\"https://git-scm.com/book/en/v2/Git-Internals-Git-Objects\">this chapter</a> in the Git Book.</p>\n<p>As you’ll learn from that chapter, every object is represented as a file, referenced by the SHA1 hash of its contents. And there are three (no, four) types of objects:</p>\n<ul>\n<li>\n<strong>blobs</strong>, which are the contents of files tracked by Git (and thus also the versions of those files)</li>\n<li>\n<strong>trees</strong>, which are listings of filenames with references to blobs or other trees. These trees together create the file structure of a version.</li>\n<li>\n<strong>commits</strong>, which are versions. A commit contains a reference to the root tree of the files you are tracking, a parent commit (the previous version) and a message and some metadata.</li>\n<li>\n<strong>tags</strong>, are not mentioned by the chapter, but do exists: these look like commits, but create a way to store a message with a tag (making annotated tags, I’ll explain plain tags soon).</li>\n</ul>\n<p>Note that Git does not store diffs, it always stores the full contents of every version of the file, albeit zlib compressed and sometimes even packed in a single file, but let’s not get into that right now.</p>\n<p>Git’s tags and branches are just files and folders (they can have <code>/</code> in their names) which contain the hashes (names) of the specific commits they point to. The tags can also point to a tag object, which will then contain a message about the tag (which makes them ‘annotated tags’).</p>\n<p>This all brings me to the final point about my storage: for every new post, Git has to create a lot of files. First, it needs to add a blob for the <code>entry.txt</code>, possibly also a blob for the image and blobs for other metadata. Then it needs to create a tree for the entry folder, listing <code>entry.txt</code> and if present the filenames of the images and metadata files. Then it creates a new tree for the day, with all the existing entries plus the newly created one. Then it creates a new tree for the year, to point to this new version (tree) of the day. Then it creates a new tree for the root, with this new version of the year in it. And finally it also needs to create a commit object to point to that new root tree. Every update requires all these new trees. The trees are cheap, but it feels wasteful.</p>\n<p>Also note that a version of a file always relies on the version of all other files. This is what you want for code (code is designed to work with other code), but it does not feel like the right model for posts (I might come back on this tho).</p>\n<p>And there is also the question of identifiers: currently, my posts are identified as year, day of year, number (<code>2022/242/1</code>), but especially that number can only be found in the name of the folder and thus in the tree, not in the blob. I have not yet found a good solution for this, but maybe I am seeing too many problems.</p>\n<h2>The new setup</h2>\n<p>To get rid of some of the trees, I tried to apply my knowledge of the Git Object Model to store my posts in another way. To do this, I used the commands suggested by the chapter in the Git Book in a script that looped over all my files, to store them in a new blank repo to try things out.</p>\n<p>For each year, for each day, for each post, I would find the <code>entry.txt</code> and put the contents in a Git blob with <code>git hash-object -w ./content/2022/242/1/entry.txt</code>. The resulting hash I used in the command <code>git update-index --add --cacheinfo 100644 $hash entry.txt</code> to stage the file for a new tree. I would do that too for all images and related files, and then I would run <code>git write-tree</code> to write the tree and get the hash for it and <code>git commit-tree $hash -m \"commit\"</code> to create a commit based on it (with a bad message indeed). With that last hash I would run <code>git update-ref refs/heads/2022/242/1 $hash</code> to create a branch for that commit. (I contemplate adding an annotated tag in between, for storing some metadata like ‘published at’ date.)</p>\n<p>This would result in a Git repository with over 10,000 branches (I have many posts) neatly organised in folders per year and day. When one were to check out one of these branches, just the files of that posts will appear in the root of your repo: there are no folders. When you check out another branch, other files will appear. This is not how Git usually works, but it decouples all posts from one-another.</p>\n<h2>Multiple types of pages</h2>\n<p>The posts I describe above all follow the year-day-number pattern because they are posts: they are sequential entries tied to a date. There are other objects I track, though, that are not date-specific. One example is topical wiki-style pages: these pages may receive edits over time, but their topic is not tied to a date. (I don’t have these yet.)</p>\n<p>Another example is the books that I track to base my ‘read’ posts off. I haven’t posted them in a while, but I would like to expand this book collection to also include other types of objects to reference, such as movies, games or locations. These objects also have no date to them attached, at least not a date meaningful to my posts.</p>\n<p>I could generate UUIDs for these objects and pages, and store branches for those commits in the same way Git does store it’s objects internally, with a folder per first two characters of the hash (or UUID) and a filename of the rest:</p>\n<pre><code>./refs/heads\n├── 0a\n│   ├── 8342d2-d6f1-4363-a287-a32948d04eaa\n│   └── edcb13-433c-48d2-b683-a407c3a88f57\n└── 3d\n    ├── 243a27-114e-4eee-9bd8-2a51b01939e6\n    ├── 25965b-2da5-422d-abce-f3337fa97fc4\n    └── 611b59-499a-48a0-b931-afe06192e778</code></pre>\n<p>I could even reference the same post/object with multiple identifiers this way. Maybe I want to give every book a UUID, but also reference it by its ISBN. The downside to that, however, is that I need to update both branches to point to the same commit once I make an update do the book-page.</p>\n<h2>Drawbacks of the approach</h2>\n<p>The multiple identifiers are probably not feasible, but there are some other drawbacks too. My main concern is that it is much harder to know whether or not you pushed all the changes: one would have to loop over all 10,000+ branches and perform a push or check. In this loop you would probably have to check out the branch as well. It is of course better to just push right after you make a change, but my point is that the ‘just for sure’ push is a lot of work.</p>\n<p>Another drawback is actually the counter to what I initially was seeking: wiki-style pages might actually reference each other, and thus their version may depend on a version of another page. In this case, you would want the history to capture all the pages, just as the normal Git workings do. My problem was with the date-specific posts, but once you are mixing date-specific and wiki-style pages, you might be better off with the all-file history.</p>\n<p>One problem this whole setup still does not solve is that of large files. The <code>git status</code> command is much faster for it does not have to check all the blobs in the repo to get an answer, but the files are still in the repo, taking up space. And there do exist other solutions for big files in git, such as <a href=\"https://git-lfs.github.com/\">Git LFS</a>, the Large File Storage extension.</p>\n<p>Also, I am still not 100% sure it is a good idea to store metadata in the Git commits and tags. When we already store the identifier in the tree objects, I thought I could also add the ‘published at’ date into the commit. Information about the author is already present, and as my site supports private posts, it also seemed like a reasonable location to store lists of people who can view the post. But again, maybe that should be stored in another way, and not be so deeply integrated with Git.</p>\n<h2>Conclusion</h2>\n<p>It was very helpful to write this all out, for by doing so I made up my mind: this is just all a bit too complicated and way too much deeply coupled to Git internals. I would be throwing out the ‘just plain text files’ principle, because I would store a lot of data in Git’s objects, which are actually not plain text, since they are compressed with a certain algorithm.</p>\n<p>My favourite Git GUI <a href=\"https://git-fork.com/\">Fork</a> is able to work with the monstrous repository my script produced, but many of the features are now strange and unusable, because the repo is so strangely set up. I would have to create my own software to maintain the integrity of the repo and that could lead to bugs and thus faulty data and maybe even data loss.</p>\n<p>I still think there are some nice properties to the system I describe above, but I won’t be using it. But I learned a few new things about Git internals along the way, and I hope you did too.</p>",
                "value": "I have been wanting to rework the core of this website for a couple of years now, but since the current setup still works, and since I have many other things to do, and finally since I am very picky about how I want it to work, I have never really finished this part at all. This makes me stuck at the save version of this site, both visually as behind the scenes.\nNow that I am in between jobs I wanted to work on it a bit more, but I still do not have time enough to fully finish it. I guess it all comes down to a few choices I have to make regarding trade-offs. In order to make better decisions, I wanted document my current storage and the one I have been working on. After I wrote it all out I think I am deciding not to use it, but it was a nice exploration so I will share it anyway.\nThe description heavily leans on some knowledge about Git, which is software for versioning your code, or in this case, plain text files. I will try to explain a bit along the way but it is useful to have some familiarity with it already.\ntl;dr: I did fancy with Git but might not pursue.\nHow it is currently done\nAt the time of writing, my posts are stored in a plain text format with a lot of folders. It is derived from the format which the Kirby CMS expects: folders for pages with text files within it, of which the name of the text file dictates the template that is being used to render the page. In my case, it is always entry.txt.\nI have one folder per year, one folder per day of the year and one folder per post of the day. In that last folder is the entry.txt and some other files related to the post, like pictures, but also metadata like received and sent Webmentions.\nAn example of the tree view is below. It shows two entries on two days in one year. Note that days and years also have their own .txt file that is actually almost empty and pretty much useless in this setup, but still required for Kirby to work properly. The first day of the year my site is broken because it does not automatically create the required year.txt (or did I fix that finally?).\n./content\n└── 2022\n    ├── 001\n    │   ├── 1\n    │   │   └── entry.txt\n    │   │   ├── .webmentions\n    │   │   │   ├── 1641117941-f6bc3209f3f33f0cb8e4d92e5d46b5090b53aa11.json\n    │   │   │   └── pings.json\n    │   └── day.txt\n    ├── 002\n    │   ├── 1\n    │   │   ├── some_image.jpg\n    │   │   └── entry.txt\n    │   └── day.txt\n    └── year.txt\nAlso note that there is a hidden .webmentions folder which contains a pings.json for all the sent webmentions and a JSON file with timestamp and content hash in the name for every received webmention. Not in the diagram but also present are some other folders for pages like ./login/login.txt (because that is how Kirby works) and ./isbn/9780349411903/book.txt (for books).\nAll these files are stored in a Git repository, which I manually update every so often (more bimonthly than weekly, sadly) via SSH to my server. I give it a very generic commit name (’sync’ or so) and push to a private repo on Github, which takes a while because the commits and the repo contain all those images and all those folders.\nWhat is wrong with this\nThe main point of wanting to move off of this structure by Kirby, is that it requires those placeholder pages in my content folder. I have no need for a ./login/login.txt: the login page is just a feature of the software and should be handled by that part of the code. But at least that file contains some text for that page: the files for year.txt and day.txt are completely useless.\nAnother point is that I want to make the Git commits automatically with every Micropub request: Git provides me with a history, but only if I actually commit the files once I changed them. Also, if I do not push the changes to Github, I have no backup of recent posts.\nThe metadata of the received and sent Webmentions are now also available in the repo. This is nice, as it stores the information right next to the post it belongs to, but on the other hand it feels kind of polluting: these Webmentions contain content by others, where as the rest of the content is by me. There is some other external content hidden in the entry.txt file but I’ll get to that later.\nThe last point is that the full size images are stored in the repo and every book and article about Git says that you should not use it to store big files in it. Doing a git status takes a while and also the pushes are much slower than any other Git repository I work with.\nGit history: the Git Object Model\nBefore I go further into the avenue I am taking to solve the problem, I need to explain a bit about the Git Object Model, also known as ‘how Git works under the hood’. For a more thorough explanation, see this chapter in the Git Book.\nAs you’ll learn from that chapter, every object is represented as a file, referenced by the SHA1 hash of its contents. And there are three (no, four) types of objects:\n\nblobs, which are the contents of files tracked by Git (and thus also the versions of those files)\ntrees, which are listings of filenames with references to blobs or other trees. These trees together create the file structure of a version.\ncommits, which are versions. A commit contains a reference to the root tree of the files you are tracking, a parent commit (the previous version) and a message and some metadata.\ntags, are not mentioned by the chapter, but do exists: these look like commits, but create a way to store a message with a tag (making annotated tags, I’ll explain plain tags soon).\n\nNote that Git does not store diffs, it always stores the full contents of every version of the file, albeit zlib compressed and sometimes even packed in a single file, but let’s not get into that right now.\nGit’s tags and branches are just files and folders (they can have / in their names) which contain the hashes (names) of the specific commits they point to. The tags can also point to a tag object, which will then contain a message about the tag (which makes them ‘annotated tags’).\nThis all brings me to the final point about my storage: for every new post, Git has to create a lot of files. First, it needs to add a blob for the entry.txt, possibly also a blob for the image and blobs for other metadata. Then it needs to create a tree for the entry folder, listing entry.txt and if present the filenames of the images and metadata files. Then it creates a new tree for the day, with all the existing entries plus the newly created one. Then it creates a new tree for the year, to point to this new version (tree) of the day. Then it creates a new tree for the root, with this new version of the year in it. And finally it also needs to create a commit object to point to that new root tree. Every update requires all these new trees. The trees are cheap, but it feels wasteful.\nAlso note that a version of a file always relies on the version of all other files. This is what you want for code (code is designed to work with other code), but it does not feel like the right model for posts (I might come back on this tho).\nAnd there is also the question of identifiers: currently, my posts are identified as year, day of year, number (2022/242/1), but especially that number can only be found in the name of the folder and thus in the tree, not in the blob. I have not yet found a good solution for this, but maybe I am seeing too many problems.\nThe new setup\nTo get rid of some of the trees, I tried to apply my knowledge of the Git Object Model to store my posts in another way. To do this, I used the commands suggested by the chapter in the Git Book in a script that looped over all my files, to store them in a new blank repo to try things out.\nFor each year, for each day, for each post, I would find the entry.txt and put the contents in a Git blob with git hash-object -w ./content/2022/242/1/entry.txt. The resulting hash I used in the command git update-index --add --cacheinfo 100644 $hash entry.txt to stage the file for a new tree. I would do that too for all images and related files, and then I would run git write-tree to write the tree and get the hash for it and git commit-tree $hash -m \"commit\" to create a commit based on it (with a bad message indeed). With that last hash I would run git update-ref refs/heads/2022/242/1 $hash to create a branch for that commit. (I contemplate adding an annotated tag in between, for storing some metadata like ‘published at’ date.)\nThis would result in a Git repository with over 10,000 branches (I have many posts) neatly organised in folders per year and day. When one were to check out one of these branches, just the files of that posts will appear in the root of your repo: there are no folders. When you check out another branch, other files will appear. This is not how Git usually works, but it decouples all posts from one-another.\nMultiple types of pages\nThe posts I describe above all follow the year-day-number pattern because they are posts: they are sequential entries tied to a date. There are other objects I track, though, that are not date-specific. One example is topical wiki-style pages: these pages may receive edits over time, but their topic is not tied to a date. (I don’t have these yet.)\nAnother example is the books that I track to base my ‘read’ posts off. I haven’t posted them in a while, but I would like to expand this book collection to also include other types of objects to reference, such as movies, games or locations. These objects also have no date to them attached, at least not a date meaningful to my posts.\nI could generate UUIDs for these objects and pages, and store branches for those commits in the same way Git does store it’s objects internally, with a folder per first two characters of the hash (or UUID) and a filename of the rest:\n./refs/heads\n├── 0a\n│   ├── 8342d2-d6f1-4363-a287-a32948d04eaa\n│   └── edcb13-433c-48d2-b683-a407c3a88f57\n└── 3d\n    ├── 243a27-114e-4eee-9bd8-2a51b01939e6\n    ├── 25965b-2da5-422d-abce-f3337fa97fc4\n    └── 611b59-499a-48a0-b931-afe06192e778\nI could even reference the same post/object with multiple identifiers this way. Maybe I want to give every book a UUID, but also reference it by its ISBN. The downside to that, however, is that I need to update both branches to point to the same commit once I make an update do the book-page.\nDrawbacks of the approach\nThe multiple identifiers are probably not feasible, but there are some other drawbacks too. My main concern is that it is much harder to know whether or not you pushed all the changes: one would have to loop over all 10,000+ branches and perform a push or check. In this loop you would probably have to check out the branch as well. It is of course better to just push right after you make a change, but my point is that the ‘just for sure’ push is a lot of work.\nAnother drawback is actually the counter to what I initially was seeking: wiki-style pages might actually reference each other, and thus their version may depend on a version of another page. In this case, you would want the history to capture all the pages, just as the normal Git workings do. My problem was with the date-specific posts, but once you are mixing date-specific and wiki-style pages, you might be better off with the all-file history.\nOne problem this whole setup still does not solve is that of large files. The git status command is much faster for it does not have to check all the blobs in the repo to get an answer, but the files are still in the repo, taking up space. And there do exist other solutions for big files in git, such as Git LFS, the Large File Storage extension.\nAlso, I am still not 100% sure it is a good idea to store metadata in the Git commits and tags. When we already store the identifier in the tree objects, I thought I could also add the ‘published at’ date into the commit. Information about the author is already present, and as my site supports private posts, it also seemed like a reasonable location to store lists of people who can view the post. But again, maybe that should be stored in another way, and not be so deeply integrated with Git.\nConclusion\nIt was very helpful to write this all out, for by doing so I made up my mind: this is just all a bit too complicated and way too much deeply coupled to Git internals. I would be throwing out the ‘just plain text files’ principle, because I would store a lot of data in Git’s objects, which are actually not plain text, since they are compressed with a certain algorithm.\nMy favourite Git GUI Fork is able to work with the monstrous repository my script produced, but many of the features are now strange and unusable, because the repo is so strangely set up. I would have to create my own software to maintain the integrity of the repo and that could lead to bugs and thus faulty data and maybe even data loss.\nI still think there are some nice properties to the system I describe above, but I won’t be using it. But I learned a few new things about Git internals along the way, and I hope you did too."
              }
            ],
            "url": [
              "https://seblog.nl/2022/08/30/1/storing-posts-with-git-internals"
            ],
            "published": [
              "2022-08-30T17:21:34+0000"
            ],
            "updated": [
              "2022-08-30T17:21:34+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/242/1"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "indieweb",
              "meta"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Quickly look up PHP docs from Vim"
            ],
            "content": [
              {
                "html": "<p>As I don’t use a full IDE like PHPStorm, I don’t get much help with the parameters to function calls from my editor. On one hand I find this a good thing: IDE users rely so much on autocomplete that they don’t remember names of things at all. On the other hand: who has the mental space to waist on such things?</p>\n<p>My middle ground is that I look up a lot of things on PHP.net. They make that very simple: just add the name of the function you are looking for after the slash and they will give you the correct documentation. But: switching to a browser and typing out the address requires a lot of keystrokes. I found a solution.</p>\n<pre><code class=\"language-vim\">nmap &lt;Leader&gt;pd :silent !open https://php.net/&lt;c-r&gt;&lt;c-w&gt;&lt;cr&gt;</code></pre>\n<p>This adds a leader key mapping to look up the word (so: function name) under the cursor. I prefix all my PHP related leader mappings with a <code>p</code>, but feel free to pick something else.</p>\n<p>The <code>:!</code> runs a shell command, in this case <code>open</code>, which on Mac can be given a URL, which will then be opened in the default browser. I added <code>silent</code> to ignore the output of the command: I just want to open a URL.</p>\n<p>As the URL, I let Vim type out the address to PHP.net, and since we are in command mode, one can do Ctrl+R, Ctrl+W, which will paste the word that is currently under the cursor (very nice to know in itself). We end the sequence with an enter (carriage return) to run it.</p>\n<p>So the tip within the tip is Ctrl+R (register) Ctrl+W (word). In general Ctrl+R in insert mode gives you this interesting ‘paste from register’ mode that is good to know. See <code>:help i_ctrl-r</code> and <code>:help c_ctrl-r</code> for more.</p>",
                "value": "As I don’t use a full IDE like PHPStorm, I don’t get much help with the parameters to function calls from my editor. On one hand I find this a good thing: IDE users rely so much on autocomplete that they don’t remember names of things at all. On the other hand: who has the mental space to waist on such things?\nMy middle ground is that I look up a lot of things on PHP.net. They make that very simple: just add the name of the function you are looking for after the slash and they will give you the correct documentation. But: switching to a browser and typing out the address requires a lot of keystrokes. I found a solution.\nnmap <Leader>pd :silent !open https://php.net/<c-r><c-w><cr>\nThis adds a leader key mapping to look up the word (so: function name) under the cursor. I prefix all my PHP related leader mappings with a p, but feel free to pick something else.\nThe :! runs a shell command, in this case open, which on Mac can be given a URL, which will then be opened in the default browser. I added silent to ignore the output of the command: I just want to open a URL.\nAs the URL, I let Vim type out the address to PHP.net, and since we are in command mode, one can do Ctrl+R, Ctrl+W, which will paste the word that is currently under the cursor (very nice to know in itself). We end the sequence with an enter (carriage return) to run it.\nSo the tip within the tip is Ctrl+R (register) Ctrl+W (word). In general Ctrl+R in insert mode gives you this interesting ‘paste from register’ mode that is good to know. See :help i_ctrl-r and :help c_ctrl-r for more."
              }
            ],
            "url": [
              "https://seblog.nl/2022/08/19/1/vim-php-docs"
            ],
            "published": [
              "2022-08-19T10:24:31+0000"
            ],
            "updated": [
              "2022-08-19T10:24:31+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/231/1"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "vim"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "content": [
              {
                "html": "<p>Ik weet weer het antwoord op de vraag ‘waarom heb ik geen secondelijm in huis’, wat een nare vingertoppen krijg je ervan. Maar het is per saldo vast beter voor het milieu dan een nieuw telefoonhoesje kopen.</p>",
                "value": "Ik weet weer het antwoord op de vraag ‘waarom heb ik geen secondelijm in huis’, wat een nare vingertoppen krijg je ervan. Maar het is per saldo vast beter voor het milieu dan een nieuw telefoonhoesje kopen."
              }
            ],
            "url": [
              "https://seblog.nl/2022/08/08/1/secondelijm"
            ],
            "published": [
              "2022-08-08T17:05:47+0000"
            ],
            "updated": [
              "2022-08-08T17:06:33+0000"
            ],
            "syndication": [
              "https://twitter.com/sebsel/status/1556688220292845568"
            ],
            "uid": [
              "https://seblog.nl/2022/220/1"
            ],
            "author": [
              "https://seblog.nl/"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Pride Run"
            ],
            "content": [
              {
                "html": "<p>Van de week schreef ik al over de Eurogames en dat ik daar een race van 5km deed. Gister deed ik nog een keer 5km in een race, de Pride Run in Amsterdam, en dat ging goed.</p>\n<p>De Eurogames race was een beetje een gehaaste race: ik had de Pride Run al gepland, en schreef me pas de avond van te voren in omdat ik er toen pas achter kwam dat ik aan deze mee kon doen als ‘local hero’. Als Nijmegenaar wilde ik dat dus wel.</p>\n<p>De ochtend was ik ook al naar Amsterdam geweest, niet voor de Pride Run maar de Pride Walk. Ik deed 20 minuten over de eerste 200 meter, maar het was fijn om mee te doen.</p>\n<p>Het jammere was dus wel dat ik vrij gehaasd bij de Eurogames aankwam: snel thuis omkleden en toen nog flink doorfietsen om mijn startnummer op tijd op te halen. Ik dacht, da’s gelijk warming up, en dat was wel zo, maar ik had ook het idee dat ik al net te veel energie aan het verbruiken was.</p>\n<p>Het was ontzettend heet en ik had te weinig gedronken: al na één kilometer had ik dorst. En er kwam een waterpost, want ik ging maar één rondje. En ik hield me misschien in? Al met al was ik teleurgesteld met de tijd van 24:26, maar aan de andere kant was het de eerste keer sinds een lange tijd dat ik onder de 25 zat, dus zo erg was het niet.</p>\n<p>Dan dus gister: vrijwel alles klopte bij de Pride Run. Het was relatief koel, ik had goed gedronken, beetje ingelopen, er waren veel mensen, de route was vlak en de ondergrond ook. Ja, ik ging veel te hard van start – eerste drie kilometer 4:15/km – maar het ging goed.</p>\n<p>Uiteindelijk had ik een tijd van 22:27, waarmee ik dus bijna twee minuten sneller was dan vorige week. En ik heb mijn ‘haha dat kan niet’ doel van 22:30 dus gehaald. Ik ben heel blij.</p>",
                "value": "Van de week schreef ik al over de Eurogames en dat ik daar een race van 5km deed. Gister deed ik nog een keer 5km in een race, de Pride Run in Amsterdam, en dat ging goed.\nDe Eurogames race was een beetje een gehaaste race: ik had de Pride Run al gepland, en schreef me pas de avond van te voren in omdat ik er toen pas achter kwam dat ik aan deze mee kon doen als ‘local hero’. Als Nijmegenaar wilde ik dat dus wel.\nDe ochtend was ik ook al naar Amsterdam geweest, niet voor de Pride Run maar de Pride Walk. Ik deed 20 minuten over de eerste 200 meter, maar het was fijn om mee te doen.\nHet jammere was dus wel dat ik vrij gehaasd bij de Eurogames aankwam: snel thuis omkleden en toen nog flink doorfietsen om mijn startnummer op tijd op te halen. Ik dacht, da’s gelijk warming up, en dat was wel zo, maar ik had ook het idee dat ik al net te veel energie aan het verbruiken was.\nHet was ontzettend heet en ik had te weinig gedronken: al na één kilometer had ik dorst. En er kwam een waterpost, want ik ging maar één rondje. En ik hield me misschien in? Al met al was ik teleurgesteld met de tijd van 24:26, maar aan de andere kant was het de eerste keer sinds een lange tijd dat ik onder de 25 zat, dus zo erg was het niet.\nDan dus gister: vrijwel alles klopte bij de Pride Run. Het was relatief koel, ik had goed gedronken, beetje ingelopen, er waren veel mensen, de route was vlak en de ondergrond ook. Ja, ik ging veel te hard van start – eerste drie kilometer 4:15/km – maar het ging goed.\nUiteindelijk had ik een tijd van 22:27, waarmee ik dus bijna twee minuten sneller was dan vorige week. En ik heb mijn ‘haha dat kan niet’ doel van 22:30 dus gehaald. Ik ben heel blij."
              }
            ],
            "url": [
              "https://seblog.nl/2022/08/06/3/pride-run-van-de-week"
            ],
            "published": [
              "2022-08-06T11:42:47+0000"
            ],
            "updated": [
              "2022-08-06T11:42:47+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/218/3"
            ],
            "author": [
              "https://seblog.nl/"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Shoe Dog"
            ],
            "content": [
              {
                "html": "<p>Net klaar met het lezen van <em>Shoe Dog</em> van Phil Knight, de oprichter van Nike. Het is alweer uit 2016, maar ik kwam het tegen in de boekhandel en aangezien ik volgende maand met een nieuwe baan begin in het schoenvak, leek het me interessant om te lezen.</p>\n<p>Het bleek ook inderdaad een goed geschreven en interessant boek te zijn, waarin schoenen ook samengaan met hardlopen (waar ik de laatste tijd weer heel actief mee bezig ben) en Japan (waar Phil zijn eerste schoenen vandaan haalt en waar ik al een tijd ook interesse in heb).</p>\n<p>Gaandeweg wordt het boek steeds iets meer een verslag van ‘legal battles’, want een groot bedrijf wordt je niet zonder dat. Dat ze worden gewonnen snap je als lezer wel, want anders was Nike niet zo groot als het nu is. Daarnaast blijft ook wel de indruk: Phil Knight houdt erg van zichzelf. Alles lijkt hij uiteindelijk te willen verbinden aan een soort voorbestemdheid, dat hij Nike wel móest oprichten van het universum, gezien alle tekens. Maar goed, als je steeds blijft winnen, is dat dan Tao, of geluk? We lezen natuurlijk niet de boeken van de mensen met Crazy Ideas die het niet gehaald hebben.</p>\n<p>Toch vond ik het soms echt wel ‘oei’. Van bepaalde dingen kan je nog zeggen ‘ach het waren de jaren 60, 70’, maar er is dus in het boek veel sprake van ongelijkheid, van mannetjes, van machtsverhoudingen en van een beschreven cultuur die hij zelf duidelijk op het moment van schrijven nog altijd niet als problematisch zag. Aan de andere kant was hij voor die tijd juist vooruitstrevend – of zo wil het boek het – door een handel in atletische schoenen te laten runnen door o.a. een man in een rolstoel en een man met overgewicht.</p>\n<p>Bij de hele zaak tegen de aanvankelijk samenwerkende schoenenfabrikant Onitsuka kreeg ik ook juist wel sympathie voor de Japanners: Phil heeft ook absoluut tegen ze gelogen. Leuk om daarna te ontdekken dat ze nog steeds <em>in business</em> zijn, alleen dan onder de naam Asics, en laat dat nou net het merk zijn van mijn huidige hardloopschoenen.</p>\n<p>Al met al dus wel een interessant en vermakelijk boek.</p>",
                "value": "Net klaar met het lezen van Shoe Dog van Phil Knight, de oprichter van Nike. Het is alweer uit 2016, maar ik kwam het tegen in de boekhandel en aangezien ik volgende maand met een nieuwe baan begin in het schoenvak, leek het me interessant om te lezen.\nHet bleek ook inderdaad een goed geschreven en interessant boek te zijn, waarin schoenen ook samengaan met hardlopen (waar ik de laatste tijd weer heel actief mee bezig ben) en Japan (waar Phil zijn eerste schoenen vandaan haalt en waar ik al een tijd ook interesse in heb).\nGaandeweg wordt het boek steeds iets meer een verslag van ‘legal battles’, want een groot bedrijf wordt je niet zonder dat. Dat ze worden gewonnen snap je als lezer wel, want anders was Nike niet zo groot als het nu is. Daarnaast blijft ook wel de indruk: Phil Knight houdt erg van zichzelf. Alles lijkt hij uiteindelijk te willen verbinden aan een soort voorbestemdheid, dat hij Nike wel móest oprichten van het universum, gezien alle tekens. Maar goed, als je steeds blijft winnen, is dat dan Tao, of geluk? We lezen natuurlijk niet de boeken van de mensen met Crazy Ideas die het niet gehaald hebben.\nToch vond ik het soms echt wel ‘oei’. Van bepaalde dingen kan je nog zeggen ‘ach het waren de jaren 60, 70’, maar er is dus in het boek veel sprake van ongelijkheid, van mannetjes, van machtsverhoudingen en van een beschreven cultuur die hij zelf duidelijk op het moment van schrijven nog altijd niet als problematisch zag. Aan de andere kant was hij voor die tijd juist vooruitstrevend – of zo wil het boek het – door een handel in atletische schoenen te laten runnen door o.a. een man in een rolstoel en een man met overgewicht.\nBij de hele zaak tegen de aanvankelijk samenwerkende schoenenfabrikant Onitsuka kreeg ik ook juist wel sympathie voor de Japanners: Phil heeft ook absoluut tegen ze gelogen. Leuk om daarna te ontdekken dat ze nog steeds in business zijn, alleen dan onder de naam Asics, en laat dat nou net het merk zijn van mijn huidige hardloopschoenen.\nAl met al dus wel een interessant en vermakelijk boek."
              }
            ],
            "url": [
              "https://seblog.nl/2022/08/04/4/shoe-dog"
            ],
            "published": [
              "2022-08-04T20:29:03+0000"
            ],
            "updated": [
              "2022-08-04T20:29:03+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/216/4"
            ],
            "author": [
              "https://seblog.nl/"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Juli 2022"
            ],
            "content": [
              {
                "html": "<p>Geen idee of ik dit goed ga volhouden, maar ik zag een paar mensen die wekelijks of maandelijks een overzicht van gebeurtenissen uit hun leven schrijven. Ik schrijf niet al te veel meer over mijn dagelijkse bezigheden – er was een tijd dat ik dagelijks een maf stukje typte – maar eenmaal per maand een overzicht lijkt me wel een leuk idee. Hier de eerste editie voor juli 2022.</p>\n<ul>\n<li>De maand begon met mijn eerste meerdaagse festival: Down The Rabbit Hole. Ik had er speciaal een nieuwe tent voor aangeschaft (al had ik er al twee) en ik vond vooral het kampeer-aspect heel leuk. Qua optredens vond ik Moderat het hoogtepunt, maar ook leuke dingen gezien die ik nog niet kende (zoals L’Imperatrice). Ik zou zo nog eens gaan (en ik wil nog eens kamperen deze zomer).</li>\n<li>Ook heb ik deze maand besloten een overstap te maken qua werkgever: ik maak nu <a href=\"https://www.iphoned.nl/apple/iphone-13-pro/abonnement/\">een prijsvergelijker</a> maar ga binnenkort <a href=\"https://www.sneakerdistrict.nl/\">schoenen verkopen</a>. Of ja, daarbij helpen dan, en pas vanaf september.</li>\n<li>Mijn stiefmoeder was jarig en vierde dat met een heerlijke lunch aan het water met alle broers. Sowieso ben ik veel in Leiden geweest omdat het steeds iets minder gaat met mijn vader, waarvoor veel geregeld moet worden.</li>\n<li>Juli is natuurlijk ook de maand van de Nijmeegse Vierdaagse. Ik ben op zaterdag naar het vuurwerk wezen kijken, ben op dinsdag (heetst van de dag, 39º) met collega’s ‘de stad’ in geweest (meer in de schaduw hangen), heb op woensdag in de pauze een collega aangemoedigd die langs kantoor kwam en op vrijdag kwamen er wat vrienden uit Amsterdam over voor de intocht. Ook zonder de hele week vrij te nemen was het best wel een fijne Vierdaagseweek.</li>\n<li>Go spelen ligt een beetje stil vanwege de zomerstop op de club, maar ik ben wel nog een middagje bij de Hubert gaan zitten, waar op vrijdag vaak wel spelers zijn. Was een fijne partij in de schaduw, die ik wel verloor, maar de muziek was goed.</li>\n<li>Hardlopen gaat juist steeds beter. Ik trek nu meerdere keren per week de schoenen aan voor een rondje en dat voelt lekker. Ik ben nog nooit in de buurt geweest van dik zijn, maar merk toch een verschil in mijn lichaam nu ik weer fit ben. Ik dacht juli af te sluiten met een 5k race, maar ben gister alsnog naar de zondagochtendtraining gegaan. Het is een beetje verslavend.</li>\n<li>De 5k race was in het kader van de Eurogames. Die ochtend heb ik ook nog in Amsterdam meegelopen aan de Pride Walk, want <a href=\"https://seblog.nl/2022/07/30/3/net-de-pride-walk-gelopen\">Pride is a protest</a>. Komende week ook nog een 5k bij de Pride Run, maar dat is augustus.</li>\n</ul>",
                "value": "Geen idee of ik dit goed ga volhouden, maar ik zag een paar mensen die wekelijks of maandelijks een overzicht van gebeurtenissen uit hun leven schrijven. Ik schrijf niet al te veel meer over mijn dagelijkse bezigheden – er was een tijd dat ik dagelijks een maf stukje typte – maar eenmaal per maand een overzicht lijkt me wel een leuk idee. Hier de eerste editie voor juli 2022.\n\nDe maand begon met mijn eerste meerdaagse festival: Down The Rabbit Hole. Ik had er speciaal een nieuwe tent voor aangeschaft (al had ik er al twee) en ik vond vooral het kampeer-aspect heel leuk. Qua optredens vond ik Moderat het hoogtepunt, maar ook leuke dingen gezien die ik nog niet kende (zoals L’Imperatrice). Ik zou zo nog eens gaan (en ik wil nog eens kamperen deze zomer).\nOok heb ik deze maand besloten een overstap te maken qua werkgever: ik maak nu een prijsvergelijker maar ga binnenkort schoenen verkopen. Of ja, daarbij helpen dan, en pas vanaf september.\nMijn stiefmoeder was jarig en vierde dat met een heerlijke lunch aan het water met alle broers. Sowieso ben ik veel in Leiden geweest omdat het steeds iets minder gaat met mijn vader, waarvoor veel geregeld moet worden.\nJuli is natuurlijk ook de maand van de Nijmeegse Vierdaagse. Ik ben op zaterdag naar het vuurwerk wezen kijken, ben op dinsdag (heetst van de dag, 39º) met collega’s ‘de stad’ in geweest (meer in de schaduw hangen), heb op woensdag in de pauze een collega aangemoedigd die langs kantoor kwam en op vrijdag kwamen er wat vrienden uit Amsterdam over voor de intocht. Ook zonder de hele week vrij te nemen was het best wel een fijne Vierdaagseweek.\nGo spelen ligt een beetje stil vanwege de zomerstop op de club, maar ik ben wel nog een middagje bij de Hubert gaan zitten, waar op vrijdag vaak wel spelers zijn. Was een fijne partij in de schaduw, die ik wel verloor, maar de muziek was goed.\nHardlopen gaat juist steeds beter. Ik trek nu meerdere keren per week de schoenen aan voor een rondje en dat voelt lekker. Ik ben nog nooit in de buurt geweest van dik zijn, maar merk toch een verschil in mijn lichaam nu ik weer fit ben. Ik dacht juli af te sluiten met een 5k race, maar ben gister alsnog naar de zondagochtendtraining gegaan. Het is een beetje verslavend.\nDe 5k race was in het kader van de Eurogames. Die ochtend heb ik ook nog in Amsterdam meegelopen aan de Pride Walk, want Pride is a protest. Komende week ook nog een 5k bij de Pride Run, maar dat is augustus."
              }
            ],
            "url": [
              "https://seblog.nl/2022/08/01/1/juli-2022"
            ],
            "published": [
              "2022-08-01T11:50:17+0000"
            ],
            "updated": [
              "2022-08-01T11:50:17+0000"
            ],
            "uid": [
              "https://seblog.nl/2022/213/1"
            ],
            "author": [
              "https://seblog.nl/"
            ],
            "category": [
              "maand"
            ]
          }
        }
      ]
    }
  ],
  "rels": {
    "stylesheet": [
      "https://seblog.nl/assets/css/main.css?v=2019-10-20"
    ],
    "icon": [
      "https://seblog.nl/photo.jpg"
    ],
    "apple-touch-icon-precomposed": [
      "https://seblog.nl/photo.jpg"
    ],
    "feed": [
      "https://seblog.nl/all"
    ],
    "webmention": [
      "https://seblog.nl/webmention"
    ],
    "microsub": [
      "https://aperture.p3k.io/microsub/314"
    ],
    "alternate": [
      "https://seblog.nl/feed.rss"
    ],
    "authorization_endpoint": [
      "https://seblog.nl/auth"
    ],
    "token_endpoint": [
      "https://seblog.nl/auth/token"
    ],
    "micropub": [
      "https://seblog.nl/micropub"
    ],
    "me": [
      "https://seblog.nl/",
      "https://sebastiaanandeweg.nl/",
      "https://twitter.com/sebsel",
      "https://twitter.com/sebandeweg",
      "https://instagram.com/sebsel",
      "https://www.linkedin.com/in/sebastiaanandeweg",
      "https://github.com/sebsel",
      "https://strava.com/athletes/sebsel",
      "https://facebook.com/sebastiaan.andeweg",
      "https://mastodon.social/@sebsel",
      "https://micro.blog/sebsel"
    ],
    "author": [
      "https://seblog.nl/"
    ],
    "shortlink": [
      "https://5eb.nl/5Mp1",
      "https://5eb.nl/5Mo2",
      "https://5eb.nl/5Mn1",
      "https://5eb.nl/5Lu1",
      "https://5eb.nl/5L_1",
      "https://5eb.nl/5LP1"
    ],
    "canonical": [
      "https://seblog.nl/2022/317/1",
      "https://seblog.nl/2022/316/2",
      "https://seblog.nl/2022/315/1",
      "https://seblog.nl/2022/262/1",
      "https://seblog.nl/2022/242/1",
      "https://seblog.nl/2022/231/1"
    ]
  },
  "rel-urls": {
    "https://seblog.nl/assets/css/main.css?v=2019-10-20": {
      "rels": [
        "stylesheet"
      ]
    },
    "https://seblog.nl/photo.jpg": {
      "rels": [
        "icon"
      ]
    },
    "https://seblog.nl/all": {
      "rels": [
        "feed"
      ]
    },
    "https://seblog.nl/webmention": {
      "rels": [
        "webmention"
      ]
    },
    "https://aperture.p3k.io/microsub/314": {
      "rels": [
        "microsub"
      ]
    },
    "https://seblog.nl/feed.rss": {
      "rels": [
        "alternate"
      ],
      "type": "application/rss+xml"
    },
    "https://seblog.nl/auth": {
      "rels": [
        "authorization_endpoint"
      ]
    },
    "https://seblog.nl/auth/token": {
      "rels": [
        "token_endpoint"
      ]
    },
    "https://seblog.nl/micropub": {
      "rels": [
        "micropub"
      ]
    },
    "https://seblog.nl/": {
      "rels": [
        "me"
      ],
      "text": "\n        Seblog.nl\n      "
    },
    "https://sebastiaanandeweg.nl/": {
      "rels": [
        "me"
      ],
      "text": "Sebastiaan Andeweg"
    },
    "https://twitter.com/sebsel": {
      "rels": [
        "me"
      ],
      "text": "Twitter"
    },
    "https://twitter.com/sebandeweg": {
      "rels": [
        "me"
      ],
      "text": "English Twitter"
    },
    "https://instagram.com/sebsel": {
      "rels": [
        "me"
      ],
      "text": "Instagram"
    },
    "https://www.linkedin.com/in/sebastiaanandeweg": {
      "rels": [
        "me"
      ],
      "text": "LinkedIn"
    },
    "https://github.com/sebsel": {
      "rels": [
        "me"
      ],
      "text": "Github"
    },
    "https://strava.com/athletes/sebsel": {
      "rels": [
        "me"
      ],
      "text": "Strava"
    },
    "https://facebook.com/sebastiaan.andeweg": {
      "rels": [
        "me"
      ],
      "text": "Facebook"
    },
    "https://mastodon.social/@sebsel": {
      "rels": [
        "me"
      ],
      "text": "Mastodon"
    },
    "https://micro.blog/sebsel": {
      "rels": [
        "me"
      ]
    },
    "https://5eb.nl/5Mp1": {
      "rels": [
        "shortlink"
      ],
      "title": "2022/317/1",
      "text": "•"
    },
    "https://seblog.nl/2022/317/1": {
      "rels": [
        "canonical"
      ]
    },
    "https://5eb.nl/5Mo2": {
      "rels": [
        "shortlink"
      ],
      "title": "2022/316/2",
      "text": "•"
    },
    "https://seblog.nl/2022/316/2": {
      "rels": [
        "canonical"
      ]
    },
    "https://5eb.nl/5Mn1": {
      "rels": [
        "shortlink"
      ],
      "title": "2022/315/1",
      "text": "•"
    },
    "https://seblog.nl/2022/315/1": {
      "rels": [
        "canonical"
      ]
    },
    "https://5eb.nl/5Lu1": {
      "rels": [
        "shortlink"
      ],
      "title": "2022/262/1",
      "text": "•"
    },
    "https://seblog.nl/2022/262/1": {
      "rels": [
        "canonical"
      ]
    },
    "https://5eb.nl/5L_1": {
      "rels": [
        "shortlink"
      ],
      "title": "2022/242/1",
      "text": "•"
    },
    "https://seblog.nl/2022/242/1": {
      "rels": [
        "canonical"
      ]
    },
    "https://5eb.nl/5LP1": {
      "rels": [
        "shortlink"
      ],
      "title": "2022/231/1",
      "text": "•"
    },
    "https://seblog.nl/2022/231/1": {
      "rels": [
        "canonical"
      ]
    }
  }
}