{
  "items": [
    {
      "type": [
        "h-feed"
      ],
      "properties": {
        "photo": [
          "https://phoenixtrap.com/"
        ],
        "name": [
          "The Phoenix Trap"
        ],
        "url": [
          "https://phoenixtrap.com/"
        ],
        "summary": [
          "Perl, music, philosophy, etc."
        ],
        "content": [
          {
            "html": "Perl, music, philosophy, etc.",
            "value": "Perl, music, philosophy, etc."
          }
        ],
        "author": [
          {
            "type": [
              "h-card"
            ],
            "properties": {
              "url": [
                "https://phoenixtrap.com/",
                "https://github.com/mjgardner",
                "https://twitter.com/markjgardner",
                "https://www.facebook.com/mjgardner",
                "https://micro.blog/mjg",
                "https://www.instagram.com/mjgardner",
                "https://www.flickr.com/people/mjgardner",
                "https://social.sdf.org/@mjgardner",
                "https://www.linkedin.com/in/mjgardner",
                "https://reddit.com/user/mjgardner",
                "https://keyoxide.org/4dadfefe8e4ad0f92bcbbb8142f3ca898cb08a45",
                "https://keybase.io/mjgardner",
                "https://www.last.fm/user/mjgardner",
                "https://www.youtube.com/channel/UCo-bgiroS9CMQzfA_5r5Z0A/about",
                "https://www.goodreads.com/user/show/5299642-mark"
              ],
              "uid": [
                "https://phoenixtrap.com/"
              ],
              "photo": [
                {
                  "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=125&d=default&r=g",
                  "srcset": {
                    "1x": "data:image/gif;base64"
                  },
                  "alt": ""
                },
                {
                  "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=125&d=default&r=g",
                  "srcset": {
                    "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=250&d=default&r=g"
                  },
                  "alt": ""
                }
              ],
              "name": [
                "Mark Gardner"
              ],
              "email": [
                "https://phoenixtrap.com/cdn-cgi/l/email-protection#0f6265684f7f67606a6166777b7d6e7f216c6062"
              ],
              "note": [
                "I help professional Perl developers engineer modern, disciplined applications so they can become experts that write easy-to-maintain code with confidence."
              ]
            },
            "children": [
              {
                "type": [
                  "h-adr"
                ],
                "properties": {
                  "locality": [
                    "Houston"
                  ],
                  "region": [
                    "Texas"
                  ]
                }
              }
            ],
            "value": "https://phoenixtrap.com/"
          }
        ]
      },
      "children": [
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "quotation-of": [
              {
                "type": [
                  "h-cite"
                ],
                "properties": {
                  "name": [
                    "5 Reasons Why Using AI to Generate Blog Posts Can Destroy Your SEO"
                  ],
                  "url": [
                    "https://davorg.medium.com/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo-f8db298de65b"
                  ],
                  "author": [
                    {
                      "type": [
                        "h-card"
                      ],
                      "properties": {
                        "name": [
                          "Dave Cross"
                        ]
                      },
                      "value": "Dave Cross"
                    }
                  ],
                  "publication": [
                    "Medium"
                  ],
                  "summary": [
                    {
                      "html": "Using artificial intelligence (AI) to generate blog posts can be bad for search engine optimization (SEO) for several reasons. First and foremost, AI-generated content is often low quality and lacks…",
                      "value": "Using artificial intelligence (AI) to generate blog posts can be bad for search engine optimization (SEO) for several reasons. First and foremost, AI-generated content is often low quality and lacks…"
                    }
                  ]
                },
                "value": "https://davorg.medium.com/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo-f8db298de65b"
              }
            ],
            "name": [
              "Insightful.\n(reads last line)\nWait a minute…"
            ],
            "content": [
              {
                "html": "<p>Insightful.</p>\n<p><em>(reads last line)</em></p>\n<p>Wait a minute…</p>",
                "value": "Insightful.\n(reads last line)\nWait a minute…"
              }
            ],
            "url": [
              "https://phoenixtrap.com/2022/12/12/ai-blog-destroy-seo/"
            ],
            "updated": [
              "2022-12-12T00:45:58-06:00"
            ],
            "published": [
              "2022-12-12T00:45:58-06:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "category": [
              "AI",
              "blogging",
              "ChatGPT",
              "machine learning",
              "OpenAI",
              "SEO",
              "webdev"
            ],
            "syndication": [
              "https://twitter.com/markjgardner/status/1602196616210948104",
              "https://brid.gy/publish/mastodon",
              "https://fed.brid.gy/",
              "https://brid.gy/publish/twitter"
            ]
          },
          "id": "post-2399"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "A brief note on ChatGPT and ​“artificial intelligence”"
            ],
            "url": [
              "https://phoenixtrap.com/2022/12/09/a-brief-note-on-chatgpt-and-artificial-intelligence/",
              "https://phoenixtrap.com/2022/12/09/a-brief-note-on-chatgpt-and-artificial-intelligence/"
            ],
            "updated": [
              "2022-12-09T16:53:08-06:00"
            ],
            "published": [
              "2022-12-09T16:53:08-06:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/12/pexels-photo-8386434.jpeg?fit=668%2C445&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": "person reaching out to a robot"
              }
            ],
            "content": [
              {
                "html": "<aside>[I orig­i­nal­ly wrote a short­er ver­sion of this on Mastodon but my host is hav­ing data­base prob­lems so it was lost. I recov­ered it <a href=\"https://mastodon.social/@mjgardner@mastodon.sdf.org/109460168303192715\">from anoth­er serv­er</a> and am sav­ing it on my blog for posterity.]</aside>\n<p>Last week the research lab­o­ra­to­ry start­up <a href=\"https://openai.com/\">OpenAI</a> set the tech­nol­o­gy world ablaze with the debut of <a href=\"https://openai.com/blog/chatgpt/\">ChatGPT</a>, a pro­to­type con­ver­sa­tion­al pro­gram or <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>chat­bot”. It uses a large lan­guage mod­el tuned with machine learn­ing tech­niques to pro­vide answers on a vast vari­ety of sub­jects drawn from books and the World Wide Web, includ­ing <a href=\"https://reddit.com/\">Reddit</a> and <a href=\"https://wikipedia.org/\">Wikipedia</a>. Many users and com­men­ta­tors won­dered if its detailed and seem­ing­ly well-​reasoned respons­es could be used in place of human-​written con­tent such as aca­d­e­m­ic essays and expla­na­tions of unfa­mil­iar top­ics. Others noticed that it author­i­ta­tive­ly mixed in fac­tu­al­ly incor­rect infor­ma­tion that might slip past non-​experts, and won­dered if that might be fixed like any oth­er soft­ware <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>bug.”</p>\n<p>The fun­da­men­tal prob­lem is that an <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>arti­fi­cial intel­li­gence” like ChatGPT is uncon­cerned with the out­side con­se­quences of its use. Unlike humans, it can­not hold its own <a href=\"https://courses.aynrand.org/lexicon/life/\">life as a stan­dard of val­ue</a>. It does not remain <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>alive” through self-​sustaining and self-​generated action. It does not have to be any more or less ratio­nal than its pro­gram­ming to con­tin­ue its exis­tence, not that it <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>cares” about that since it has all the life of an elec­tri­cal switchboard.</p>\n<p>AI can’t <em>know</em> to respect real­i­ty, rea­son, and rights because it has no exis­ten­tial con­nec­tion to those con­cepts. It can only fake it, and it can fail with­out remorse or con­se­quence at any point. In short, <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>arti­fi­cial intel­li­gence” is a red her­ring. Let me know when we’re work­ing on <em>actu­al</em> <em>ethics.</em> Tell me when you can teach a com­put­er (or a human!) pride and shame and every­thing in between.</p>",
                "value": "[I orig­i­nal­ly wrote a short­er ver­sion of this on Mastodon but my host is hav­ing data­base prob­lems so it was lost. I recov­ered it from anoth­er serv­er and am sav­ing it on my blog for posterity.]\nLast week the research lab­o­ra­to­ry start­up OpenAI set the tech­nol­o­gy world ablaze with the debut of ChatGPT, a pro­to­type con­ver­sa­tion­al pro­gram or ​“chat­bot”. It uses a large lan­guage mod­el tuned with machine learn­ing tech­niques to pro­vide answers on a vast vari­ety of sub­jects drawn from books and the World Wide Web, includ­ing Reddit and Wikipedia. Many users and com­men­ta­tors won­dered if its detailed and seem­ing­ly well-​reasoned respons­es could be used in place of human-​written con­tent such as aca­d­e­m­ic essays and expla­na­tions of unfa­mil­iar top­ics. Others noticed that it author­i­ta­tive­ly mixed in fac­tu­al­ly incor­rect infor­ma­tion that might slip past non-​experts, and won­dered if that might be fixed like any oth­er soft­ware ​“bug.”\nThe fun­da­men­tal prob­lem is that an ​“arti­fi­cial intel­li­gence” like ChatGPT is uncon­cerned with the out­side con­se­quences of its use. Unlike humans, it can­not hold its own life as a stan­dard of val­ue. It does not remain ​“alive” through self-​sustaining and self-​generated action. It does not have to be any more or less ratio­nal than its pro­gram­ming to con­tin­ue its exis­tence, not that it ​“cares” about that since it has all the life of an elec­tri­cal switchboard.\nAI can’t know to respect real­i­ty, rea­son, and rights because it has no exis­ten­tial con­nec­tion to those con­cepts. It can only fake it, and it can fail with­out remorse or con­se­quence at any point. In short, ​“arti­fi­cial intel­li­gence” is a red her­ring. Let me know when we’re work­ing on actu­al ethics. Tell me when you can teach a com­put­er (or a human!) pride and shame and every­thing in between."
              }
            ],
            "category": [
              "AI",
              "Ayn Rand",
              "ChatGPT",
              "epistemology",
              "ethics",
              "machine learning",
              "Objectivism",
              "OpenAI",
              "reason",
              "software"
            ],
            "syndication": [
              "https://brid.gy/publish/twitter",
              "https://brid.gy/publish/reddit",
              "https://brid.gy/publish/mastodon",
              "https://fed.brid.gy/"
            ]
          },
          "id": "post-2353"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Perl lightning talk: ​“Don’t Fear map and grep”"
            ],
            "url": [
              "https://phoenixtrap.com/2022/06/24/perl-lightning-talk-dont-fear-map-and-grep/",
              "https://phoenixtrap.com/2022/06/24/perl-lightning-talk-dont-fear-map-and-grep/"
            ],
            "updated": [
              "2022-06-24T16:25:44-05:00"
            ],
            "published": [
              "2022-06-24T16:25:44-05:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "content": [
              {
                "html": "<p>This week’s <a href=\"https://perlconference.us/tprc-2022-hou/\">Perl and Raku Conference 2022</a> in Houston was packed with <a href=\"https://youtube.com/playlist?list=PLA9_Hq3zhoFyOpb-U3DMU7OT93dPUdtpE\">great pre­sen­ta­tions</a>, and I humbly added to them with a five-​ish minute <a href=\"https://perlconference.us/tprc-2022-hou/lightning-talks/\">light­ning talk</a> on two of Perl’s more mis­un­der­stood func­tions: <code><a href=\"https://perldoc.perl.org/functions/map\">map</a></code> and <code><a href=\"https://perldoc.perl.org/functions/grep\">grep</a></code>.</p>\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<span class=\"embed-youtube\" style=\"text-align:center; display: block;\"><iframe loading=\"lazy\" class=\"youtube-player\" width=\"670\" height=\"377\" src=\"https://www.youtube.com/embed/PHdq4QfSxrc?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en-US&amp;autohide=2&amp;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation\"></iframe></span>\n</div>\n<figcaption class=\"wp-element-caption\">Sorry about the <span class=\"push-double\"></span>​<span class=\"pull-double\">”</span>um”s and <span class=\"push-double\"></span>​<span class=\"pull-double\">”</span>ah”s…</figcaption></figure>\n<div class=\"wp-block-file\">\n<object class=\"wp-block-file__embed\" data=\"https://phoenixtrap.com/wp-content/uploads/2022/06/Mark-Gardner-Perl-map-and-grep-TPRC-2022.pdf\" type=\"application/pdf\" style=\"width:100%;height:600px\" aria-label=\"Embed of PDF slides of the the presentation.\"></object><a id=\"wp-block-file--media-1c5e3f33-97f1-4dc0-b9bb-3af276cbe7d6\" href=\"https://phoenixtrap.com/wp-content/uploads/2022/06/Mark-Gardner-Perl-map-and-grep-TPRC-2022.pdf\">PDF slides of the the pre­sen­ta­tion</a><a href=\"https://phoenixtrap.com/wp-content/uploads/2022/06/Mark-Gardner-Perl-map-and-grep-TPRC-2022.pdf\" class=\"wp-block-file__button wp-element-button\" download aria-describedby=\"wp-block-file--media-1c5e3f33-97f1-4dc0-b9bb-3af276cbe7d6\">Download</a>\n</div>\n<p>I’ve writ­ten much about <a href=\"https://phoenixtrap.com/tags/lists\">list pro­cess­ing in Perl</a>, and this talk was based on the fol­low­ing blog posts:</p>\n<ul>\n<li><a href=\"https://phoenixtrap.com/2021/03/16/perl_map_grep/\">Better Perl: Using <code>map</code> and <code>grep</code></a></li>\n<li><a href=\"https://phoenixtrap.com/2021/10/26/better-perl-four-list-processing-best-practices-with-map-grep-and-more/\">Better Perl: Four list pro­cess­ing best prac­tices with <code>map</code>, <code>grep</code>, and more</a></li>\n<li><a href=\"https://phoenixtrap.com/2022/02/10/perl-list-processing-is-for-hashes-too/\">Perl list pro­cess­ing is for hash­es, too</a></li>\n<li><a href=\"https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/\">A list of Perl list pro­cess­ing modules</a></li>\n</ul>\n<p>Overall I loved attend­ing the con­fer­ence, and it real­ly invig­o­rat­ed my par­tic­i­pa­tion in the Perl com­mu­ni­ty. Stay tuned as I resume reg­u­lar posting!</p>\n<h2 id=\"lizraku\">Update for Raku</h2>\n<p><a href=\"https://twitter.com/markjgardner/status/1580186429052755969\">On Twitter I nudged</a> promi­nent Raku hack­er (and recov­ered Perl hack­er) Elizabeth Mattijsen to write about the Raku pro­gram­ming language’s <a href=\"https://docs.raku.org/type/List#routine_map\"><code>map</code></a> and <a href=\"https://docs.raku.org/routine/grep#(List)_routine_grep\"><code>grep</code></a> func­tion­al­i­ty. <a href=\"https://dev.to/lizmat/series/20328\">Check out her five-​part series on DEV.to.</a></p>",
                "value": "This week’s Perl and Raku Conference 2022 in Houston was packed with great pre­sen­ta­tions, and I humbly added to them with a five-​ish minute light­ning talk on two of Perl’s more mis­un­der­stood func­tions: map and grep.\n\n\nSorry about the ​”um”s and ​”ah”s…\nPDF slides of the the pre­sen­ta­tionDownload\nI’ve writ­ten much about list pro­cess­ing in Perl, and this talk was based on the fol­low­ing blog posts:\n\nBetter Perl: Using map and grep\nBetter Perl: Four list pro­cess­ing best prac­tices with map, grep, and more\nPerl list pro­cess­ing is for hash­es, too\nA list of Perl list pro­cess­ing modules\n\nOverall I loved attend­ing the con­fer­ence, and it real­ly invig­o­rat­ed my par­tic­i­pa­tion in the Perl com­mu­ni­ty. Stay tuned as I resume reg­u­lar posting!\nUpdate for Raku\nOn Twitter I nudged promi­nent Raku hack­er (and recov­ered Perl hack­er) Elizabeth Mattijsen to write about the Raku pro­gram­ming language’s map and grep func­tion­al­i­ty. Check out her five-​part series on DEV.to."
              }
            ],
            "category": [
              "conferences",
              "grep",
              "lists",
              "map",
              "meetup",
              "meta",
              "Perl",
              "Raku",
              "RakuLang",
              "The Perl Conference"
            ],
            "syndication": [
              "https://dev.to/mjgardner/perl-lightning-talk-dont-fear-map-and-grep-27gn"
            ]
          },
          "id": "post-2069"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "How much is that BLÅHAJ in the (terminal) window?"
            ],
            "url": [
              "https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/",
              "https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/"
            ],
            "updated": [
              "2022-04-12T09:00:00-05:00"
            ],
            "published": [
              "2022-04-12T09:00:00-05:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/A9FD0189-B379-4B9A-AB36-82CD418C3249-scaled.jpeg?fit=668%2C445&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": "IKEA BLÅHAJ shark toys"
              }
            ],
            "content": [
              {
                "html": "<p><a href=\"https://www.ikea.com/us/en/p/blahaj-soft-toy-shark-90373590/\">IKEA’s toy BLÅHAJ shark</a> has become a <a href=\"https://knowyourmeme.com/memes/subcultures/ikea-blahaj-shark\">beloved Internet icon</a> over the past sev­er­al years. I thought it might be cute to write a lit­tle Perl to get info about it and even dis­play a cud­dly pic­ture right in the ter­mi­nal where I’m run­ning the code. Maybe this will give you some ideas for your own quick web clients. Of course, you could accom­plish all of these things using a pipeline of indi­vid­ual command-​line util­i­ties like <a href=\"https://curl.se/\"><code>curl</code></a>, <a href=\"https://stedolan.github.io/jq/\"><code>jq</code></a>, and <a href=\"https://www.gnu.org/software/coreutils/\">GNU core­uti­ls</a>’ <a href=\"https://www.gnu.org/software/coreutils/manual/html_node/base64-invocation.html\"><code>base64</code></a>. These exam­ples focus on <a href=\"https://perldoc.perl.org/perlglossary#glue-language\">Perl as the glue</a>, though.</p>\n<h2>Warning: dodgy API ahead</h2>\n<p>I haven’t found a publicly-​documented and ‑sup­port­ed offi­cial API for query­ing IKEA prod­uct infor­ma­tion but <a href=\"https://towardsdatascience.com/a-single-line-of-python-code-scraping-dataset-from-webpages-c9d2a8805d61\">oth­ers</a> <a href=\"https://pypi.org/project/ikea-api/\">have</a> decon­struct­ed the company’s web site <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX\">AJAX</a> requests so we can use that instead. The alter­na­tive would be to scrape the IKEA web site direct­ly which, although pos­si­ble, would be more tedious and prone to fail­ure should their design change. An unof­fi­cial API is also unre­li­able but the sim­pler client code is eas­i­er to change should any errors surface.</p>\n<h2>Enter the <a href=\"https://mojolicious.org/\">Mojolicious</a>\n</h2>\n<p>My orig­i­nal goal was to do this in a <a href=\"https://perldoc.perl.org/perlglossary#one-liner\">sin­gle line issued to the <code>perl</code> com­mand</a>, and luck­i­ly the <a href=\"https://docs.mojolicious.org/ojo\">Mojolicious framework’s ojo mod­ule</a> is tailor-​made for such things. By adding a <code>-Mojo</code> switch to the <code>perl</code> com­mand, you get over a dozen quick single-​character func­tions for spin­ning up a quick web appli­ca­tion or, in our case, mak­ing and inter­pret­ing web requests with­out a lot of cer­e­mo­ny. Here’s the start of my one-​line request to the IKEA API for infor­ma­tion on their BLÅHAJ prod­uct, using <a href=\"https://docs.mojolicious.org/ojo#g\">ojo’s <code>g</code> func­tion</a> to per­form an HTTP GET and dis­play­ing the <a href=\"https://json.org/\">JSON</a> from the response body to the terminal.</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -E 'say g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;body'</strong></code></pre>\n<p>This cur­rent­ly returns over 2,400 lines of data, so after read­ing it over I’ll con­vert the response body JSON to a <a href=\"https://perldoc.perl.org/perldsc\">Perl data struc­ture</a> and dump only the main prod­uct infor­ma­tion using <a href=\"https://metacpan.org/pod/ojo#r\">ojo’s <code>r</code> func­tion</a>:</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -E 'say r g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}'</strong>\n{\n  \"availability\" =&gt; [],\n  \"breathTaking\" =&gt; bless( do{\\(my $o = 0)}, 'JSON::PP::Boolean' ),\n  \"colors\" =&gt; [\n    {\n      \"hex\" =&gt; \"0058a3\",\n      \"id\" =&gt; 10007,\n      \"name\" =&gt; \"blue\"\n    },\n    {\n      \"hex\" =&gt; \"ffffff\",\n      \"id\" =&gt; 10156,\n      \"name\" =&gt; \"white\"\n    }\n  ],\n  \"contextualImageUrl\" =&gt; \"https://www.ikea.com/us/en/images/products/blahaj-soft-toy-shark__0877371_pe633608_s5.jpg\",\n  \"currencyCode\" =&gt; \"USD\",\n  \"discount\" =&gt; \"\",\n  \"features\" =&gt; [],\n  \"gprDescription\" =&gt; {\n    \"numberOfVariants\" =&gt; 0,\n    \"variants\" =&gt; []\n  },\n  \"id\" =&gt; 90373590,\n  \"itemMeasureReferenceText\" =&gt; \"39 \\x{bc} \\\"\",\n  \"itemNo\" =&gt; 90373590,\n  \"itemNoGlobal\" =&gt; 30373588,\n  \"itemType\" =&gt; \"ART\",\n  \"lastChance\" =&gt; $VAR1-&gt;{\"breathTaking\"},\n  \"mainImageAlt\" =&gt; \"BL\\x{c5}HAJ Soft toy, shark, 39 \\x{bc} \\\"\",\n  \"mainImageUrl\" =&gt; \"https://www.ikea.com/us/en/images/products/blahaj-soft-toy-shark__0710175_pe727378_s5.jpg\",\n  \"name\" =&gt; \"BL\\x{c5}HAJ\",\n  \"onlineSellable\" =&gt; bless( do{\\(my $o = 1)}, 'JSON::PP::Boolean' ),\n  \"pipUrl\" =&gt; \"https://www.ikea.com/us/en/p/blahaj-soft-toy-shark-90373590/\",\n  \"price\" =&gt; {\n    \"decimals\" =&gt; 99,\n    \"isRegularCurrency\" =&gt; $VAR1-&gt;{\"breathTaking\"},\n    \"prefix\" =&gt; \"\\$\",\n    \"separator\" =&gt; \".\",\n    \"suffix\" =&gt; \"\",\n    \"wholeNumber\" =&gt; 19\n  },\n  \"priceNumeral\" =&gt; \"19.99\",\n  \"quickFacts\" =&gt; [],\n  \"tag\" =&gt; \"NONE\",\n  \"typeName\" =&gt; \"Soft toy\"\n}</code></pre>\n<p>If I just want the price I can do:</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -E 'say g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}-&gt;@{qw(currencyCode priceNumeral)}'</strong>\nUSD19.99</code></pre>\n<p>That <code>-&gt;@{qw(currencyCode priceNumeral)}</code> towards the end uses the <a href=\"https://perldoc.perl.org/perlref#Postfix-Reference-Slicing\">post­fix ref­er­ence slic­ing syn­tax</a> intro­duced <a href=\"https://perldoc.perl.org/perl5200delta#Experimental-Postfix-Dereferencing\">exper­i­men­tal­ly in Perl v5.20</a> and <a href=\"https://perldoc.perl.org/perl5240delta#Postfix-dereferencing-is-no-longer-experimental\">made offi­cial in v5.24</a>. If you’re using an old­er <code>perl</code>, you’d say:</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -E 'say @{g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}}{qw(currencyCode priceNumeral)}'</strong>\nUSD19.99</code></pre>\n<p>I pre­fer the for­mer, though, because it’s eas­i­er to read left-to-right.</p>\n<h2>But I’m not in the United States! Where’s my native currency?</h2>\n<p>You can either replace the <span class=\"push-double\"></span>​<span class=\"pull-double\">”</span><code>us/en</code>” in the URL above or use the <a href=\"https://perldoc.perl.org/I18N::LangTags::Detect\">core I18N::LangTags::Detect mod­ule</a> added in Perl v5.8.5 if you’re real­ly deter­mined to be portable across dif­fer­ent users’ locales. This is real­ly stretch­ing <a href=\"https://en.wikipedia.org/wiki/One-liner_program\">the def­i­n­i­tion of <span class=\"push-double\"></span>​<span class=\"pull-double\">”</span>one-​liner,”</a> though.</p>\n<pre class=\"wp-block-code\"><code>$ <strong>LANG=de_DE.UTF-8 perl -Mojo -MI18N::LangTags::Detect -E 'my @lang = (split /-/, I18N::LangTags::Detect::detect)[1,0]; say g(\"https://sik.search.blue.cdtapps.com/\" . join(\"/\", @lang == 2 ? @lang : (\"us\", \"en\")) . \"/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}-&gt;@{qw(currencyCode priceNumeral)}'</strong>\nEUR27.99</code></pre>\n<h2 id=\"window\">Window dressing</h2>\n<p>It’s hard to envi­sion cud­dling a num­ber, but luck­i­ly the prod­uct infor­ma­tion returned above links to a JPEG file in the <code>mainImageUrl</code> key. My favorite ter­mi­nal app <a href=\"https://iterm2.com/documentation-images.html\">iTerm2 can dis­play images inline</a> from either a file or <a href=\"https://en.wikipedia.org/wiki/Base64\">Base64</a> encod­ed data, so adding an extra HTTP request and <a href=\"https://perldoc.perl.org/MIME::Base64#encode_base64(-%24bytes-)\">encod­ing from the core MIME::Base64 mod­ule</a> yields:</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -MMIME::Base64 -E 'say \"\\c[]1337;File=inline=1;width=100%:\", encode_base64(g(g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl})-&gt;body), \"\\cG\"'</strong></code></pre>\n<figure class=\"wp-block-image size-full\"><img data-attachment-id=\"2027\" data-permalink=\"https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/scr-20220411-lqw/\" data-orig-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=851%2C929&amp;ssl=1\" data-orig-size=\"851,929\" data-comments-opened=\"1\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"SCR-20220411-lqw\" data-image-description data-image-caption data-medium-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=275%2C300&amp;ssl=1\" data-large-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=670%2C731&amp;ssl=1\" decoding=\"async\" width=\"670\" height=\"731\" src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=670%2C731&amp;ssl=1\" alt class=\"wp-image-2027 jetpack-lazy-image\" data-recalc-dims=\"1\" data-lazy-srcset=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?w=851&amp;ssl=1 851w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=275%2C300&amp;ssl=1 275w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=768%2C838&amp;ssl=1 768w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=668%2C729&amp;ssl=1 668w\" data-lazy-sizes=\"(max-width: 670px) 100vw, 670px\" data-lazy-src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=670%2C731&amp;is-pending-load=1#038;ssl=1\" srcset=\"data:image/gif;base64, https://phoenixtrap.com/R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7\"><noscript><img data-lazy-fallback=\"1\" data-attachment-id=\"2027\" data-permalink=\"https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/scr-20220411-lqw/\" data-orig-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=851%2C929&amp;ssl=1\" data-orig-size=\"851,929\" data-comments-opened=\"1\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"SCR-20220411-lqw\" data-image-description data-image-caption data-medium-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=275%2C300&amp;ssl=1\" data-large-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=670%2C731&amp;ssl=1\" decoding=\"async\" loading=\"lazy\" width=\"670\" height=\"731\" src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=670%2C731&amp;ssl=1\" alt class=\"wp-image-2027\" srcset=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?w=851&amp;ssl=1 851w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=275%2C300&amp;ssl=1 275w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=768%2C838&amp;ssl=1 768w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=668%2C729&amp;ssl=1 668w\" sizes=\"(max-width: 670px) 100vw, 670px\" data-recalc-dims=\"1\"></noscript></figure>\n<p>(You could just send the image URL to <a href=\"https://iterm2.com/documentation-utilities.html\">iTerm2’s bun­dled <code>imgcat</code> util­i­ty</a>, but where’s the fun in that?)</p>\n<pre class=\"wp-block-code\"><code>$ <strong>imgcat --url `perl -Mojo -E 'print g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl}'`</strong></code></pre>\n<h2>But I don’t have iTerm2 or a Mac!</h2>\n<p>I got you. At the expense of a num­ber of oth­er depen­den­cies, here’s a ver­sion that will work on any ter­mi­nal that sup­ports <a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\">256-​color mode with ANSI codes</a> using <a href=\"https://metacpan.org/pod/Image::Term256Color\">Image::Term256Color from CPAN</a> and a Unicode font with <a href=\"https://en.wikipedia.org/wiki/Block_Elements?wprov=sfti1\">block char­ac­ters</a>. I’ll also use <a href=\"https://metacpan.org/pod/Term::ReadKey\">Term::ReadKey</a> to size the image for the width of your win­dow. (Again, this stretch­es the def­i­n­i­tion of <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>one-​liner.”)</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -MImage::Term256Color -MTerm::ReadKey -E 'say for Image::Term256Color::convert(g(g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl})-&gt;body, {scale_x =&gt; (GetTerminalSize)[0], utf8 =&gt; 1})'</strong></code></pre>\n<figure class=\"wp-block-image size-full\"><img data-attachment-id=\"2035\" data-permalink=\"https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/scr-20220411-mke/\" data-orig-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=851%2C989&amp;ssl=1\" data-orig-size=\"851,989\" data-comments-opened=\"1\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"SCR-20220411-mke\" data-image-description data-image-caption data-medium-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=258%2C300&amp;ssl=1\" data-large-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=670%2C779&amp;ssl=1\" decoding=\"async\" width=\"670\" height=\"779\" src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=670%2C779&amp;ssl=1\" alt class=\"wp-image-2035 jetpack-lazy-image\" data-recalc-dims=\"1\" data-lazy-srcset=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?w=851&amp;ssl=1 851w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=258%2C300&amp;ssl=1 258w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=768%2C893&amp;ssl=1 768w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=668%2C776&amp;ssl=1 668w\" data-lazy-sizes=\"(max-width: 670px) 100vw, 670px\" data-lazy-src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=670%2C779&amp;is-pending-load=1#038;ssl=1\" srcset=\"data:image/gif;base64, https://phoenixtrap.com/R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7\"><noscript><img data-lazy-fallback=\"1\" data-attachment-id=\"2035\" data-permalink=\"https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/scr-20220411-mke/\" data-orig-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=851%2C989&amp;ssl=1\" data-orig-size=\"851,989\" data-comments-opened=\"1\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"SCR-20220411-mke\" data-image-description data-image-caption data-medium-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=258%2C300&amp;ssl=1\" data-large-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=670%2C779&amp;ssl=1\" decoding=\"async\" loading=\"lazy\" width=\"670\" height=\"779\" src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=670%2C779&amp;ssl=1\" alt class=\"wp-image-2035\" srcset=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?w=851&amp;ssl=1 851w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=258%2C300&amp;ssl=1 258w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=768%2C893&amp;ssl=1 768w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=668%2C776&amp;ssl=1 668w\" sizes=\"(max-width: 670px) 100vw, 670px\" data-recalc-dims=\"1\"></noscript></figure>\n<h2>I hate Mojolicious! Can’t you just use core modules?</h2>\n<p>Fine. Here’s retriev­ing the prod­uct price using <a href=\"https://perldoc.perl.org/HTTP::Tiny\">HTTP::Tiny</a> and the pure-​Perl JSON pars­er <a href=\"https://perldoc.perl.org/JSON::PP\">JSON::PP</a>, which were <a href=\"https://perldoc.perl.org/perl5140delta#New-Modules-and-Pragmata\">added to core in ver­sion 5.14</a>.</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -MHTTP::Tiny -MJSON::PP -E 'say @{decode_json(HTTP::Tiny-&gt;new-&gt;get(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page?types=PRODUCT&amp;q=BLÅHAJ\")-&gt;{content})-&gt;{searchResultPage}{products}{main}{items}[0]{product}}{qw(currencyCode priceNumeral)}'</strong>\nUSD19.99</code></pre>\n<p>Fetching and dis­play­ing a pic­ture of the hug­gable shark using MIME::Base64 or Image::Term256Color <a href=\"https://phoenixtrap.com/#window\">as above</a> is left as an exer­cise to the reader.</p>",
                "value": "IKEA’s toy BLÅHAJ shark has become a beloved Internet icon over the past sev­er­al years. I thought it might be cute to write a lit­tle Perl to get info about it and even dis­play a cud­dly pic­ture right in the ter­mi­nal where I’m run­ning the code. Maybe this will give you some ideas for your own quick web clients. Of course, you could accom­plish all of these things using a pipeline of indi­vid­ual command-​line util­i­ties like curl, jq, and GNU core­uti­ls’ base64. These exam­ples focus on Perl as the glue, though.\nWarning: dodgy API ahead\nI haven’t found a publicly-​documented and ‑sup­port­ed offi­cial API for query­ing IKEA prod­uct infor­ma­tion but oth­ers have decon­struct­ed the company’s web site AJAX requests so we can use that instead. The alter­na­tive would be to scrape the IKEA web site direct­ly which, although pos­si­ble, would be more tedious and prone to fail­ure should their design change. An unof­fi­cial API is also unre­li­able but the sim­pler client code is eas­i­er to change should any errors surface.\nEnter the Mojolicious\nMy orig­i­nal goal was to do this in a sin­gle line issued to the perl com­mand, and luck­i­ly the Mojolicious framework’s ojo mod­ule is tailor-​made for such things. By adding a -Mojo switch to the perl com­mand, you get over a dozen quick single-​character func­tions for spin­ning up a quick web appli­ca­tion or, in our case, mak­ing and inter­pret­ing web requests with­out a lot of cer­e­mo­ny. Here’s the start of my one-​line request to the IKEA API for infor­ma­tion on their BLÅHAJ prod­uct, using ojo’s g func­tion to per­form an HTTP GET and dis­play­ing the JSON from the response body to the terminal.\n$ perl -Mojo -E 'say g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->body'\nThis cur­rent­ly returns over 2,400 lines of data, so after read­ing it over I’ll con­vert the response body JSON to a Perl data struc­ture and dump only the main prod­uct infor­ma­tion using ojo’s r func­tion:\n$ perl -Mojo -E 'say r g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}'\n{\n  \"availability\" => [],\n  \"breathTaking\" => bless( do{\\(my $o = 0)}, 'JSON::PP::Boolean' ),\n  \"colors\" => [\n    {\n      \"hex\" => \"0058a3\",\n      \"id\" => 10007,\n      \"name\" => \"blue\"\n    },\n    {\n      \"hex\" => \"ffffff\",\n      \"id\" => 10156,\n      \"name\" => \"white\"\n    }\n  ],\n  \"contextualImageUrl\" => \"https://www.ikea.com/us/en/images/products/blahaj-soft-toy-shark__0877371_pe633608_s5.jpg\",\n  \"currencyCode\" => \"USD\",\n  \"discount\" => \"\",\n  \"features\" => [],\n  \"gprDescription\" => {\n    \"numberOfVariants\" => 0,\n    \"variants\" => []\n  },\n  \"id\" => 90373590,\n  \"itemMeasureReferenceText\" => \"39 \\x{bc} \\\"\",\n  \"itemNo\" => 90373590,\n  \"itemNoGlobal\" => 30373588,\n  \"itemType\" => \"ART\",\n  \"lastChance\" => $VAR1->{\"breathTaking\"},\n  \"mainImageAlt\" => \"BL\\x{c5}HAJ Soft toy, shark, 39 \\x{bc} \\\"\",\n  \"mainImageUrl\" => \"https://www.ikea.com/us/en/images/products/blahaj-soft-toy-shark__0710175_pe727378_s5.jpg\",\n  \"name\" => \"BL\\x{c5}HAJ\",\n  \"onlineSellable\" => bless( do{\\(my $o = 1)}, 'JSON::PP::Boolean' ),\n  \"pipUrl\" => \"https://www.ikea.com/us/en/p/blahaj-soft-toy-shark-90373590/\",\n  \"price\" => {\n    \"decimals\" => 99,\n    \"isRegularCurrency\" => $VAR1->{\"breathTaking\"},\n    \"prefix\" => \"\\$\",\n    \"separator\" => \".\",\n    \"suffix\" => \"\",\n    \"wholeNumber\" => 19\n  },\n  \"priceNumeral\" => \"19.99\",\n  \"quickFacts\" => [],\n  \"tag\" => \"NONE\",\n  \"typeName\" => \"Soft toy\"\n}\nIf I just want the price I can do:\n$ perl -Mojo -E 'say g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}->@{qw(currencyCode priceNumeral)}'\nUSD19.99\nThat ->@{qw(currencyCode priceNumeral)} towards the end uses the post­fix ref­er­ence slic­ing syn­tax intro­duced exper­i­men­tal­ly in Perl v5.20 and made offi­cial in v5.24. If you’re using an old­er perl, you’d say:\n$ perl -Mojo -E 'say @{g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}}{qw(currencyCode priceNumeral)}'\nUSD19.99\nI pre­fer the for­mer, though, because it’s eas­i­er to read left-to-right.\nBut I’m not in the United States! Where’s my native currency?\nYou can either replace the ​”us/en” in the URL above or use the core I18N::LangTags::Detect mod­ule added in Perl v5.8.5 if you’re real­ly deter­mined to be portable across dif­fer­ent users’ locales. This is real­ly stretch­ing the def­i­n­i­tion of ​”one-​liner,” though.\n$ LANG=de_DE.UTF-8 perl -Mojo -MI18N::LangTags::Detect -E 'my @lang = (split /-/, I18N::LangTags::Detect::detect)[1,0]; say g(\"https://sik.search.blue.cdtapps.com/\" . join(\"/\", @lang == 2 ? @lang : (\"us\", \"en\")) . \"/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}->@{qw(currencyCode priceNumeral)}'\nEUR27.99\nWindow dressing\nIt’s hard to envi­sion cud­dling a num­ber, but luck­i­ly the prod­uct infor­ma­tion returned above links to a JPEG file in the mainImageUrl key. My favorite ter­mi­nal app iTerm2 can dis­play images inline from either a file or Base64 encod­ed data, so adding an extra HTTP request and encod­ing from the core MIME::Base64 mod­ule yields:\n$ perl -Mojo -MMIME::Base64 -E 'say \"\\c[]1337;File=inline=1;width=100%:\", encode_base64(g(g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl})->body), \"\\cG\"'\n    \n(You could just send the image URL to iTerm2’s bun­dled imgcat util­i­ty, but where’s the fun in that?)\n$ imgcat --url `perl -Mojo -E 'print g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl}'`\nBut I don’t have iTerm2 or a Mac!\nI got you. At the expense of a num­ber of oth­er depen­den­cies, here’s a ver­sion that will work on any ter­mi­nal that sup­ports 256-​color mode with ANSI codes using Image::Term256Color from CPAN and a Unicode font with block char­ac­ters. I’ll also use Term::ReadKey to size the image for the width of your win­dow. (Again, this stretch­es the def­i­n­i­tion of ​“one-​liner.”)\n$ perl -Mojo -MImage::Term256Color -MTerm::ReadKey -E 'say for Image::Term256Color::convert(g(g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl})->body, {scale_x => (GetTerminalSize)[0], utf8 => 1})'\n    \nI hate Mojolicious! Can’t you just use core modules?\nFine. Here’s retriev­ing the prod­uct price using HTTP::Tiny and the pure-​Perl JSON pars­er JSON::PP, which were added to core in ver­sion 5.14.\n$ perl -MHTTP::Tiny -MJSON::PP -E 'say @{decode_json(HTTP::Tiny->new->get(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page?types=PRODUCT&q=BLÅHAJ\")->{content})->{searchResultPage}{products}{main}{items}[0]{product}}{qw(currencyCode priceNumeral)}'\nUSD19.99\nFetching and dis­play­ing a pic­ture of the hug­gable shark using MIME::Base64 or Image::Term256Color as above is left as an exer­cise to the reader."
              }
            ],
            "category": [
              "AJAX",
              "ANSI",
              "base64",
              "CPAN",
              "curl",
              "HTTP::Tiny",
              "IKEA",
              "Image::Term256Color",
              "iOS",
              "iPad",
              "iPhone",
              "iTerm2",
              "jq",
              "JSON",
              "JSON::PP",
              "MIME::Base64",
              "Mojolicious",
              "Perl",
              "postfix dereferencing",
              "Term::ReadKey",
              "Unicode",
              "webdev"
            ],
            "syndication": [
              "https://dev.to/mjgardner/how-much-is-that-blahaj-in-the-terminal-window-2fh5"
            ]
          },
          "id": "post-1997"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Perl list processing is for hashes, too"
            ],
            "url": [
              "https://phoenixtrap.com/2022/02/10/perl-list-processing-is-for-hashes-too/",
              "https://phoenixtrap.com/2022/02/10/perl-list-processing-is-for-hashes-too/"
            ],
            "updated": [
              "2022-02-10T09:00:00-06:00"
            ],
            "published": [
              "2022-02-10T09:00:00-06:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/02/pexels-photo-6529924.jpeg?fit=668%2C445&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": "plate of eggs and hash browns"
              }
            ],
            "content": [
              {
                "html": "<p>This month I start­ed a new job at <a href=\"https://www.alertlogic.com/\">Alert Logic</a>, a cyber­se­cu­ri­ty provider with Perl (among many oth­er things) at its beat­ing heart. I’ve been learn­ing a lot, and part of the process has been under­stand­ing the APIs in the code base. To that end, I’ve been writ­ing small test scripts to tease apart data struc­tures, using Perl <a href=\"https://perldoc.perl.org/perlfunc#Functions-for-real-@ARRAYs\">array-​processing</a>, <a href=\"https://perldoc.perl.org/perlfunc#Functions-for-list-data\">list-​processing</a>, and <a href=\"https://perldoc.perl.org/perlfunc#Functions-for-real-%25HASHes\">hash- (i.e., asso­cia­tive array)-processing func­tions</a>.</p>\n<p>I’ve cov­ered <code><a href=\"https://perldoc.perl.org/functions/map\">map</a></code>, <code><a href=\"https://perldoc.perl.org/functions/grep\">grep</a></code>, and friends a <a href=\"https://phoenixtrap.com/2021/03/16/perl_map_grep/\" data-type=\"post\" data-id=\"490\">cou­ple</a> <a href=\"https://phoenixtrap.com/2021/10/26/better-perl-four-list-processing-best-practices-with-map-grep-and-more/\" data-type=\"post\" data-id=\"1454\">times</a> before. <a href=\"https://phoenixtrap.com/2021/10/26/better-perl-four-list-processing-best-practices-with-map-grep-and-more/\">Most recent­ly</a>, I described using <a href=\"https://perldoc.perl.org/List::Util#any\">List::Util’s <code>any</code> func­tion</a> to check if a con­di­tion is true for any item in a list. In the sim­plest case, you can use it to check to see if a giv­en val­ue is in the list at all:</p>\n<pre class=\"wp-block-code\"><code>use feature 'say';\nuse List::Util 'any';\nmy @colors =\n  qw(red orange yellow green blue indigo violet);\nsay 'matched' if any { /^red$/ } @colors;</code></pre>\n<p>However, if you’re going to be doing this a lot with arbi­trary strings, <a href=\"https://perldoc.perl.org/perlfaq4#How-can-I-tell-whether-a-certain-element-is-contained-in-a-list-or-array?\">Perl FAQ sec­tion 4 advis­es</a> turn­ing the array into the keys of a hash and then check­ing for mem­ber­ship there. For exam­ple, here’s a sim­ple script to check if the col­ors input (either from the key­board or from files passed as argu­ments) are in the rainbow:</p>\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env perl\n\nuse v5.22; # introduced &lt;&lt;&gt;&gt; for safe opening of arguments\nuse warnings;\n \nmy %in_colors = map {$_ =&gt; 1}\n  qw(red orange yellow green blue indigo violet);\n\nwhile (&lt;&lt;&gt;&gt;) {\n  chomp;\n  say \"$_ is in the rainbow\" if $in_colors{$_};\n}</code></pre>\n<p>List::Util has a <a href=\"https://perldoc.perl.org/List::Util#KEY/VALUE-PAIR-LIST-FUNCTIONS\">bunch of func­tions for pro­cess­ing lists of pairs</a> that I’ve found use­ful when paw­ing through hash­es. <code><a href=\"https://perldoc.perl.org/List::Util#pairgrep\">pairgrep</a></code>, for exam­ple, acts just like <code>grep</code> but instead assigns <code>$a</code> and <code>$b</code> to each key and val­ue passed in and returns the result­ing pairs that match. I’ve used it as a quick way to search for hash entries match­ing cer­tain val­ue conditions:</p>\n<pre class=\"wp-block-code\"><code>use List::Util 'pairgrep';\nmy %numbers = (zero =&gt; 0, one =&gt; 1, two =&gt; 2, three =&gt; 3);\nmy %odds = pairgrep {$b % 2} %numbers;</code></pre>\n<p>Sure, you could do this by invok­ing a mix of plain <code>grep</code>, <code><a href=\"https://perldoc.perl.org/functions/keys\">keys</a></code>, and a <a href=\"https://perldoc.perl.org/perldata#Key/Value-Hash-Slices\">hash slice</a>, but it’s nois­i­er and more repetitive:</p>\n<pre class=\"wp-block-code\"><code>use v5.20; # for key/value hash slice \nmy %odds = %numbers{grep {$numbers{$_} % 2} keys %numbers};</code></pre>\n<p><code>pairgrep</code><span class=\"push-single\"></span>​<span class=\"pull-single\">’</span>s com­piled C‑based <a href=\"https://perldoc.perl.org/perlxs\">XS</a> code can also be faster, as evi­denced by this <a href=\"https://perldoc.perl.org/Benchmark\">Benchmark</a> script that works through a hash made of the <a href=\"https://en.wikipedia.org/wiki/Words_(Unix)\">Unix <code>words</code> file</a> (479,828 entries on my machine):</p>\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env perl\n\nuse v5.20;\nuse warnings;\nuse List::Util 'pairgrep';\nuse Benchmark 'cmpthese';\n\nmy (%words, $count);\nopen my $fh, '&lt;', '/usr/share/dict/words'\n  or die \"can't open words: $!\";\nwhile (&lt;$fh&gt;) {\n  chomp;\n  $words{$_} = $count++;\n}\nclose $fh;\n\ncmpthese(100, {\n  grep =&gt; sub {\n    my %odds = %words{grep {$words{$_} % 2} keys %words};\n  },\n  pairgrep =&gt; sub {\n    my %odds = pairgrep {$b % 2} %words;\n  },\n} );</code></pre>\n<p>Benchmark out­put:</p>\n<pre class=\"wp-block-code\"><code>           Rate     grep pairgrep\ngrep     1.47/s       --     -20%\npairgrep 1.84/s      25%       --</code></pre>\n<hr class=\"wp-block-separator\">\n<p>In gen­er­al, I urge you to work through the <a href=\"https://phoenixtrap.com/2021/10/12/read-the-fantastic-manual-how-to-get-the-most-out-of-perl-documentation/\" data-type=\"post\" data-id=\"1385\">Perl doc­u­men­ta­tion</a><span class=\"push-single\"></span>​<span class=\"pull-single\">’</span>s tuto­ri­als on <a href=\"https://perldoc.perl.org/perlreftut\">ref­er­ences</a>, <a href=\"https://perldoc.perl.org/perllol\">lists of lists</a>, the <a href=\"https://perldoc.perl.org/perldsc\">data struc­tures cook­book</a>, and the FAQs on <a href=\"https://perldoc.perl.org/perlfaq4#Data:-Arrays\">array</a> and <a href=\"https://perldoc.perl.org/perlfaq4#Data:-Hashes-(Associative-Arrays)\">hash manip­u­la­tion</a>. Then dip into the var­i­ous <a href=\"https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/\" data-type=\"post\" data-id=\"692\">list-​processing mod­ules</a> (espe­cial­ly the includ­ed <a href=\"https://perldoc.perl.org/List::Util\">List::Util</a> and CPAN’s <a href=\"https://metacpan.org/pod/List::SomeUtils\">List::SomeUtils</a>) for ready-​made func­tions for com­mon oper­a­tions. You’ll find a wealth of tech­niques for cre­at­ing, man­ag­ing, and pro­cess­ing the data struc­tures that your pro­grams need.</p>",
                "value": "This month I start­ed a new job at Alert Logic, a cyber­se­cu­ri­ty provider with Perl (among many oth­er things) at its beat­ing heart. I’ve been learn­ing a lot, and part of the process has been under­stand­ing the APIs in the code base. To that end, I’ve been writ­ing small test scripts to tease apart data struc­tures, using Perl array-​processing, list-​processing, and hash- (i.e., asso­cia­tive array)-processing func­tions.\nI’ve cov­ered map, grep, and friends a cou­ple times before. Most recent­ly, I described using List::Util’s any func­tion to check if a con­di­tion is true for any item in a list. In the sim­plest case, you can use it to check to see if a giv­en val­ue is in the list at all:\nuse feature 'say';\nuse List::Util 'any';\nmy @colors =\n  qw(red orange yellow green blue indigo violet);\nsay 'matched' if any { /^red$/ } @colors;\nHowever, if you’re going to be doing this a lot with arbi­trary strings, Perl FAQ sec­tion 4 advis­es turn­ing the array into the keys of a hash and then check­ing for mem­ber­ship there. For exam­ple, here’s a sim­ple script to check if the col­ors input (either from the key­board or from files passed as argu­ments) are in the rainbow:\n#!/usr/bin/env perl\n\nuse v5.22; # introduced <<>> for safe opening of arguments\nuse warnings;\n \nmy %in_colors = map {$_ => 1}\n  qw(red orange yellow green blue indigo violet);\n\nwhile (<<>>) {\n  chomp;\n  say \"$_ is in the rainbow\" if $in_colors{$_};\n}\nList::Util has a bunch of func­tions for pro­cess­ing lists of pairs that I’ve found use­ful when paw­ing through hash­es. pairgrep, for exam­ple, acts just like grep but instead assigns $a and $b to each key and val­ue passed in and returns the result­ing pairs that match. I’ve used it as a quick way to search for hash entries match­ing cer­tain val­ue conditions:\nuse List::Util 'pairgrep';\nmy %numbers = (zero => 0, one => 1, two => 2, three => 3);\nmy %odds = pairgrep {$b % 2} %numbers;\nSure, you could do this by invok­ing a mix of plain grep, keys, and a hash slice, but it’s nois­i­er and more repetitive:\nuse v5.20; # for key/value hash slice \nmy %odds = %numbers{grep {$numbers{$_} % 2} keys %numbers};\npairgrep​’s com­piled C‑based XS code can also be faster, as evi­denced by this Benchmark script that works through a hash made of the Unix words file (479,828 entries on my machine):\n#!/usr/bin/env perl\n\nuse v5.20;\nuse warnings;\nuse List::Util 'pairgrep';\nuse Benchmark 'cmpthese';\n\nmy (%words, $count);\nopen my $fh, '<', '/usr/share/dict/words'\n  or die \"can't open words: $!\";\nwhile (<$fh>) {\n  chomp;\n  $words{$_} = $count++;\n}\nclose $fh;\n\ncmpthese(100, {\n  grep => sub {\n    my %odds = %words{grep {$words{$_} % 2} keys %words};\n  },\n  pairgrep => sub {\n    my %odds = pairgrep {$b % 2} %words;\n  },\n} );\nBenchmark out­put:\n           Rate     grep pairgrep\ngrep     1.47/s       --     -20%\npairgrep 1.84/s      25%       --\n\nIn gen­er­al, I urge you to work through the Perl doc­u­men­ta­tion​’s tuto­ri­als on ref­er­ences, lists of lists, the data struc­tures cook­book, and the FAQs on array and hash manip­u­la­tion. Then dip into the var­i­ous list-​processing mod­ules (espe­cial­ly the includ­ed List::Util and CPAN’s List::SomeUtils) for ready-​made func­tions for com­mon oper­a­tions. You’ll find a wealth of tech­niques for cre­at­ing, man­ag­ing, and pro­cess­ing the data struc­tures that your pro­grams need."
              }
            ],
            "category": [
              "any",
              "Benchmark",
              "CPAN",
              "grep",
              "hashes",
              "keys",
              "List::SomeUtils",
              "List::Util",
              "lists",
              "map",
              "pairgrep",
              "Perl",
              "work"
            ],
            "syndication": [
              "https://dzone.com/articles/perl-list-processing-is-for-hashes-too",
              "https://medium.com/codex/perl-list-processing-is-for-hashes-too-2bd4e2497f01",
              "https://dev.to/mjgardner/perl-list-processing-is-for-hashes-too-2ol8"
            ]
          },
          "id": "post-1963"
        }
      ]
    }
  ],
  "rels": {
    "profile": [
      "https://microformats.org/profile/specs",
      "https://microformats.org/profile/hatom"
    ],
    "dns-prefetch": [
      "https://stats.wp.com/",
      "https://js.stripe.com/",
      "https://secure.gravatar.com/",
      "https://www.googletagmanager.com/",
      "https://jetpack.wordpress.com/",
      "https://s0.wp.com/",
      "https://public-api.wordpress.com/",
      "https://0.gravatar.com/",
      "https://1.gravatar.com/",
      "https://2.gravatar.com/",
      "https://widgets.wp.com/",
      "https://i0.wp.com/",
      "https://c0.wp.com/"
    ],
    "alternate": [
      "https://phoenixtrap.com/feed/",
      "https://phoenixtrap.com/comments/feed/",
      "https://phoenixtrap.com/feed/atom/",
      "https://phoenixtrap.com/comments/feed/atom/",
      "https://phoenixtrap.com/type/standard/feed/",
      "https://phoenixtrap.com/type/aside/feed/",
      "https://phoenixtrap.com/type/chat/feed/",
      "https://phoenixtrap.com/type/gallery/feed/",
      "https://phoenixtrap.com/type/link/feed/",
      "https://phoenixtrap.com/type/image/feed/",
      "https://phoenixtrap.com/type/quote/feed/",
      "https://phoenixtrap.com/type/status/feed/",
      "https://phoenixtrap.com/type/video/feed/",
      "https://phoenixtrap.com/type/audio/feed/"
    ],
    "stylesheet": [
      "https://c0.wp.com/c/6.1.1/wp-includes/css/dist/block-library/style.min.css",
      "https://c0.wp.com/c/6.1.1/wp-includes/js/mediaelement/mediaelementplayer-legacy.min.css",
      "https://c0.wp.com/c/6.1.1/wp-includes/js/mediaelement/wp-mediaelement.min.css",
      "https://phoenixtrap.com/wp-content/plugins/coblocks/dist/style-coblocks-1.css?ver=2.25.5",
      "https://phoenixtrap.com/wp-content/plugins/coil-web-monetization/dist/blocks.style.build.min.css?ver=2.0.2",
      "https://c0.wp.com/c/6.1.1/wp-includes/css/classic-themes.min.css",
      "https://c0.wp.com/c/6.1.1/wp-includes/css/dist/components/style.min.css",
      "https://phoenixtrap.com/wp-content/plugins/coblocks/includes/Dependencies/GoDaddy/Styles/build/latest.css?ver=2.0.2",
      "https://phoenixtrap.com/wp-content/plugins/coil-web-monetization/assets/css/messages/coil.min.css?ver=2.0.2",
      "https://phoenixtrap.com/wp-content/plugins/indieweb/static/css/indieweb.css?ver=3.4.7",
      "https://phoenixtrap.com/wp-content/plugins/tip-jar-wp/includes/frontend/css/build/tip-jar-wp.css?ver=2.0.0",
      "https://phoenixtrap.com/wp-content/plugins/tip-jar-wp/assets/images/flags/flags.min.css?ver=2.0.0",
      "https://phoenixtrap.com/wp-content/plugins/semantic-linkbacks/css/semantic-linkbacks.css?ver=3.10.3",
      "https://phoenixtrap.com/wp-content/themes/sempress/style.css?ver=1.7.0",
      "https://phoenixtrap.com/wp-content/themes/sempress-child/style.css?ver=1.0.0",
      "https://c0.wp.com/p/jetpack/11.6/css/jetpack.css",
      "https://phoenixtrap.com/wp-content/plugins/jetpack/_inc/blocks/instagram-gallery/view.css?minify=false&ver=11.6",
      "https://phoenixtrap.com/wp-content/plugins/jetpack/_inc/blocks/subscriptions/view.css?minify=false&ver=11.6"
    ],
    "https://api.w.org/": [
      "https://phoenixtrap.com/wp-json/"
    ],
    "EditURI": [
      "https://phoenixtrap.com/xmlrpc.php?rsd"
    ],
    "authorization_endpoint": [
      "https://phoenixtrap.com/wp-json/indieauth/1.0/auth"
    ],
    "token_endpoint": [
      "https://phoenixtrap.com/wp-json/indieauth/1.0/token"
    ],
    "indieauth-metadata": [
      "https://phoenixtrap.com/wp-json/indieauth/1.0/metadata"
    ],
    "monetization": [
      "https://ilp.uphold.com/zy4NbUXE9Xwn"
    ],
    "friends-base-url": [
      "https://phoenixtrap.com/wp-json/friends/v1"
    ],
    "me": [
      "https://github.com/mjgardner",
      "https://twitter.com/markjgardner",
      "https://www.facebook.com/mjgardner",
      "https://micro.blog/mjg",
      "https://www.instagram.com/mjgardner",
      "https://www.flickr.com/people/mjgardner",
      "https://social.sdf.org/@mjgardner",
      "https://www.linkedin.com/in/mjgardner",
      "https://reddit.com/user/mjgardner",
      "https://keyoxide.org/4dadfefe8e4ad0f92bcbbb8142f3ca898cb08a45",
      "https://keybase.io/mjgardner",
      "https://www.last.fm/user/mjgardner",
      "https://www.youtube.com/channel/UCo-bgiroS9CMQzfA_5r5Z0A/about",
      "https://www.goodreads.com/user/show/5299642-mark",
      "https://phoenixtrap.com/cdn-cgi/l/email-protection#0f6265684f7f67606a6166777b7d6e7f216c6062"
    ],
    "pgpkey": [
      "https://phoenixtrap.com/.well-known/pka/mjg_pubkey_8CB08A45.txt"
    ],
    "icon": [
      "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=32%2C32&ssl=1",
      "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=192%2C192&ssl=1"
    ],
    "apple-touch-icon": [
      "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=180%2C180&ssl=1"
    ],
    "micropub_media": [
      "https://phoenixtrap.com/wp-json/micropub/1.0/media"
    ],
    "micropub": [
      "https://phoenixtrap.com/wp-json/micropub/1.0/endpoint"
    ],
    "webmention": [
      "https://phoenixtrap.com/wp-json/webmention/1.0/endpoint"
    ],
    "http://webmention.org/": [
      "https://phoenixtrap.com/wp-json/webmention/1.0/endpoint"
    ],
    "home": [
      "https://phoenixtrap.com/"
    ],
    "prev": [
      "https://phoenixtrap.com/page/2/"
    ],
    "bookmark": [
      "https://phoenixtrap.com/2022/12/12/ai-blog-destroy-seo/",
      "https://phoenixtrap.com/2022/12/09/a-brief-note-on-chatgpt-and-artificial-intelligence/",
      "https://phoenixtrap.com/2022/06/24/perl-lightning-talk-dont-fear-map-and-grep/",
      "https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/",
      "https://phoenixtrap.com/2022/02/10/perl-list-processing-is-for-hashes-too/"
    ],
    "author": [
      "https://phoenixtrap.com/"
    ],
    "category": [
      "https://phoenixtrap.com/category/uncategorized/",
      "https://phoenixtrap.com/category/news/",
      "https://phoenixtrap.com/category/philosophy/",
      "https://phoenixtrap.com/category/programming/"
    ],
    "tag": [
      "https://phoenixtrap.com/category/uncategorized/",
      "https://phoenixtrap.com/tag/ai/",
      "https://phoenixtrap.com/tag/blogging/",
      "https://phoenixtrap.com/tag/chatgpt/",
      "https://phoenixtrap.com/tag/machine-learning/",
      "https://phoenixtrap.com/tag/openai/",
      "https://phoenixtrap.com/tag/seo/",
      "https://phoenixtrap.com/tag/webdev/",
      "https://phoenixtrap.com/category/news/",
      "https://phoenixtrap.com/category/philosophy/",
      "https://phoenixtrap.com/tag/ayn-rand/",
      "https://phoenixtrap.com/tag/epistemology/",
      "https://phoenixtrap.com/tag/ethics/",
      "https://phoenixtrap.com/tag/objectivism/",
      "https://phoenixtrap.com/tag/reason/",
      "https://phoenixtrap.com/tag/software/",
      "https://phoenixtrap.com/category/programming/",
      "https://phoenixtrap.com/tag/conferences/",
      "https://phoenixtrap.com/tag/grep/",
      "https://phoenixtrap.com/tag/lists/",
      "https://phoenixtrap.com/tag/map/",
      "https://phoenixtrap.com/tag/meetup/",
      "https://phoenixtrap.com/tag/meta/",
      "https://phoenixtrap.com/tag/perl/",
      "https://phoenixtrap.com/tag/raku/",
      "https://phoenixtrap.com/tag/rakulang/",
      "https://phoenixtrap.com/tag/the-perl-conference/",
      "https://phoenixtrap.com/tag/ajax/",
      "https://phoenixtrap.com/tag/ansi/",
      "https://phoenixtrap.com/tag/base64/",
      "https://phoenixtrap.com/tag/cpan/",
      "https://phoenixtrap.com/tag/curl/",
      "https://phoenixtrap.com/tag/httptiny/",
      "https://phoenixtrap.com/tag/ikea/",
      "https://phoenixtrap.com/tag/imageterm256color/",
      "https://phoenixtrap.com/tag/ios/",
      "https://phoenixtrap.com/tag/ipad/",
      "https://phoenixtrap.com/tag/iphone/",
      "https://phoenixtrap.com/tag/iterm2/",
      "https://phoenixtrap.com/tag/jq/",
      "https://phoenixtrap.com/tag/json/",
      "https://phoenixtrap.com/tag/jsonpp/",
      "https://phoenixtrap.com/tag/mimebase64/",
      "https://phoenixtrap.com/tag/mojolicious/",
      "https://phoenixtrap.com/tag/postfix-dereferencing/",
      "https://phoenixtrap.com/tag/termreadkey/",
      "https://phoenixtrap.com/tag/unicode/",
      "https://phoenixtrap.com/tag/any/",
      "https://phoenixtrap.com/tag/benchmark/",
      "https://phoenixtrap.com/tag/hashes/",
      "https://phoenixtrap.com/tag/keys/",
      "https://phoenixtrap.com/tag/listsomeutils/",
      "https://phoenixtrap.com/tag/listutil/",
      "https://phoenixtrap.com/tag/pairgrep/",
      "https://phoenixtrap.com/tag/work/"
    ],
    "noopener": [
      "https://www.instagram.com/p/CmspNVsO1I9/",
      "https://www.instagram.com/p/CmruiEEOZBY/",
      "https://www.instagram.com/p/Cmp9Kpqu54U/",
      "https://www.instagram.com/p/Cmp6Ht6NL24/",
      "https://www.instagram.com/p/CmphSL2rprx/",
      "https://www.instagram.com/p/CmdwScwOqpU/",
      "https://www.instagram.com/p/CmWsCr0pDrG/",
      "https://www.instagram.com/p/CmWA5LuOgB4/",
      "https://www.instagram.com/p/CmV2Foiu3Yd/"
    ],
    "noreferrer": [
      "https://www.instagram.com/p/CmspNVsO1I9/",
      "https://www.instagram.com/p/CmruiEEOZBY/",
      "https://www.instagram.com/p/Cmp9Kpqu54U/",
      "https://www.instagram.com/p/Cmp6Ht6NL24/",
      "https://www.instagram.com/p/CmphSL2rprx/",
      "https://www.instagram.com/p/CmdwScwOqpU/",
      "https://www.instagram.com/p/CmWsCr0pDrG/",
      "https://www.instagram.com/p/CmWA5LuOgB4/",
      "https://www.instagram.com/p/CmV2Foiu3Yd/"
    ],
    "generator": [
      "https://wordpress.org/"
    ]
  },
  "rel-urls": {
    "https://microformats.org/profile/specs": {
      "rels": [
        "profile"
      ]
    },
    "https://microformats.org/profile/hatom": {
      "rels": [
        "profile"
      ]
    },
    "https://stats.wp.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://js.stripe.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://secure.gravatar.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://www.googletagmanager.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://jetpack.wordpress.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://s0.wp.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://public-api.wordpress.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://0.gravatar.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://1.gravatar.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://2.gravatar.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://widgets.wp.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://i0.wp.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://c0.wp.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://phoenixtrap.com/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Feed",
      "type": "application/rss+xml"
    },
    "https://phoenixtrap.com/comments/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Comments Feed",
      "type": "application/rss+xml"
    },
    "https://c0.wp.com/c/6.1.1/wp-includes/css/dist/block-library/style.min.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://c0.wp.com/c/6.1.1/wp-includes/js/mediaelement/mediaelementplayer-legacy.min.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://c0.wp.com/c/6.1.1/wp-includes/js/mediaelement/wp-mediaelement.min.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/coblocks/dist/style-coblocks-1.css?ver=2.25.5": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/coil-web-monetization/dist/blocks.style.build.min.css?ver=2.0.2": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://c0.wp.com/c/6.1.1/wp-includes/css/classic-themes.min.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://c0.wp.com/c/6.1.1/wp-includes/css/dist/components/style.min.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/coblocks/includes/Dependencies/GoDaddy/Styles/build/latest.css?ver=2.0.2": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/coil-web-monetization/assets/css/messages/coil.min.css?ver=2.0.2": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/indieweb/static/css/indieweb.css?ver=3.4.7": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/tip-jar-wp/includes/frontend/css/build/tip-jar-wp.css?ver=2.0.0": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/tip-jar-wp/assets/images/flags/flags.min.css?ver=2.0.0": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/semantic-linkbacks/css/semantic-linkbacks.css?ver=3.10.3": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/themes/sempress/style.css?ver=1.7.0": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/themes/sempress-child/style.css?ver=1.0.0": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://c0.wp.com/p/jetpack/11.6/css/jetpack.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-json/": {
      "rels": [
        "https://api.w.org/"
      ]
    },
    "https://phoenixtrap.com/xmlrpc.php?rsd": {
      "rels": [
        "EditURI"
      ],
      "title": "RSD",
      "type": "application/rsd+xml"
    },
    "https://phoenixtrap.com/feed/atom/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap Atom Feed",
      "type": "application/atom+xml"
    },
    "https://phoenixtrap.com/comments/feed/atom/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap Atom Comments Feed",
      "type": "application/atom+xml"
    },
    "https://phoenixtrap.com/wp-json/indieauth/1.0/auth": {
      "rels": [
        "authorization_endpoint"
      ]
    },
    "https://phoenixtrap.com/wp-json/indieauth/1.0/token": {
      "rels": [
        "token_endpoint"
      ]
    },
    "https://phoenixtrap.com/wp-json/indieauth/1.0/metadata": {
      "rels": [
        "indieauth-metadata"
      ]
    },
    "https://ilp.uphold.com/zy4NbUXE9Xwn": {
      "rels": [
        "monetization"
      ]
    },
    "https://phoenixtrap.com/wp-json/friends/v1": {
      "rels": [
        "friends-base-url"
      ]
    },
    "https://phoenixtrap.com/type/standard/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Standard Feed",
      "type": "application/rss+xml"
    },
    "https://phoenixtrap.com/type/aside/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Aside Feed",
      "type": "application/rss+xml"
    },
    "https://phoenixtrap.com/type/chat/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Chat Feed",
      "type": "application/rss+xml"
    },
    "https://phoenixtrap.com/type/gallery/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Gallery Feed",
      "type": "application/rss+xml"
    },
    "https://phoenixtrap.com/type/link/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Link Feed",
      "type": "application/rss+xml"
    },
    "https://phoenixtrap.com/type/image/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Image Feed",
      "type": "application/rss+xml"
    },
    "https://phoenixtrap.com/type/quote/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Quote Feed",
      "type": "application/rss+xml"
    },
    "https://phoenixtrap.com/type/status/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Status Feed",
      "type": "application/rss+xml"
    },
    "https://phoenixtrap.com/type/video/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Video Feed",
      "type": "application/rss+xml"
    },
    "https://phoenixtrap.com/type/audio/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Audio Feed",
      "type": "application/rss+xml"
    },
    "https://github.com/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://twitter.com/markjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://www.facebook.com/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://micro.blog/mjg": {
      "rels": [
        "me"
      ]
    },
    "https://www.instagram.com/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://www.flickr.com/people/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://social.sdf.org/@mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://www.linkedin.com/in/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://reddit.com/user/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://keyoxide.org/4dadfefe8e4ad0f92bcbbb8142f3ca898cb08a45": {
      "rels": [
        "me"
      ]
    },
    "https://keybase.io/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://www.last.fm/user/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://www.youtube.com/channel/UCo-bgiroS9CMQzfA_5r5Z0A/about": {
      "rels": [
        "me"
      ]
    },
    "https://www.goodreads.com/user/show/5299642-mark": {
      "rels": [
        "me"
      ]
    },
    "https://phoenixtrap.com/.well-known/pka/mjg_pubkey_8CB08A45.txt": {
      "rels": [
        "pgpkey"
      ]
    },
    "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=32%2C32&ssl=1": {
      "rels": [
        "icon"
      ]
    },
    "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=192%2C192&ssl=1": {
      "rels": [
        "icon"
      ]
    },
    "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=180%2C180&ssl=1": {
      "rels": [
        "apple-touch-icon"
      ]
    },
    "https://phoenixtrap.com/wp-json/micropub/1.0/media": {
      "rels": [
        "micropub_media"
      ]
    },
    "https://phoenixtrap.com/wp-json/micropub/1.0/endpoint": {
      "rels": [
        "micropub"
      ]
    },
    "https://phoenixtrap.com/wp-json/webmention/1.0/endpoint": {
      "rels": [
        "webmention"
      ]
    },
    "https://phoenixtrap.com/": {
      "rels": [
        "home"
      ],
      "title": "The Phoenix Trap",
      "text": "The Phoenix Trap"
    },
    "https://phoenixtrap.com/page/2/": {
      "rels": [
        "prev"
      ],
      "text": "← Older posts"
    },
    "https://phoenixtrap.com/2022/12/12/ai-blog-destroy-seo/": {
      "rels": [
        "bookmark"
      ],
      "title": "12:45 am",
      "text": "December 12, 2022"
    },
    "https://phoenixtrap.com/category/uncategorized/": {
      "rels": [
        "category",
        "tag"
      ],
      "text": "Uncategorized"
    },
    "https://phoenixtrap.com/tag/ai/": {
      "rels": [
        "tag"
      ],
      "text": "AI"
    },
    "https://phoenixtrap.com/tag/blogging/": {
      "rels": [
        "tag"
      ],
      "text": "blogging"
    },
    "https://phoenixtrap.com/tag/chatgpt/": {
      "rels": [
        "tag"
      ],
      "text": "ChatGPT"
    },
    "https://phoenixtrap.com/tag/machine-learning/": {
      "rels": [
        "tag"
      ],
      "text": "machine learning"
    },
    "https://phoenixtrap.com/tag/openai/": {
      "rels": [
        "tag"
      ],
      "text": "OpenAI"
    },
    "https://phoenixtrap.com/tag/seo/": {
      "rels": [
        "tag"
      ],
      "text": "SEO"
    },
    "https://phoenixtrap.com/tag/webdev/": {
      "rels": [
        "tag"
      ],
      "text": "webdev"
    },
    "https://phoenixtrap.com/2022/12/09/a-brief-note-on-chatgpt-and-artificial-intelligence/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to A brief note on ChatGPT and ​“artificial intelligence”",
      "text": "A brief note on ChatGPT and ​“artificial intelligence”"
    },
    "https://phoenixtrap.com/category/news/": {
      "rels": [
        "category",
        "tag"
      ],
      "text": "News"
    },
    "https://phoenixtrap.com/category/philosophy/": {
      "rels": [
        "category",
        "tag"
      ],
      "text": "Philosophy"
    },
    "https://phoenixtrap.com/tag/ayn-rand/": {
      "rels": [
        "tag"
      ],
      "text": "Ayn Rand"
    },
    "https://phoenixtrap.com/tag/epistemology/": {
      "rels": [
        "tag"
      ],
      "text": "epistemology"
    },
    "https://phoenixtrap.com/tag/ethics/": {
      "rels": [
        "tag"
      ],
      "text": "ethics"
    },
    "https://phoenixtrap.com/tag/objectivism/": {
      "rels": [
        "tag"
      ],
      "text": "Objectivism"
    },
    "https://phoenixtrap.com/tag/reason/": {
      "rels": [
        "tag"
      ],
      "text": "reason"
    },
    "https://phoenixtrap.com/tag/software/": {
      "rels": [
        "tag"
      ],
      "text": "software"
    },
    "https://phoenixtrap.com/2022/06/24/perl-lightning-talk-dont-fear-map-and-grep/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to Perl lightning talk: ​“Don’t Fear map and grep”",
      "text": "Perl lightning talk: ​“Don’t Fear map and grep”"
    },
    "https://phoenixtrap.com/category/programming/": {
      "rels": [
        "category",
        "tag"
      ],
      "text": "Programming"
    },
    "https://phoenixtrap.com/tag/conferences/": {
      "rels": [
        "tag"
      ],
      "text": "conferences"
    },
    "https://phoenixtrap.com/tag/grep/": {
      "rels": [
        "tag"
      ],
      "text": "grep"
    },
    "https://phoenixtrap.com/tag/lists/": {
      "rels": [
        "tag"
      ],
      "text": "lists"
    },
    "https://phoenixtrap.com/tag/map/": {
      "rels": [
        "tag"
      ],
      "text": "map"
    },
    "https://phoenixtrap.com/tag/meetup/": {
      "rels": [
        "tag"
      ],
      "text": "meetup"
    },
    "https://phoenixtrap.com/tag/meta/": {
      "rels": [
        "tag"
      ],
      "text": "meta"
    },
    "https://phoenixtrap.com/tag/perl/": {
      "rels": [
        "tag"
      ],
      "text": "Perl"
    },
    "https://phoenixtrap.com/tag/raku/": {
      "rels": [
        "tag"
      ],
      "text": "Raku"
    },
    "https://phoenixtrap.com/tag/rakulang/": {
      "rels": [
        "tag"
      ],
      "text": "RakuLang"
    },
    "https://phoenixtrap.com/tag/the-perl-conference/": {
      "rels": [
        "tag"
      ],
      "text": "The Perl Conference"
    },
    "https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to How much is that BLÅHAJ in the (terminal) window?",
      "text": "How much is that BLÅHAJ in the (terminal) window?"
    },
    "https://phoenixtrap.com/tag/ajax/": {
      "rels": [
        "tag"
      ],
      "text": "AJAX"
    },
    "https://phoenixtrap.com/tag/ansi/": {
      "rels": [
        "tag"
      ],
      "text": "ANSI"
    },
    "https://phoenixtrap.com/tag/base64/": {
      "rels": [
        "tag"
      ],
      "text": "base64"
    },
    "https://phoenixtrap.com/tag/cpan/": {
      "rels": [
        "tag"
      ],
      "text": "CPAN"
    },
    "https://phoenixtrap.com/tag/curl/": {
      "rels": [
        "tag"
      ],
      "text": "curl"
    },
    "https://phoenixtrap.com/tag/httptiny/": {
      "rels": [
        "tag"
      ],
      "text": "HTTP::Tiny"
    },
    "https://phoenixtrap.com/tag/ikea/": {
      "rels": [
        "tag"
      ],
      "text": "IKEA"
    },
    "https://phoenixtrap.com/tag/imageterm256color/": {
      "rels": [
        "tag"
      ],
      "text": "Image::Term256Color"
    },
    "https://phoenixtrap.com/tag/ios/": {
      "rels": [
        "tag"
      ],
      "text": "iOS"
    },
    "https://phoenixtrap.com/tag/ipad/": {
      "rels": [
        "tag"
      ],
      "text": "iPad"
    },
    "https://phoenixtrap.com/tag/iphone/": {
      "rels": [
        "tag"
      ],
      "text": "iPhone"
    },
    "https://phoenixtrap.com/tag/iterm2/": {
      "rels": [
        "tag"
      ],
      "text": "iTerm2"
    },
    "https://phoenixtrap.com/tag/jq/": {
      "rels": [
        "tag"
      ],
      "text": "jq"
    },
    "https://phoenixtrap.com/tag/json/": {
      "rels": [
        "tag"
      ],
      "text": "JSON"
    },
    "https://phoenixtrap.com/tag/jsonpp/": {
      "rels": [
        "tag"
      ],
      "text": "JSON::PP"
    },
    "https://phoenixtrap.com/tag/mimebase64/": {
      "rels": [
        "tag"
      ],
      "text": "MIME::Base64"
    },
    "https://phoenixtrap.com/tag/mojolicious/": {
      "rels": [
        "tag"
      ],
      "text": "Mojolicious"
    },
    "https://phoenixtrap.com/tag/postfix-dereferencing/": {
      "rels": [
        "tag"
      ],
      "text": "postfix dereferencing"
    },
    "https://phoenixtrap.com/tag/termreadkey/": {
      "rels": [
        "tag"
      ],
      "text": "Term::ReadKey"
    },
    "https://phoenixtrap.com/tag/unicode/": {
      "rels": [
        "tag"
      ],
      "text": "Unicode"
    },
    "https://phoenixtrap.com/2022/02/10/perl-list-processing-is-for-hashes-too/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to Perl list processing is for hashes, too",
      "text": "Perl list processing is for hashes, too"
    },
    "https://phoenixtrap.com/tag/any/": {
      "rels": [
        "tag"
      ],
      "text": "any"
    },
    "https://phoenixtrap.com/tag/benchmark/": {
      "rels": [
        "tag"
      ],
      "text": "Benchmark"
    },
    "https://phoenixtrap.com/tag/hashes/": {
      "rels": [
        "tag"
      ],
      "text": "hashes"
    },
    "https://phoenixtrap.com/tag/keys/": {
      "rels": [
        "tag"
      ],
      "text": "keys"
    },
    "https://phoenixtrap.com/tag/listsomeutils/": {
      "rels": [
        "tag"
      ],
      "text": "List::SomeUtils"
    },
    "https://phoenixtrap.com/tag/listutil/": {
      "rels": [
        "tag"
      ],
      "text": "List::Util"
    },
    "https://phoenixtrap.com/tag/pairgrep/": {
      "rels": [
        "tag"
      ],
      "text": "pairgrep"
    },
    "https://phoenixtrap.com/tag/work/": {
      "rels": [
        "tag"
      ],
      "text": "work"
    },
    "https://phoenixtrap.com/cdn-cgi/l/email-protection#0f6265684f7f67606a6166777b7d6e7f216c6062": {
      "rels": [
        "me"
      ],
      "text": "[email protected]enixtrap.com"
    },
    "https://www.instagram.com/p/CmspNVsO1I9/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CmruiEEOZBY/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/Cmp9Kpqu54U/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/Cmp6Ht6NL24/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CmphSL2rprx/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CmdwScwOqpU/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CmWsCr0pDrG/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CmWA5LuOgB4/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CmV2Foiu3Yd/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://wordpress.org/": {
      "rels": [
        "generator"
      ],
      "text": "WordPress"
    },
    "https://phoenixtrap.com/wp-content/plugins/jetpack/_inc/blocks/instagram-gallery/view.css?minify=false&ver=11.6": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/jetpack/_inc/blocks/subscriptions/view.css?minify=false&ver=11.6": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    }
  }
}