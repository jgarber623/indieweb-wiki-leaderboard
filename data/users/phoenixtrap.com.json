{
  "items": [
    {
      "type": [
        "h-feed"
      ],
      "properties": {
        "photo": [
          "https://phoenixtrap.com/"
        ],
        "name": [
          "The Phoenix Trap"
        ],
        "url": [
          "https://phoenixtrap.com/"
        ],
        "summary": [
          "Perl, music, philosophy, etc."
        ],
        "content": [
          {
            "html": "Perl, music, philosophy, etc.",
            "value": "Perl, music, philosophy, etc."
          }
        ],
        "author": [
          {
            "type": [
              "h-card"
            ],
            "properties": {
              "url": [
                "https://phoenixtrap.com/",
                "https://github.com/mjgardner",
                "https://twitter.com/markjgardner",
                "https://www.facebook.com/mjgardner",
                "https://www.instagram.com/mjgardner",
                "https://www.flickr.com/people/mjgardner",
                "https://mastodon.sdf.org/@mjgardner"
              ],
              "uid": [
                "https://phoenixtrap.com/"
              ],
              "photo": [
                {
                  "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=125&d=default&r=g",
                  "srcset": {
                    "1x": "data:image/gif;base64"
                  },
                  "alt": ""
                },
                {
                  "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=125&d=default&r=g",
                  "srcset": {
                    "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=250&d=default&r=g"
                  },
                  "alt": ""
                }
              ],
              "name": [
                "Mark Gardner"
              ],
              "email": [
                "https://phoenixtrap.com/cdn-cgi/l/email-protection#721f181532021a1d171c1b0a060013025c111d1f"
              ],
              "note": [
                "I help professional Perl developers engineer modern, disciplined applications so they can become experts that write easy-to-maintain code with confidence."
              ]
            },
            "children": [
              {
                "type": [
                  "h-adr"
                ],
                "properties": {
                  "locality": [
                    "Houston"
                  ],
                  "region": [
                    "Texas"
                  ]
                }
              }
            ],
            "value": "https://phoenixtrap.com/"
          }
        ]
      },
      "children": [
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Perl lightning talk: ​“Don’t Fear map and grep”"
            ],
            "url": [
              "https://phoenixtrap.com/2022/06/24/perl-lightning-talk-dont-fear-map-and-grep/",
              "https://phoenixtrap.com/2022/06/24/perl-lightning-talk-dont-fear-map-and-grep/"
            ],
            "updated": [
              "2022-06-24T16:25:44-05:00"
            ],
            "published": [
              "2022-06-24T16:25:44-05:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "content": [
              {
                "html": "<p>This week’s <a href=\"https://perlconference.us/tprc-2022-hou/\">Perl and Raku Conference 2022</a> in Houston was packed with <a href=\"https://youtube.com/playlist?list=PLA9_Hq3zhoFyOpb-U3DMU7OT93dPUdtpE\">great pre­sen­ta­tions</a>, and I humbly added to them with a five-​ish minute <a href=\"https://perlconference.us/tprc-2022-hou/lightning-talks/\">light­ning talk</a> on two of Perl’s more mis­un­der­stood func­tions: <code><a href=\"https://perldoc.perl.org/functions/map\">map</a></code> and <code><a href=\"https://perldoc.perl.org/functions/grep\">grep</a></code>.</p>\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<span class=\"embed-youtube\" style=\"text-align:center; display: block;\"><iframe class=\"youtube-player\" width=\"670\" height=\"377\" src=\"https://www.youtube.com/embed/PHdq4QfSxrc?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en-US&amp;autohide=2&amp;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation\"></iframe></span>\n</div>\n<figcaption>Sorry about the <span class=\"push-double\"></span>​<span class=\"pull-double\">”</span>um”s and <span class=\"push-double\"></span>​<span class=\"pull-double\">”</span>ah”s…</figcaption></figure>\n<div class=\"wp-block-file\">\n<object class=\"wp-block-file__embed\" data=\"https://phoenixtrap.com/wp-content/uploads/2022/06/Mark-Gardner-Perl-map-and-grep-TPRC-2022.pdf\" type=\"application/pdf\" style=\"width:100%;height:600px\" aria-label=\"Embed of Embed of PDF slides of the the presentation..\"></object><a id=\"wp-block-file--media-1c5e3f33-97f1-4dc0-b9bb-3af276cbe7d6\" href=\"https://phoenixtrap.com/wp-content/uploads/2022/06/Mark-Gardner-Perl-map-and-grep-TPRC-2022.pdf\">PDF slides of the the pre­sen­ta­tion</a><a href=\"https://phoenixtrap.com/wp-content/uploads/2022/06/Mark-Gardner-Perl-map-and-grep-TPRC-2022.pdf\" class=\"wp-block-file__button\" download aria-describedby=\"wp-block-file--media-1c5e3f33-97f1-4dc0-b9bb-3af276cbe7d6\">Download</a>\n</div>\n<p>I’ve writ­ten much about <a href=\"https://phoenixtrap.com/tags/lists\">list pro­cess­ing in Perl</a>, and this talk was based on the fol­low­ing blog posts:</p>\n<ul>\n<li><a href=\"https://phoenixtrap.com/2021/03/16/perl_map_grep/\">Better Perl: Using <code>map</code> and <code>grep</code></a></li>\n<li><a href=\"https://phoenixtrap.com/2021/10/26/better-perl-four-list-processing-best-practices-with-map-grep-and-more/\">Better Perl: Four list pro­cess­ing best prac­tices with <code>map</code>, <code>grep</code>, and more</a></li>\n<li><a href=\"https://phoenixtrap.com/2022/02/10/perl-list-processing-is-for-hashes-too/\">Perl list pro­cess­ing is for hash­es, too</a></li>\n<li><a href=\"https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/\">A list of Perl list pro­cess­ing modules</a></li>\n</ul>\n<p>Overall I loved attend­ing the con­fer­ence, and it real­ly invig­o­rat­ed my par­tic­i­pa­tion in the Perl com­mu­ni­ty. Stay tuned as I resume reg­u­lar posting!</p>\n<h2 id=\"lizraku\">Update for Raku</h2>\n<p><a href=\"https://twitter.com/markjgardner/status/1580186429052755969\">On Twitter I nudged</a> promi­nent Raku hack­er (and recov­ered Perl hack­er) Elizabeth Mattijsen to write about the Raku pro­gram­ming language’s <a href=\"https://docs.raku.org/type/List#routine_map\"><code>map</code></a> and <a href=\"https://docs.raku.org/routine/grep#(List)_routine_grep\"><code>grep</code></a> func­tion­al­i­ty. <a href=\"https://dev.to/lizmat/series/20328\">Check out her five-​part series on DEV.to.</a></p>",
                "value": "This week’s Perl and Raku Conference 2022 in Houston was packed with great pre­sen­ta­tions, and I humbly added to them with a five-​ish minute light­ning talk on two of Perl’s more mis­un­der­stood func­tions: map and grep.\n\n\nSorry about the ​”um”s and ​”ah”s…\nPDF slides of the the pre­sen­ta­tionDownload\nI’ve writ­ten much about list pro­cess­ing in Perl, and this talk was based on the fol­low­ing blog posts:\n\nBetter Perl: Using map and grep\nBetter Perl: Four list pro­cess­ing best prac­tices with map, grep, and more\nPerl list pro­cess­ing is for hash­es, too\nA list of Perl list pro­cess­ing modules\n\nOverall I loved attend­ing the con­fer­ence, and it real­ly invig­o­rat­ed my par­tic­i­pa­tion in the Perl com­mu­ni­ty. Stay tuned as I resume reg­u­lar posting!\nUpdate for Raku\nOn Twitter I nudged promi­nent Raku hack­er (and recov­ered Perl hack­er) Elizabeth Mattijsen to write about the Raku pro­gram­ming language’s map and grep func­tion­al­i­ty. Check out her five-​part series on DEV.to."
              }
            ],
            "category": [
              "conferences",
              "grep",
              "lists",
              "map",
              "meetup",
              "meta",
              "Perl",
              "Raku",
              "RakuLang",
              "The Perl Conference"
            ]
          },
          "id": "post-2069"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "How much is that BLÅHAJ in the (terminal) window?"
            ],
            "url": [
              "https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/",
              "https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/"
            ],
            "updated": [
              "2022-04-12T09:00:00-05:00"
            ],
            "published": [
              "2022-04-12T09:00:00-05:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/A9FD0189-B379-4B9A-AB36-82CD418C3249-scaled.jpeg?fit=668%2C445&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": "IKEA BLÅHAJ shark toys"
              }
            ],
            "content": [
              {
                "html": "<p><a href=\"https://www.ikea.com/us/en/p/blahaj-soft-toy-shark-90373590/\">IKEA’s toy BLÅHAJ shark</a> has become a <a href=\"https://knowyourmeme.com/memes/subcultures/ikea-blahaj-shark\">beloved Internet icon</a> over the past sev­er­al years. I thought it might be cute to write a lit­tle Perl to get info about it and even dis­play a cud­dly pic­ture right in the ter­mi­nal where I’m run­ning the code. Maybe this will give you some ideas for your own quick web clients. Of course, you could accom­plish all of these things using a pipeline of indi­vid­ual command-​line util­i­ties like <a href=\"https://curl.se/\"><code>curl</code></a>, <a href=\"https://stedolan.github.io/jq/\"><code>jq</code></a>, and <a href=\"https://www.gnu.org/software/coreutils/\">GNU core­uti­ls</a>’ <a href=\"https://www.gnu.org/software/coreutils/manual/html_node/base64-invocation.html\"><code>base64</code></a>. These exam­ples focus on <a href=\"https://perldoc.perl.org/perlglossary#glue-language\">Perl as the glue</a>, though.</p>\n<h2>Warning: dodgy API ahead</h2>\n<p>I haven’t found a publicly-​documented and ‑sup­port­ed offi­cial API for query­ing IKEA prod­uct infor­ma­tion but <a href=\"https://towardsdatascience.com/a-single-line-of-python-code-scraping-dataset-from-webpages-c9d2a8805d61\">oth­ers</a> <a href=\"https://pypi.org/project/ikea-api/\">have</a> decon­struct­ed the company’s web site <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX\">AJAX</a> requests so we can use that instead. The alter­na­tive would be to scrape the IKEA web site direct­ly which, although pos­si­ble, would be more tedious and prone to fail­ure should their design change. An unof­fi­cial API is also unre­li­able but the sim­pler client code is eas­i­er to change should any errors surface.</p>\n<h2>Enter the <a href=\"https://mojolicious.org/\">Mojolicious</a>\n</h2>\n<p>My orig­i­nal goal was to do this in a <a href=\"https://perldoc.perl.org/perlglossary#one-liner\">sin­gle line issued to the <code>perl</code> com­mand</a>, and luck­i­ly the <a href=\"https://docs.mojolicious.org/ojo\">Mojolicious framework’s ojo mod­ule</a> is tailor-​made for such things. By adding a <code>-Mojo</code> switch to the <code>perl</code> com­mand, you get over a dozen quick single-​character func­tions for spin­ning up a quick web appli­ca­tion or, in our case, mak­ing and inter­pret­ing web requests with­out a lot of cer­e­mo­ny. Here’s the start of my one-​line request to the IKEA API for infor­ma­tion on their BLÅHAJ prod­uct, using <a href=\"https://docs.mojolicious.org/ojo#g\">ojo’s <code>g</code> func­tion</a> to per­form an HTTP GET and dis­play­ing the <a href=\"https://json.org/\">JSON</a> from the response body to the terminal.</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -E 'say g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;body'</strong></code></pre>\n<p>This cur­rent­ly returns over 2,400 lines of data, so after read­ing it over I’ll con­vert the response body JSON to a <a href=\"https://perldoc.perl.org/perldsc\">Perl data struc­ture</a> and dump only the main prod­uct infor­ma­tion using <a href=\"https://metacpan.org/pod/ojo#r\">ojo’s <code>r</code> func­tion</a>:</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -E 'say r g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}'</strong>\n{\n  \"availability\" =&gt; [],\n  \"breathTaking\" =&gt; bless( do{\\(my $o = 0)}, 'JSON::PP::Boolean' ),\n  \"colors\" =&gt; [\n    {\n      \"hex\" =&gt; \"0058a3\",\n      \"id\" =&gt; 10007,\n      \"name\" =&gt; \"blue\"\n    },\n    {\n      \"hex\" =&gt; \"ffffff\",\n      \"id\" =&gt; 10156,\n      \"name\" =&gt; \"white\"\n    }\n  ],\n  \"contextualImageUrl\" =&gt; \"https://www.ikea.com/us/en/images/products/blahaj-soft-toy-shark__0877371_pe633608_s5.jpg\",\n  \"currencyCode\" =&gt; \"USD\",\n  \"discount\" =&gt; \"\",\n  \"features\" =&gt; [],\n  \"gprDescription\" =&gt; {\n    \"numberOfVariants\" =&gt; 0,\n    \"variants\" =&gt; []\n  },\n  \"id\" =&gt; 90373590,\n  \"itemMeasureReferenceText\" =&gt; \"39 \\x{bc} \\\"\",\n  \"itemNo\" =&gt; 90373590,\n  \"itemNoGlobal\" =&gt; 30373588,\n  \"itemType\" =&gt; \"ART\",\n  \"lastChance\" =&gt; $VAR1-&gt;{\"breathTaking\"},\n  \"mainImageAlt\" =&gt; \"BL\\x{c5}HAJ Soft toy, shark, 39 \\x{bc} \\\"\",\n  \"mainImageUrl\" =&gt; \"https://www.ikea.com/us/en/images/products/blahaj-soft-toy-shark__0710175_pe727378_s5.jpg\",\n  \"name\" =&gt; \"BL\\x{c5}HAJ\",\n  \"onlineSellable\" =&gt; bless( do{\\(my $o = 1)}, 'JSON::PP::Boolean' ),\n  \"pipUrl\" =&gt; \"https://www.ikea.com/us/en/p/blahaj-soft-toy-shark-90373590/\",\n  \"price\" =&gt; {\n    \"decimals\" =&gt; 99,\n    \"isRegularCurrency\" =&gt; $VAR1-&gt;{\"breathTaking\"},\n    \"prefix\" =&gt; \"\\$\",\n    \"separator\" =&gt; \".\",\n    \"suffix\" =&gt; \"\",\n    \"wholeNumber\" =&gt; 19\n  },\n  \"priceNumeral\" =&gt; \"19.99\",\n  \"quickFacts\" =&gt; [],\n  \"tag\" =&gt; \"NONE\",\n  \"typeName\" =&gt; \"Soft toy\"\n}</code></pre>\n<p>If I just want the price I can do:</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -E 'say g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}-&gt;@{qw(currencyCode priceNumeral)}'</strong>\nUSD19.99</code></pre>\n<p>That <code>-&gt;@{qw(currencyCode priceNumeral)}</code> towards the end uses the <a href=\"https://perldoc.perl.org/perlref#Postfix-Reference-Slicing\">post­fix ref­er­ence slic­ing syn­tax</a> intro­duced <a href=\"https://perldoc.perl.org/perl5200delta#Experimental-Postfix-Dereferencing\">exper­i­men­tal­ly in Perl v5.20</a> and <a href=\"https://perldoc.perl.org/perl5240delta#Postfix-dereferencing-is-no-longer-experimental\">made offi­cial in v5.24</a>. If you’re using an old­er <code>perl</code>, you’d say:</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -E 'say @{g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}}{qw(currencyCode priceNumeral)}'</strong>\nUSD19.99</code></pre>\n<p>I pre­fer the for­mer, though, because it’s eas­i­er to read left-to-right.</p>\n<h2>But I’m not in the United States! Where’s my native currency?</h2>\n<p>You can either replace the <span class=\"push-double\"></span>​<span class=\"pull-double\">”</span><code>us/en</code>” in the URL above or use the <a href=\"https://perldoc.perl.org/I18N::LangTags::Detect\">core I18N::LangTags::Detect mod­ule</a> added in Perl v5.8.5 if you’re real­ly deter­mined to be portable across dif­fer­ent users’ locales. This is real­ly stretch­ing <a href=\"https://en.wikipedia.org/wiki/One-liner_program\">the def­i­n­i­tion of <span class=\"push-double\"></span>​<span class=\"pull-double\">”</span>one-​liner,”</a> though.</p>\n<pre class=\"wp-block-code\"><code>$ <strong>LANG=de_DE.UTF-8 perl -Mojo -MI18N::LangTags::Detect -E 'my @lang = (split /-/, I18N::LangTags::Detect::detect)[1,0]; say g(\"https://sik.search.blue.cdtapps.com/\" . join(\"/\", @lang == 2 ? @lang : (\"us\", \"en\")) . \"/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}-&gt;@{qw(currencyCode priceNumeral)}'</strong>\nEUR27.99</code></pre>\n<h2 id=\"window\">Window dressing</h2>\n<p>It’s hard to envi­sion cud­dling a num­ber, but luck­i­ly the prod­uct infor­ma­tion returned above links to a JPEG file in the <code>mainImageUrl</code> key. My favorite ter­mi­nal app <a href=\"https://iterm2.com/documentation-images.html\">iTerm2 can dis­play images inline</a> from either a file or <a href=\"https://en.wikipedia.org/wiki/Base64\">Base64</a> encod­ed data, so adding an extra HTTP request and <a href=\"https://perldoc.perl.org/MIME::Base64#encode_base64(-%24bytes-)\">encod­ing from the core MIME::Base64 mod­ule</a> yields:</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -MMIME::Base64 -E 'say \"\\c[]1337;File=inline=1;width=100%:\", encode_base64(g(g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl})-&gt;body), \"\\cG\"'</strong></code></pre>\n<figure class=\"wp-block-image size-full\"><img data-attachment-id=\"2027\" data-permalink=\"https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/scr-20220411-lqw/\" data-orig-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=851%2C929&amp;ssl=1\" data-orig-size=\"851,929\" data-comments-opened=\"1\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"SCR-20220411-lqw\" data-image-description data-image-caption data-medium-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=275%2C300&amp;ssl=1\" data-large-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=670%2C731&amp;ssl=1\" decoding=\"async\" width=\"670\" height=\"731\" src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=670%2C731&amp;ssl=1\" alt class=\"wp-image-2027 jetpack-lazy-image\" data-recalc-dims=\"1\" data-lazy-srcset=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?w=851&amp;ssl=1 851w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=275%2C300&amp;ssl=1 275w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=768%2C838&amp;ssl=1 768w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=668%2C729&amp;ssl=1 668w\" data-lazy-sizes=\"(max-width: 670px) 100vw, 670px\" data-lazy-src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=670%2C731&amp;is-pending-load=1#038;ssl=1\" srcset=\"data:image/gif;base64, https://phoenixtrap.com/R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7\"><noscript><img data-lazy-fallback=\"1\" data-attachment-id=\"2027\" data-permalink=\"https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/scr-20220411-lqw/\" data-orig-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=851%2C929&amp;ssl=1\" data-orig-size=\"851,929\" data-comments-opened=\"1\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"SCR-20220411-lqw\" data-image-description data-image-caption data-medium-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=275%2C300&amp;ssl=1\" data-large-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?fit=670%2C731&amp;ssl=1\" decoding=\"async\" loading=\"lazy\" width=\"670\" height=\"731\" src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=670%2C731&amp;ssl=1\" alt class=\"wp-image-2027\" srcset=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?w=851&amp;ssl=1 851w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=275%2C300&amp;ssl=1 275w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=768%2C838&amp;ssl=1 768w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-lqw.png?resize=668%2C729&amp;ssl=1 668w\" sizes=\"(max-width: 670px) 100vw, 670px\" data-recalc-dims=\"1\"></noscript></figure>\n<p>(You could just send the image URL to <a href=\"https://iterm2.com/documentation-utilities.html\">iTerm2’s bun­dled <code>imgcat</code> util­i­ty</a>, but where’s the fun in that?)</p>\n<pre class=\"wp-block-code\"><code>$ <strong>imgcat --url `perl -Mojo -E 'print g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl}'`</strong></code></pre>\n<h2>But I don’t have iTerm2 or a Mac!</h2>\n<p>I got you. At the expense of a num­ber of oth­er depen­den­cies, here’s a ver­sion that will work on any ter­mi­nal that sup­ports <a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\">256-​color mode with ANSI codes</a> using <a href=\"https://metacpan.org/pod/Image::Term256Color\">Image::Term256Color from CPAN</a> and a Unicode font with <a href=\"https://en.wikipedia.org/wiki/Block_Elements?wprov=sfti1\">block char­ac­ters</a>. I’ll also use <a href=\"https://metacpan.org/pod/Term::ReadKey\">Term::ReadKey</a> to size the image for the width of your win­dow. (Again, this stretch­es the def­i­n­i­tion of <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>one-​liner.”)</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -Mojo -MImage::Term256Color -MTerm::ReadKey -E 'say for Image::Term256Color::convert(g(g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form =&gt; {types =&gt; \"PRODUCT\", q =&gt; \"BLÅHAJ\"})-&gt;json-&gt;{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl})-&gt;body, {scale_x =&gt; (GetTerminalSize)[0], utf8 =&gt; 1})'</strong></code></pre>\n<figure class=\"wp-block-image size-full\"><img data-attachment-id=\"2035\" data-permalink=\"https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/scr-20220411-mke/\" data-orig-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=851%2C989&amp;ssl=1\" data-orig-size=\"851,989\" data-comments-opened=\"1\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"SCR-20220411-mke\" data-image-description data-image-caption data-medium-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=258%2C300&amp;ssl=1\" data-large-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=670%2C779&amp;ssl=1\" decoding=\"async\" width=\"670\" height=\"779\" src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=670%2C779&amp;ssl=1\" alt class=\"wp-image-2035 jetpack-lazy-image\" data-recalc-dims=\"1\" data-lazy-srcset=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?w=851&amp;ssl=1 851w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=258%2C300&amp;ssl=1 258w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=768%2C893&amp;ssl=1 768w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=668%2C776&amp;ssl=1 668w\" data-lazy-sizes=\"(max-width: 670px) 100vw, 670px\" data-lazy-src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=670%2C779&amp;is-pending-load=1#038;ssl=1\" srcset=\"data:image/gif;base64, https://phoenixtrap.com/R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7\"><noscript><img data-lazy-fallback=\"1\" data-attachment-id=\"2035\" data-permalink=\"https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/scr-20220411-mke/\" data-orig-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=851%2C989&amp;ssl=1\" data-orig-size=\"851,989\" data-comments-opened=\"1\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"SCR-20220411-mke\" data-image-description data-image-caption data-medium-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=258%2C300&amp;ssl=1\" data-large-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?fit=670%2C779&amp;ssl=1\" decoding=\"async\" loading=\"lazy\" width=\"670\" height=\"779\" src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=670%2C779&amp;ssl=1\" alt class=\"wp-image-2035\" srcset=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?w=851&amp;ssl=1 851w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=258%2C300&amp;ssl=1 258w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=768%2C893&amp;ssl=1 768w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/04/SCR-20220411-mke.png?resize=668%2C776&amp;ssl=1 668w\" sizes=\"(max-width: 670px) 100vw, 670px\" data-recalc-dims=\"1\"></noscript></figure>\n<h2>I hate Mojolicious! Can’t you just use core modules?</h2>\n<p>Fine. Here’s retriev­ing the prod­uct price using <a href=\"https://perldoc.perl.org/HTTP::Tiny\">HTTP::Tiny</a> and the pure-​Perl JSON pars­er <a href=\"https://perldoc.perl.org/JSON::PP\">JSON::PP</a>, which were <a href=\"https://perldoc.perl.org/perl5140delta#New-Modules-and-Pragmata\">added to core in ver­sion 5.14</a>.</p>\n<pre class=\"wp-block-code\"><code>$ <strong>perl -MHTTP::Tiny -MJSON::PP -E 'say @{decode_json(HTTP::Tiny-&gt;new-&gt;get(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page?types=PRODUCT&amp;q=BLÅHAJ\")-&gt;{content})-&gt;{searchResultPage}{products}{main}{items}[0]{product}}{qw(currencyCode priceNumeral)}'</strong>\nUSD19.99</code></pre>\n<p>Fetching and dis­play­ing a pic­ture of the hug­gable shark using MIME::Base64 or Image::Term256Color <a href=\"https://phoenixtrap.com/#window\">as above</a> is left as an exer­cise to the reader.</p>",
                "value": "IKEA’s toy BLÅHAJ shark has become a beloved Internet icon over the past sev­er­al years. I thought it might be cute to write a lit­tle Perl to get info about it and even dis­play a cud­dly pic­ture right in the ter­mi­nal where I’m run­ning the code. Maybe this will give you some ideas for your own quick web clients. Of course, you could accom­plish all of these things using a pipeline of indi­vid­ual command-​line util­i­ties like curl, jq, and GNU core­uti­ls’ base64. These exam­ples focus on Perl as the glue, though.\nWarning: dodgy API ahead\nI haven’t found a publicly-​documented and ‑sup­port­ed offi­cial API for query­ing IKEA prod­uct infor­ma­tion but oth­ers have decon­struct­ed the company’s web site AJAX requests so we can use that instead. The alter­na­tive would be to scrape the IKEA web site direct­ly which, although pos­si­ble, would be more tedious and prone to fail­ure should their design change. An unof­fi­cial API is also unre­li­able but the sim­pler client code is eas­i­er to change should any errors surface.\nEnter the Mojolicious\nMy orig­i­nal goal was to do this in a sin­gle line issued to the perl com­mand, and luck­i­ly the Mojolicious framework’s ojo mod­ule is tailor-​made for such things. By adding a -Mojo switch to the perl com­mand, you get over a dozen quick single-​character func­tions for spin­ning up a quick web appli­ca­tion or, in our case, mak­ing and inter­pret­ing web requests with­out a lot of cer­e­mo­ny. Here’s the start of my one-​line request to the IKEA API for infor­ma­tion on their BLÅHAJ prod­uct, using ojo’s g func­tion to per­form an HTTP GET and dis­play­ing the JSON from the response body to the terminal.\n$ perl -Mojo -E 'say g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->body'\nThis cur­rent­ly returns over 2,400 lines of data, so after read­ing it over I’ll con­vert the response body JSON to a Perl data struc­ture and dump only the main prod­uct infor­ma­tion using ojo’s r func­tion:\n$ perl -Mojo -E 'say r g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}'\n{\n  \"availability\" => [],\n  \"breathTaking\" => bless( do{\\(my $o = 0)}, 'JSON::PP::Boolean' ),\n  \"colors\" => [\n    {\n      \"hex\" => \"0058a3\",\n      \"id\" => 10007,\n      \"name\" => \"blue\"\n    },\n    {\n      \"hex\" => \"ffffff\",\n      \"id\" => 10156,\n      \"name\" => \"white\"\n    }\n  ],\n  \"contextualImageUrl\" => \"https://www.ikea.com/us/en/images/products/blahaj-soft-toy-shark__0877371_pe633608_s5.jpg\",\n  \"currencyCode\" => \"USD\",\n  \"discount\" => \"\",\n  \"features\" => [],\n  \"gprDescription\" => {\n    \"numberOfVariants\" => 0,\n    \"variants\" => []\n  },\n  \"id\" => 90373590,\n  \"itemMeasureReferenceText\" => \"39 \\x{bc} \\\"\",\n  \"itemNo\" => 90373590,\n  \"itemNoGlobal\" => 30373588,\n  \"itemType\" => \"ART\",\n  \"lastChance\" => $VAR1->{\"breathTaking\"},\n  \"mainImageAlt\" => \"BL\\x{c5}HAJ Soft toy, shark, 39 \\x{bc} \\\"\",\n  \"mainImageUrl\" => \"https://www.ikea.com/us/en/images/products/blahaj-soft-toy-shark__0710175_pe727378_s5.jpg\",\n  \"name\" => \"BL\\x{c5}HAJ\",\n  \"onlineSellable\" => bless( do{\\(my $o = 1)}, 'JSON::PP::Boolean' ),\n  \"pipUrl\" => \"https://www.ikea.com/us/en/p/blahaj-soft-toy-shark-90373590/\",\n  \"price\" => {\n    \"decimals\" => 99,\n    \"isRegularCurrency\" => $VAR1->{\"breathTaking\"},\n    \"prefix\" => \"\\$\",\n    \"separator\" => \".\",\n    \"suffix\" => \"\",\n    \"wholeNumber\" => 19\n  },\n  \"priceNumeral\" => \"19.99\",\n  \"quickFacts\" => [],\n  \"tag\" => \"NONE\",\n  \"typeName\" => \"Soft toy\"\n}\nIf I just want the price I can do:\n$ perl -Mojo -E 'say g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}->@{qw(currencyCode priceNumeral)}'\nUSD19.99\nThat ->@{qw(currencyCode priceNumeral)} towards the end uses the post­fix ref­er­ence slic­ing syn­tax intro­duced exper­i­men­tal­ly in Perl v5.20 and made offi­cial in v5.24. If you’re using an old­er perl, you’d say:\n$ perl -Mojo -E 'say @{g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}}{qw(currencyCode priceNumeral)}'\nUSD19.99\nI pre­fer the for­mer, though, because it’s eas­i­er to read left-to-right.\nBut I’m not in the United States! Where’s my native currency?\nYou can either replace the ​”us/en” in the URL above or use the core I18N::LangTags::Detect mod­ule added in Perl v5.8.5 if you’re real­ly deter­mined to be portable across dif­fer­ent users’ locales. This is real­ly stretch­ing the def­i­n­i­tion of ​”one-​liner,” though.\n$ LANG=de_DE.UTF-8 perl -Mojo -MI18N::LangTags::Detect -E 'my @lang = (split /-/, I18N::LangTags::Detect::detect)[1,0]; say g(\"https://sik.search.blue.cdtapps.com/\" . join(\"/\", @lang == 2 ? @lang : (\"us\", \"en\")) . \"/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}->@{qw(currencyCode priceNumeral)}'\nEUR27.99\nWindow dressing\nIt’s hard to envi­sion cud­dling a num­ber, but luck­i­ly the prod­uct infor­ma­tion returned above links to a JPEG file in the mainImageUrl key. My favorite ter­mi­nal app iTerm2 can dis­play images inline from either a file or Base64 encod­ed data, so adding an extra HTTP request and encod­ing from the core MIME::Base64 mod­ule yields:\n$ perl -Mojo -MMIME::Base64 -E 'say \"\\c[]1337;File=inline=1;width=100%:\", encode_base64(g(g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl})->body), \"\\cG\"'\n    \n(You could just send the image URL to iTerm2’s bun­dled imgcat util­i­ty, but where’s the fun in that?)\n$ imgcat --url `perl -Mojo -E 'print g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl}'`\nBut I don’t have iTerm2 or a Mac!\nI got you. At the expense of a num­ber of oth­er depen­den­cies, here’s a ver­sion that will work on any ter­mi­nal that sup­ports 256-​color mode with ANSI codes using Image::Term256Color from CPAN and a Unicode font with block char­ac­ters. I’ll also use Term::ReadKey to size the image for the width of your win­dow. (Again, this stretch­es the def­i­n­i­tion of ​“one-​liner.”)\n$ perl -Mojo -MImage::Term256Color -MTerm::ReadKey -E 'say for Image::Term256Color::convert(g(g(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page\", form => {types => \"PRODUCT\", q => \"BLÅHAJ\"})->json->{searchResultPage}{products}{main}{items}[0]{product}{mainImageUrl})->body, {scale_x => (GetTerminalSize)[0], utf8 => 1})'\n    \nI hate Mojolicious! Can’t you just use core modules?\nFine. Here’s retriev­ing the prod­uct price using HTTP::Tiny and the pure-​Perl JSON pars­er JSON::PP, which were added to core in ver­sion 5.14.\n$ perl -MHTTP::Tiny -MJSON::PP -E 'say @{decode_json(HTTP::Tiny->new->get(\"https://sik.search.blue.cdtapps.com/us/en/search-result-page?types=PRODUCT&q=BLÅHAJ\")->{content})->{searchResultPage}{products}{main}{items}[0]{product}}{qw(currencyCode priceNumeral)}'\nUSD19.99\nFetching and dis­play­ing a pic­ture of the hug­gable shark using MIME::Base64 or Image::Term256Color as above is left as an exer­cise to the reader."
              }
            ],
            "category": [
              "AJAX",
              "ANSI",
              "base64",
              "CPAN",
              "curl",
              "HTTP::Tiny",
              "IKEA",
              "Image::Term256Color",
              "iOS",
              "iPad",
              "iPhone",
              "iTerm2",
              "jq",
              "JSON",
              "JSON::PP",
              "MIME::Base64",
              "Mojolicious",
              "Perl",
              "postfix dereferencing",
              "Term::ReadKey",
              "Unicode",
              "webdev"
            ]
          },
          "id": "post-1997"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Perl list processing is for hashes, too"
            ],
            "url": [
              "https://phoenixtrap.com/2022/02/10/perl-list-processing-is-for-hashes-too/",
              "https://phoenixtrap.com/2022/02/10/perl-list-processing-is-for-hashes-too/"
            ],
            "updated": [
              "2022-02-10T09:00:00-06:00"
            ],
            "published": [
              "2022-02-10T09:00:00-06:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/02/pexels-photo-6529924.jpeg?fit=668%2C445&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": "plate of eggs and hash browns"
              }
            ],
            "content": [
              {
                "html": "<p>This month I start­ed a new job at <a href=\"https://www.alertlogic.com/\">Alert Logic</a>, a cyber­se­cu­ri­ty provider with Perl (among many oth­er things) at its beat­ing heart. I’ve been learn­ing a lot, and part of the process has been under­stand­ing the APIs in the code base. To that end, I’ve been writ­ing small test scripts to tease apart data struc­tures, using Perl <a href=\"https://perldoc.perl.org/perlfunc#Functions-for-real-@ARRAYs\">array-​processing</a>, <a href=\"https://perldoc.perl.org/perlfunc#Functions-for-list-data\">list-​processing</a>, and <a href=\"https://perldoc.perl.org/perlfunc#Functions-for-real-%25HASHes\">hash- (i.e., asso­cia­tive array)-processing func­tions</a>.</p>\n<p>I’ve cov­ered <code><a href=\"https://perldoc.perl.org/functions/map\">map</a></code>, <code><a href=\"https://perldoc.perl.org/functions/grep\">grep</a></code>, and friends a <a href=\"https://phoenixtrap.com/2021/03/16/perl_map_grep/\" data-type=\"post\" data-id=\"490\">cou­ple</a> <a href=\"https://phoenixtrap.com/2021/10/26/better-perl-four-list-processing-best-practices-with-map-grep-and-more/\" data-type=\"post\" data-id=\"1454\">times</a> before. <a href=\"https://phoenixtrap.com/2021/10/26/better-perl-four-list-processing-best-practices-with-map-grep-and-more/\">Most recent­ly</a>, I described using <a href=\"https://perldoc.perl.org/List::Util#any\">List::Util’s <code>any</code> func­tion</a> to check if a con­di­tion is true for any item in a list. In the sim­plest case, you can use it to check to see if a giv­en val­ue is in the list at all:</p>\n<pre class=\"wp-block-code\"><code>use feature 'say';\nuse List::Util 'any';\nmy @colors =\n  qw(red orange yellow green blue indigo violet);\nsay 'matched' if any { /^red$/ } @colors;</code></pre>\n<p>However, if you’re going to be doing this a lot with arbi­trary strings, <a href=\"https://perldoc.perl.org/perlfaq4#How-can-I-tell-whether-a-certain-element-is-contained-in-a-list-or-array?\">Perl FAQ sec­tion 4 advis­es</a> turn­ing the array into the keys of a hash and then check­ing for mem­ber­ship there. For exam­ple, here’s a sim­ple script to check if the col­ors input (either from the key­board or from files passed as argu­ments) are in the rainbow:</p>\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env perl\n\nuse v5.22; # introduced &lt;&lt;&gt;&gt; for safe opening of arguments\nuse warnings;\n \nmy %in_colors = map {$_ =&gt; 1}\n  qw(red orange yellow green blue indigo violet);\n\nwhile (&lt;&lt;&gt;&gt;) {\n  chomp;\n  say \"$_ is in the rainbow\" if $in_colors{$_};\n}</code></pre>\n<p>List::Util has a <a href=\"https://perldoc.perl.org/List::Util#KEY/VALUE-PAIR-LIST-FUNCTIONS\">bunch of func­tions for pro­cess­ing lists of pairs</a> that I’ve found use­ful when paw­ing through hash­es. <code><a href=\"https://perldoc.perl.org/List::Util#pairgrep\">pairgrep</a></code>, for exam­ple, acts just like <code>grep</code> but instead assigns <code>$a</code> and <code>$b</code> to each key and val­ue passed in and returns the result­ing pairs that match. I’ve used it as a quick way to search for hash entries match­ing cer­tain val­ue conditions:</p>\n<pre class=\"wp-block-code\"><code>use List::Util 'pairgrep';\nmy %numbers = (zero =&gt; 0, one =&gt; 1, two =&gt; 2, three =&gt; 3);\nmy %odds = pairgrep {$b % 2} %numbers;</code></pre>\n<p>Sure, you could do this by invok­ing a mix of plain <code>grep</code>, <code><a href=\"https://perldoc.perl.org/functions/keys\">keys</a></code>, and a <a href=\"https://perldoc.perl.org/perldata#Key/Value-Hash-Slices\">hash slice</a>, but it’s nois­i­er and more repetitive:</p>\n<pre class=\"wp-block-code\"><code>use v5.20; # for key/value hash slice \nmy %odds = %numbers{grep {$numbers{$_} % 2} keys %numbers};</code></pre>\n<p><code>pairgrep</code><span class=\"push-single\"></span>​<span class=\"pull-single\">’</span>s com­piled C‑based <a href=\"https://perldoc.perl.org/perlxs\">XS</a> code can also be faster, as evi­denced by this <a href=\"https://perldoc.perl.org/Benchmark\">Benchmark</a> script that works through a hash made of the <a href=\"https://en.wikipedia.org/wiki/Words_(Unix)\">Unix <code>words</code> file</a> (479,828 entries on my machine):</p>\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env perl\n\nuse v5.20;\nuse warnings;\nuse List::Util 'pairgrep';\nuse Benchmark 'cmpthese';\n\nmy (%words, $count);\nopen my $fh, '&lt;', '/usr/share/dict/words'\n  or die \"can't open words: $!\";\nwhile (&lt;$fh&gt;) {\n  chomp;\n  $words{$_} = $count++;\n}\nclose $fh;\n\ncmpthese(100, {\n  grep =&gt; sub {\n    my %odds = %words{grep {$words{$_} % 2} keys %words};\n  },\n  pairgrep =&gt; sub {\n    my %odds = pairgrep {$b % 2} %words;\n  },\n} );</code></pre>\n<p>Benchmark out­put:</p>\n<pre class=\"wp-block-code\"><code>           Rate     grep pairgrep\ngrep     1.47/s       --     -20%\npairgrep 1.84/s      25%       --</code></pre>\n<hr class=\"wp-block-separator\">\n<p>In gen­er­al, I urge you to work through the <a href=\"https://phoenixtrap.com/2021/10/12/read-the-fantastic-manual-how-to-get-the-most-out-of-perl-documentation/\" data-type=\"post\" data-id=\"1385\">Perl doc­u­men­ta­tion</a><span class=\"push-single\"></span>​<span class=\"pull-single\">’</span>s tuto­ri­als on <a href=\"https://perldoc.perl.org/perlreftut\">ref­er­ences</a>, <a href=\"https://perldoc.perl.org/perllol\">lists of lists</a>, the <a href=\"https://perldoc.perl.org/perldsc\">data struc­tures cook­book</a>, and the FAQs on <a href=\"https://perldoc.perl.org/perlfaq4#Data:-Arrays\">array</a> and <a href=\"https://perldoc.perl.org/perlfaq4#Data:-Hashes-(Associative-Arrays)\">hash manip­u­la­tion</a>. Then dip into the var­i­ous <a href=\"https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/\" data-type=\"post\" data-id=\"692\">list-​processing mod­ules</a> (espe­cial­ly the includ­ed <a href=\"https://perldoc.perl.org/List::Util\">List::Util</a> and CPAN’s <a href=\"https://metacpan.org/pod/List::SomeUtils\">List::SomeUtils</a>) for ready-​made func­tions for com­mon oper­a­tions. You’ll find a wealth of tech­niques for cre­at­ing, man­ag­ing, and pro­cess­ing the data struc­tures that your pro­grams need.</p>",
                "value": "This month I start­ed a new job at Alert Logic, a cyber­se­cu­ri­ty provider with Perl (among many oth­er things) at its beat­ing heart. I’ve been learn­ing a lot, and part of the process has been under­stand­ing the APIs in the code base. To that end, I’ve been writ­ing small test scripts to tease apart data struc­tures, using Perl array-​processing, list-​processing, and hash- (i.e., asso­cia­tive array)-processing func­tions.\nI’ve cov­ered map, grep, and friends a cou­ple times before. Most recent­ly, I described using List::Util’s any func­tion to check if a con­di­tion is true for any item in a list. In the sim­plest case, you can use it to check to see if a giv­en val­ue is in the list at all:\nuse feature 'say';\nuse List::Util 'any';\nmy @colors =\n  qw(red orange yellow green blue indigo violet);\nsay 'matched' if any { /^red$/ } @colors;\nHowever, if you’re going to be doing this a lot with arbi­trary strings, Perl FAQ sec­tion 4 advis­es turn­ing the array into the keys of a hash and then check­ing for mem­ber­ship there. For exam­ple, here’s a sim­ple script to check if the col­ors input (either from the key­board or from files passed as argu­ments) are in the rainbow:\n#!/usr/bin/env perl\n\nuse v5.22; # introduced <<>> for safe opening of arguments\nuse warnings;\n \nmy %in_colors = map {$_ => 1}\n  qw(red orange yellow green blue indigo violet);\n\nwhile (<<>>) {\n  chomp;\n  say \"$_ is in the rainbow\" if $in_colors{$_};\n}\nList::Util has a bunch of func­tions for pro­cess­ing lists of pairs that I’ve found use­ful when paw­ing through hash­es. pairgrep, for exam­ple, acts just like grep but instead assigns $a and $b to each key and val­ue passed in and returns the result­ing pairs that match. I’ve used it as a quick way to search for hash entries match­ing cer­tain val­ue conditions:\nuse List::Util 'pairgrep';\nmy %numbers = (zero => 0, one => 1, two => 2, three => 3);\nmy %odds = pairgrep {$b % 2} %numbers;\nSure, you could do this by invok­ing a mix of plain grep, keys, and a hash slice, but it’s nois­i­er and more repetitive:\nuse v5.20; # for key/value hash slice \nmy %odds = %numbers{grep {$numbers{$_} % 2} keys %numbers};\npairgrep​’s com­piled C‑based XS code can also be faster, as evi­denced by this Benchmark script that works through a hash made of the Unix words file (479,828 entries on my machine):\n#!/usr/bin/env perl\n\nuse v5.20;\nuse warnings;\nuse List::Util 'pairgrep';\nuse Benchmark 'cmpthese';\n\nmy (%words, $count);\nopen my $fh, '<', '/usr/share/dict/words'\n  or die \"can't open words: $!\";\nwhile (<$fh>) {\n  chomp;\n  $words{$_} = $count++;\n}\nclose $fh;\n\ncmpthese(100, {\n  grep => sub {\n    my %odds = %words{grep {$words{$_} % 2} keys %words};\n  },\n  pairgrep => sub {\n    my %odds = pairgrep {$b % 2} %words;\n  },\n} );\nBenchmark out­put:\n           Rate     grep pairgrep\ngrep     1.47/s       --     -20%\npairgrep 1.84/s      25%       --\n\nIn gen­er­al, I urge you to work through the Perl doc­u­men­ta­tion​’s tuto­ri­als on ref­er­ences, lists of lists, the data struc­tures cook­book, and the FAQs on array and hash manip­u­la­tion. Then dip into the var­i­ous list-​processing mod­ules (espe­cial­ly the includ­ed List::Util and CPAN’s List::SomeUtils) for ready-​made func­tions for com­mon oper­a­tions. You’ll find a wealth of tech­niques for cre­at­ing, man­ag­ing, and pro­cess­ing the data struc­tures that your pro­grams need."
              }
            ],
            "category": [
              "any",
              "Benchmark",
              "CPAN",
              "grep",
              "hashes",
              "keys",
              "List::SomeUtils",
              "List::Util",
              "lists",
              "map",
              "pairgrep",
              "Perl",
              "work"
            ]
          },
          "id": "post-1963"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Get out early with Perl statement modifiers"
            ],
            "url": [
              "https://phoenixtrap.com/2022/01/19/get-out-early-with-perl-statement-modifiers/",
              "https://phoenixtrap.com/2022/01/19/get-out-early-with-perl-statement-modifiers/"
            ],
            "updated": [
              "2022-01-19T09:00:00-06:00"
            ],
            "published": [
              "2022-01-19T09:00:00-06:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/01/pexels-photo-235975.jpeg?fit=668%2C444&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": "arrow communication direction display"
              }
            ],
            "content": [
              {
                "html": "<p>When I first start­ed writ­ing Perl in my ear­ly 20’s, I tend­ed to fol­low a lot of the <a href=\"https://en.wikipedia.org/wiki/Structured_programming\">struc­tured pro­gram­ming</a> con­ven­tions I had learned in school through <a href=\"https://en.wikipedia.org/wiki/Pascal_(programming_language)\">Pascal</a>, espe­cial­ly the notion that every func­tion has a <a href=\"https://wiki.c2.com/?SingleFunctionExitPoint\">sin­gle point of exit</a>. For example:</p>\n<pre class=\"wp-block-code\"><code>sub double_even_number {\n    # not using <a href=\"https://perldoc.perl.org/perlsub#Signatures\">signatures</a>, this is mid-1990's code\n    my $number = shift;\n\n    if (not $number % 2) {\n        $number *= 2;\n    }\n\n    return $number; \n}</code></pre>\n<p>This could get pret­ty con­vo­lut­ed, espe­cial­ly if I was doing some­thing like val­i­dat­ing mul­ti­ple argu­ments. And at the time I didn’t yet grok how to han­dle <a href=\"https://phoenixtrap.com/2021/02/22/exceptional-perl-failure-is-an-option/\">excep­tions</a> with <a href=\"https://perldoc.perl.org/functions/eval\"><code>eval</code></a> and <code><a href=\"https://perldoc.perl.org/functions/die\">die</a></code>, so I’d end up with code like:</p>\n<pre class=\"wp-block-code\"><code>sub print_postal_address {\n    # <a href=\"https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitManyArgs\">too many arguments</a>, I know\n    my ($name, $street1, $street2, $city, $state, $zip) = @_;\n    # also this notion of addresses is <a href=\"https://www.mjt.me.uk/posts/falsehoods-programmers-believe-about-addresses/\">naive and US-centric</a>\n\n    my $error;\n\n    if (!$name) {\n        $error = 'no name';\n    }\n    else {\n        print \"$name\\n\";\n\n        if (!$street1) {\n            $error = 'no street';\n        }\n        else {\n            print \"$street1\\n\";\n\n            if ($street2) {\n                print \"$street2\\n\";\n            }\n\n            if (!$city) {\n                $error = 'no city';\n            }\n            else {\n                print \"$city, \";\n\n                if (!$state) {\n                    $error = 'no state';\n                }\n                else {\n                    print \"$state \";\n\n                    if (!$zip) {\n                        $error = 'no ZIP code';\n                    }\n                    else {\n                        print \"$zip\\n\";\n                    }\n                }\n            }\n        }\n    }\n\n    return $error;\n}</code></pre>\n<p>What a mess. Want to count all those braces to make sure they’re bal­anced? This is some­times called the <a href=\"https://wiki.c2.com/?ArrowAntiPattern\">arrow anti-​pattern</a>, with the arrowhead(s) being the most nest­ed state­ment. The default <a href=\"https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitDeepNests\">ProhibitDeepNests <code>perlcritic</code> pol­i­cy</a> is meant to keep you from doing that.</p>\n<p>The way out (lit­er­al­ly) is <a href=\"https://wiki.c2.com/?GuardClause\">guard claus­es</a>: check­ing ear­ly if some­thing is valid and bail­ing out quick­ly if not. The above exam­ple could be written:</p>\n<pre class=\"wp-block-code\"><code>sub print_postal_address {\n    my ($name, $street1, $street2, $city, $state, $zip) = @_;\n\n    if (!$name) {\n        return 'no name';\n    }\n    if (!$street1) {\n        return 'no street1';\n    }\n    if (!$city) {\n        return 'no city';\n    }\n    if (!$state) {\n        return 'no state';\n    }\n    if (!$zip) {\n        return 'no zip';\n    }\n\n    print join \"\\n\",\n      $name,\n      $street1,\n      $street2 ? $street2 : (),\n      \"$city, $state $zip\\n\";\n\n    return;\n}</code></pre>\n<p>With Perl’s <a href=\"https://perldoc.perl.org/perlsyn#Statement-Modifiers\">state­ment mod­i­fiers</a> (some­times called post­fix con­trols) we can do even better:</p>\n<pre class=\"wp-block-code\"><code>    ...\n\n    return 'no name'    if !$name;\n    return 'no street1' if !$street1;\n    return 'no city'    if !$city;\n    return 'no state'   if !$state;\n    return 'no zip'     if !$zip;\n\n    ...</code></pre>\n<p>(Why <code>if</code> instead of <code>unless</code>? Because the lat­ter <a href=\"https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitUnlessBlocks\">can be con­fus­ing with double-​negatives</a>.)</p>\n<p>Guard claus­es aren’t lim­it­ed to the begin­nings of func­tions or even exit­ing func­tions entire­ly. Often you’ll want to skip or even exit ear­ly con­di­tions in a loop, like this exam­ple that process­es files from stan­dard input or the com­mand line:</p>\n<pre class=\"wp-block-code\"><code>while (&lt;&gt;) {\n    next if /^SKIP THIS LINE: /;\n    last if /^END THINGS HERE$/;\n\n    ...\n}</code></pre>\n<p>Of course, if you are val­i­dat­ing func­tion argu­ments, you should con­sid­er using actu­al <a href=\"https://perldoc.perl.org/perlsub#Signatures\">sub­rou­tine sig­na­tures</a> if you have a Perl new­er than v5.20 (released in 2014), or one of the <a href=\"https://phoenixtrap.com/2021/01/27/better-perl-with-subroutine-signatures-and-type-validation/\">oth­er type val­i­da­tion solu­tions</a> if not. Today I would write that postal func­tion like this, using <a href=\"https://metacpan.org/pod/Type::Params\">Type::Params</a> for val­i­da­tion and named arguments:</p>\n<pre class=\"wp-block-code\"><code>use feature qw(say state); \nuse Types::Standard 'Str';\nuse Type::Params 'compile_named';\n\nsub print_postal_address {\n    state $check = compile_named(\n        name    =&gt; Str,\n        street1 =&gt; Str,\n        street2 =&gt; Str, {optional =&gt; 1},\n        city    =&gt; Str,\n        state   =&gt; Str,\n        zip     =&gt; Str,\n    );\n    my $arg = $check-&gt;(@_);\n\n    say join \"\\n\",\n      $arg-&gt;{name},\n      $arg-&gt;{street1},\n      $arg-&gt;{street2} ? $arg-&gt;{street2} : (),\n      \"$arg-&gt;{city}, $arg-&gt;{state} $arg-&gt;{zip}\";\n\n    return;\n}\n\nprint_postal_address(\n    name    =&gt; 'J. Random Hacker',\n    street1 =&gt; '123 Any Street',\n    city    =&gt; 'Somewhereville',\n    state   =&gt; 'TX',\n    zip     =&gt; 12345,\n);</code></pre>\n<p>Note that was this part of a larg­er pro­gram, I’d wrap that <code>print_postal_address</code> call in a <a href=\"https://perldoc.perl.org/perlsyn#Try-Catch-Exception-Handling\"><code>try</code></a> block and <code>catch</code> excep­tions such as those thrown by the code ref­er­ence <code>$check</code> gen­er­at­ed by <a href=\"https://metacpan.org/pod/Type::Params#compile_named(@spec)\"><code>compile_named</code></a>. This high­lights one con­cern of guard claus­es and oth­er <a href=\"https://medium.com/swlh/return-early-pattern-3d18a41bba8\"><span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>return ear­ly” pat­terns</a>: depend­ing on how much has already occurred in your pro­gram, you may have to per­form some resource cleanup either in a <code>catch</code> block or some­thing like <a href=\"https://metacpan.org/pod/Syntax::Keyword::Try#finally\">Syntax::Keyword::Try’s <code>finally</code></a> block if you need to tidy up after both suc­cess and failure.</p>",
                "value": "When I first start­ed writ­ing Perl in my ear­ly 20’s, I tend­ed to fol­low a lot of the struc­tured pro­gram­ming con­ven­tions I had learned in school through Pascal, espe­cial­ly the notion that every func­tion has a sin­gle point of exit. For example:\nsub double_even_number {\n    # not using signatures, this is mid-1990's code\n    my $number = shift;\n\n    if (not $number % 2) {\n        $number *= 2;\n    }\n\n    return $number; \n}\nThis could get pret­ty con­vo­lut­ed, espe­cial­ly if I was doing some­thing like val­i­dat­ing mul­ti­ple argu­ments. And at the time I didn’t yet grok how to han­dle excep­tions with eval and die, so I’d end up with code like:\nsub print_postal_address {\n    # too many arguments, I know\n    my ($name, $street1, $street2, $city, $state, $zip) = @_;\n    # also this notion of addresses is naive and US-centric\n\n    my $error;\n\n    if (!$name) {\n        $error = 'no name';\n    }\n    else {\n        print \"$name\\n\";\n\n        if (!$street1) {\n            $error = 'no street';\n        }\n        else {\n            print \"$street1\\n\";\n\n            if ($street2) {\n                print \"$street2\\n\";\n            }\n\n            if (!$city) {\n                $error = 'no city';\n            }\n            else {\n                print \"$city, \";\n\n                if (!$state) {\n                    $error = 'no state';\n                }\n                else {\n                    print \"$state \";\n\n                    if (!$zip) {\n                        $error = 'no ZIP code';\n                    }\n                    else {\n                        print \"$zip\\n\";\n                    }\n                }\n            }\n        }\n    }\n\n    return $error;\n}\nWhat a mess. Want to count all those braces to make sure they’re bal­anced? This is some­times called the arrow anti-​pattern, with the arrowhead(s) being the most nest­ed state­ment. The default ProhibitDeepNests perlcritic pol­i­cy is meant to keep you from doing that.\nThe way out (lit­er­al­ly) is guard claus­es: check­ing ear­ly if some­thing is valid and bail­ing out quick­ly if not. The above exam­ple could be written:\nsub print_postal_address {\n    my ($name, $street1, $street2, $city, $state, $zip) = @_;\n\n    if (!$name) {\n        return 'no name';\n    }\n    if (!$street1) {\n        return 'no street1';\n    }\n    if (!$city) {\n        return 'no city';\n    }\n    if (!$state) {\n        return 'no state';\n    }\n    if (!$zip) {\n        return 'no zip';\n    }\n\n    print join \"\\n\",\n      $name,\n      $street1,\n      $street2 ? $street2 : (),\n      \"$city, $state $zip\\n\";\n\n    return;\n}\nWith Perl’s state­ment mod­i­fiers (some­times called post­fix con­trols) we can do even better:\n    ...\n\n    return 'no name'    if !$name;\n    return 'no street1' if !$street1;\n    return 'no city'    if !$city;\n    return 'no state'   if !$state;\n    return 'no zip'     if !$zip;\n\n    ...\n(Why if instead of unless? Because the lat­ter can be con­fus­ing with double-​negatives.)\nGuard claus­es aren’t lim­it­ed to the begin­nings of func­tions or even exit­ing func­tions entire­ly. Often you’ll want to skip or even exit ear­ly con­di­tions in a loop, like this exam­ple that process­es files from stan­dard input or the com­mand line:\nwhile (<>) {\n    next if /^SKIP THIS LINE: /;\n    last if /^END THINGS HERE$/;\n\n    ...\n}\nOf course, if you are val­i­dat­ing func­tion argu­ments, you should con­sid­er using actu­al sub­rou­tine sig­na­tures if you have a Perl new­er than v5.20 (released in 2014), or one of the oth­er type val­i­da­tion solu­tions if not. Today I would write that postal func­tion like this, using Type::Params for val­i­da­tion and named arguments:\nuse feature qw(say state); \nuse Types::Standard 'Str';\nuse Type::Params 'compile_named';\n\nsub print_postal_address {\n    state $check = compile_named(\n        name    => Str,\n        street1 => Str,\n        street2 => Str, {optional => 1},\n        city    => Str,\n        state   => Str,\n        zip     => Str,\n    );\n    my $arg = $check->(@_);\n\n    say join \"\\n\",\n      $arg->{name},\n      $arg->{street1},\n      $arg->{street2} ? $arg->{street2} : (),\n      \"$arg->{city}, $arg->{state} $arg->{zip}\";\n\n    return;\n}\n\nprint_postal_address(\n    name    => 'J. Random Hacker',\n    street1 => '123 Any Street',\n    city    => 'Somewhereville',\n    state   => 'TX',\n    zip     => 12345,\n);\nNote that was this part of a larg­er pro­gram, I’d wrap that print_postal_address call in a try block and catch excep­tions such as those thrown by the code ref­er­ence $check gen­er­at­ed by compile_named. This high­lights one con­cern of guard claus­es and oth­er ​“return ear­ly” pat­terns: depend­ing on how much has already occurred in your pro­gram, you may have to per­form some resource cleanup either in a catch block or some­thing like Syntax::Keyword::Try’s finally block if you need to tidy up after both suc­cess and failure."
              }
            ],
            "category": [
              "die",
              "eval",
              "exceptions",
              "Perl",
              "perlcritic",
              "signatures",
              "Syntax::Keyword::Try",
              "Type::Params"
            ]
          },
          "id": "post-1936"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Highlighting members of the Perl family"
            ],
            "url": [
              "https://phoenixtrap.com/2022/01/11/highlighting-members-of-the-perl-family/",
              "https://phoenixtrap.com/2022/01/11/highlighting-members-of-the-perl-family/"
            ],
            "updated": [
              "2022-01-11T09:00:00-06:00"
            ],
            "published": [
              "2022-01-11T09:00:00-06:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/01/pexels-photo-461049.jpeg?fit=668%2C541&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": "ground group growth hands"
              }
            ],
            "content": [
              {
                "html": "<p>This past year of <a href=\"https://phoenixtrap.com/tag/perl\">blog­ging</a> has intro­duced me to a wide vari­ety of peo­ple in the <a href=\"https://www.perl.org/community.html\">Perl com­mu­ni­ty</a>. Some I’ve admired from afar for years due to their pub­lished work, and even more I’ve <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>met” inter­act­ing on social media and oth­er forums. So this will be the first in an occa­sion­al series high­light­ing not just the code, but the peo­ple that make up the Perl family.</p>\n<h2><a href=\"http://www.leonerd.org.uk/\">Paul <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>LeoNerd” Evans</a></h2>\n<p>I first came across Paul’s work dur­ing his series last year on <a href=\"https://phoenixtrap.com/2021/02/01/paul-evans-writing-a-core-perl-feature/\">writ­ing a core Perl fea­ture</a>; he’s respon­si­ble for <a href=\"https://perldoc.perl.org/perl5320delta#The-isa-Operator\">Perl v5.32’s <code>isa</code> oper­a­tor</a> and <a href=\"https://perldoc.perl.org/perl5340delta#Experimental-Try/Catch-Syntax\">v5.34’s exper­i­men­tal <code>try</code>/​<code>catch</code> excep­tion han­dling syn­tax</a>. I <a href=\"https://www.perl.com/article/interview-trying-to-catch-paul-leonerd-evans/\">inter­viewed him about the lat­ter</a> for Perl.com in March 2021. He’s been <a href=\"https://metacpan.org/author/PEVANS\">active on CPAN</a> for so much longer, though, and <a href=\"https://www.nntp.perl.org/group/perl.perl5.porters/2021/07/msg260858.html\">joined the Perl Steering Council in July</a>. He’s also often a help­ful voice on <a href=\"https://web.libera.chat/#perl\">IRC</a>.</p>\n<h2><a href=\"https://www.urbanguitarlegend.com/\">Elliot Holden</a></h2>\n<p>Renowned author and train­er <a href=\"http://www.stonehenge.com/merlyn/\">Randal L. <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>mer­lyn” Schwartz</a> linked over the week­end in a pri­vate Facebook group to Elliot’s impas­sioned <a href=\"https://youtu.be/FQXjLG0DjPo\">YouTube video about his day job as a Perl web appli­ca­tion devel­op­er</a>. Through his alter ego <a href=\"https://www.urbanguitarlegend.com/\">Urban Guitar Legend</a> Elliot is also a pas­sion­ate musi­cian; besides gig­ging and record­ing he’s been <a href=\"https://youtube.com/c/Urbanguitarlegend\">post­ing videos for nine years</a>. (I’m a bit envi­ous since I took a break from <a href=\"https://phoenixtrap.com/music/\">music</a> almost twen­ty years ago and haven’t man­aged to recap­ture it.) Elliot seems like the quin­tes­sen­tial needs-​to-​get-​shit-​done devel­op­er, and Perl is per­fect for that.</p>\n<h2><a href=\"https://szabgab.com/\">Gábor Szabó</a></h2>\n<p>Gábor is a poly­glot (both in human and com­put­er lan­guages) train­er, con­sul­tant, and author, writ­ing about pro­gram­ming and devops on his <a href=\"https://code-maven.com/\">Code Maven</a> and <a href=\"https://perlmaven.com/\">Perl Maven</a> web­sites. He’s also the founder and co-​editor of <a href=\"https://perlweekly.com/\">Perl Weekly</a> and recip­i­ent of a <a href=\"https://www.perl.org/advocacy/white_camel/2008.html\">Perl White Camel award in 2008</a> thanks to his orga­ni­za­tion­al and sup­port con­tri­bu­tions. Last year he <a href=\"https://perlmaven.com/course-management-app-in-mojolicious\">intro­duced me to the world of live pair pro­gram­ming</a>, work­ing on a web appli­ca­tion using the <a href=\"https://mojolicious.org/\">Mojolicious frame­work</a>.</p>\n<hr class=\"wp-block-separator\">\n<p>If you’re on Twitter and look­ing to con­nect with oth­er Perl devel­op­ers, please con­sid­er par­tic­i­pat­ing in <a href=\"https://twitter.com/i/communities/1471579416216145924\">the Perl com­mu­ni­ty</a> I’ve set up there. <a href=\"https://help.twitter.com/en/using-twitter/communities\">Twitter Communities</a> are topic-​specific mod­er­at­ed dis­cus­sion groups, unlike the free­wheel­ing <a href=\"https://help.twitter.com/en/using-twitter/how-to-use-hashtags\">#hash­tags</a> sys­tem that can be dilut­ed by spam or top­ics that share the same name. Unfortunately, they’re still read-​only on the <a href=\"https://play.google.com/store/apps/details?id=com.twitter.android\">Twitter Android app</a>, but you can par­tic­i­pate ful­ly on <a href=\"https://apps.apple.com/us/app/twitter/id333903271\">iOS/​iPadOS</a> and <a href=\"https://twitter.com/\">the web­site</a>.</p>",
                "value": "This past year of blog­ging has intro­duced me to a wide vari­ety of peo­ple in the Perl com­mu­ni­ty. Some I’ve admired from afar for years due to their pub­lished work, and even more I’ve ​“met” inter­act­ing on social media and oth­er forums. So this will be the first in an occa­sion­al series high­light­ing not just the code, but the peo­ple that make up the Perl family.\nPaul ​“LeoNerd” Evans\nI first came across Paul’s work dur­ing his series last year on writ­ing a core Perl fea­ture; he’s respon­si­ble for Perl v5.32’s isa oper­a­tor and v5.34’s exper­i­men­tal try/​catch excep­tion han­dling syn­tax. I inter­viewed him about the lat­ter for Perl.com in March 2021. He’s been active on CPAN for so much longer, though, and joined the Perl Steering Council in July. He’s also often a help­ful voice on IRC.\nElliot Holden\nRenowned author and train­er Randal L. ​“mer­lyn” Schwartz linked over the week­end in a pri­vate Facebook group to Elliot’s impas­sioned YouTube video about his day job as a Perl web appli­ca­tion devel­op­er. Through his alter ego Urban Guitar Legend Elliot is also a pas­sion­ate musi­cian; besides gig­ging and record­ing he’s been post­ing videos for nine years. (I’m a bit envi­ous since I took a break from music almost twen­ty years ago and haven’t man­aged to recap­ture it.) Elliot seems like the quin­tes­sen­tial needs-​to-​get-​shit-​done devel­op­er, and Perl is per­fect for that.\nGábor Szabó\nGábor is a poly­glot (both in human and com­put­er lan­guages) train­er, con­sul­tant, and author, writ­ing about pro­gram­ming and devops on his Code Maven and Perl Maven web­sites. He’s also the founder and co-​editor of Perl Weekly and recip­i­ent of a Perl White Camel award in 2008 thanks to his orga­ni­za­tion­al and sup­port con­tri­bu­tions. Last year he intro­duced me to the world of live pair pro­gram­ming, work­ing on a web appli­ca­tion using the Mojolicious frame­work.\n\nIf you’re on Twitter and look­ing to con­nect with oth­er Perl devel­op­ers, please con­sid­er par­tic­i­pat­ing in the Perl com­mu­ni­ty I’ve set up there. Twitter Communities are topic-​specific mod­er­at­ed dis­cus­sion groups, unlike the free­wheel­ing #hash­tags sys­tem that can be dilut­ed by spam or top­ics that share the same name. Unfortunately, they’re still read-​only on the Twitter Android app, but you can par­tic­i­pate ful­ly on iOS/​iPadOS and the web­site."
              }
            ],
            "category": [
              "exceptions",
              "IRC",
              "meta",
              "Mojolicious",
              "people",
              "Perl",
              "Perl.com",
              "social media",
              "Twitter"
            ]
          },
          "id": "post-1915"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Perl warnings and the warn function"
            ],
            "url": [
              "https://phoenixtrap.com/2022/01/04/perl-warnings-and-the-warn-function/",
              "https://phoenixtrap.com/2022/01/04/perl-warnings-and-the-warn-function/"
            ],
            "updated": [
              "2022-01-04T09:00:00-06:00"
            ],
            "published": [
              "2022-01-04T09:00:00-06:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2022/01/4D8E458E-07B0-48D2-8574-50D639C75EB1-scaled.jpeg?fit=668%2C444&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": ""
              }
            ],
            "content": [
              {
                "html": "<p>I men­tioned in pass­ing <a href=\"https://phoenixtrap.com/2021/12/28/avoid-yoda-conditions-in-perl-you-should/\" data-type=\"post\" data-id=\"1793\">last week</a> that the next major release of Perl, v5.36, is set to enable <code><a href=\"https://perldoc.perl.org/warnings\">warnings</a></code> by default <a href=\"https://metacpan.org/release/NEILB/perl-5.35.7/view/pod/perl5353delta.pod#Core-Enhancements\">for code that opts in to <code>use v5.35;</code> or above</a>. Commemorating Perl’s 34<sup class=\"ordinal\">th</sup> birth­day <a href=\"https://phoenixtrap.com/2021/12/21/34-at-34-for-v5-34-modern-perl-features-for-perls-birthday/\" data-type=\"post\" data-id=\"1803\">the week before that</a>, I not­ed that the <a href=\"https://phoenixtrap.com/2021/12/21/34-at-34-for-v5-34-modern-perl-features-for-perls-birthday/\" data-type=\"post\" data-id=\"1803\">warn­ings sys­tem has been get­ting ever finer-​grained</a> since its intro­duc­tion in 2000. And fel­low Perl blog­ger and <a href=\"https://metacpan.org/author/WYANT\">CPAN author Tom Wyant</a> has been cat­a­loging his favorites over the past sev­er­al months — the lat­est as of this writ­ing was <a href=\"http://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-ambiguous.html\">on the <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>ambigu­ous” cat­e­go­ry of warn­ings</a>, and you can find links to pre­vi­ous entries in his series at the bot­tom of that post.</p>\n<p>It occurred to me after­ward that there may be some con­fu­sion between the <code>warnings</code> prag­ma and the relat­ed <a href=\"https://perldoc.perl.org/functions/warn\"><code>warn</code> func­tion</a> for report­ing arbi­trary run­time errors. <code>warn</code> out­puts its argu­ments to the <a href=\"https://perldoc.perl.org/perlglossary#standard-error\">stan­dard error (<code>STDERR</code>) stream</a>, or if it’s not giv­en any then you get a string with any excep­tion from <code><a href=\"https://perldoc.perl.org/variables/%24@\"><span class=\"__cf_email__\" data-cfemail=\"250165\">[email protected]</span></a></code> (<code><a href=\"https://perldoc.perl.org/variables/%24EVAL_ERROR\">$EVAL_ERROR</a></code> under <code>use <a href=\"https://perldoc.perl.org/English\">English</a></code>) fol­lowed by a tab and then “<code>...caught at &lt;file&gt; line x.</code>” If that’s emp­ty too, a plain <code>warn</code> just says, <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span><code>Warning: something's wrong at &lt;file&gt; line x.</code>”, which isn’t exact­ly help­ful, but then again you didn’t give it much to go on.</p>\n<p><code>warn</code> out­put doesn’t have to go to <code>STDERR</code>, and this is where the rela­tion to the warn­ings prag­ma comes in because both are gov­erned by the <code>__WARN__</code> sig­nal han­dler in the <a href=\"https://perldoc.perl.org/variables/%25SIG\"><code>%SIG</code> hash</a>. Normally, you might opt to only dis­play run­time warn­ings if a debug­ging flag is set, like so:</p>\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\nmy $DEBUG = 0;\n$SIG{__WARN__} = sub { warn @_ if $DEBUG };\nwarn 'shhh'; # silenced\n\n$DEBUG = 1;\nwarn 'hello warnings';</code></pre>\n<p>But if you set that sig­nal han­dler in a <a href=\"https://perldoc.perl.org/perlmod#BEGIN%2C-UNITCHECK%2C-CHECK%2C-INIT-and-END\"><code>BEGIN</code> block</a>, it catch­es compile-​time warn­ings too, in which case flip­ping a flag after the fact has no effect — the compiler’s already run:</p>\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\nmy $DEBUG = 0;\nBEGIN { $SIG{__WARN__} = sub { warn @_ if $DEBUG } }\nmy $foo = 'hello';\nmy $foo = 'world'; # no warning issued here\n\n$DEBUG = 1;\nmy $foo = 'howdy'; # still nothing</code></pre>\n<p>By the way, both <code>__WARN__</code> and <code>__DIE__</code> hooks are also used by the <a href=\"https://perldoc.perl.org/Carp\">Carp mod­ule</a> and its friends, so you can use the same tech­nique with their enhanced output:</p>\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Carp qw(carp cluck);\n\nmy $DEBUG = 0;\nBEGIN { $SIG{__WARN__} = sub { warn @_ if $DEBUG } }\ncarp 'quiet fish';\n\n$DEBUG = 1;\nloud_chicken();\n\nsub loud_chicken {\n    cluck 'here comes a stack trace';\n}</code></pre>\n<p>You <em>could</em> use these as step­ping stones towards a debug log for larg­er appli­ca­tions, but at that point, I’d sug­gest look­ing into one of the log­ging mod­ules on CPAN like <a href=\"https://metacpan.org/pod/Log::Log4perl\">Log::Log4perl</a> (not to be con­fused with that <a href=\"https://phoenixtrap.com/2021/12/14/a-brief-note-on-log4perl/\" data-type=\"post\" data-id=\"1775\">lately-​problematic Java library</a>), <a href=\"https://metacpan.org/pod/Log::Dispatch\">Log::Dispatch</a> (which can be <a href=\"https://metacpan.org/pod/Log::Log4perl#Additional-Appenders-via-Log::Dispatch\">wired into Log4perl</a>), or <a href=\"https://metacpan.org/pod/Task::Kensho::Logging\">some­thing else</a> to suit your needs.</p>",
                "value": "I men­tioned in pass­ing last week that the next major release of Perl, v5.36, is set to enable warnings by default for code that opts in to use v5.35; or above. Commemorating Perl’s 34th birth­day the week before that, I not­ed that the warn­ings sys­tem has been get­ting ever finer-​grained since its intro­duc­tion in 2000. And fel­low Perl blog­ger and CPAN author Tom Wyant has been cat­a­loging his favorites over the past sev­er­al months — the lat­est as of this writ­ing was on the ​“ambigu­ous” cat­e­go­ry of warn­ings, and you can find links to pre­vi­ous entries in his series at the bot­tom of that post.\nIt occurred to me after­ward that there may be some con­fu­sion between the warnings prag­ma and the relat­ed warn func­tion for report­ing arbi­trary run­time errors. warn out­puts its argu­ments to the stan­dard error (STDERR) stream, or if it’s not giv­en any then you get a string with any excep­tion from [email protected] ($EVAL_ERROR under use English) fol­lowed by a tab and then “...caught at <file> line x.” If that’s emp­ty too, a plain warn just says, ​“Warning: something's wrong at <file> line x.”, which isn’t exact­ly help­ful, but then again you didn’t give it much to go on.\nwarn out­put doesn’t have to go to STDERR, and this is where the rela­tion to the warn­ings prag­ma comes in because both are gov­erned by the __WARN__ sig­nal han­dler in the %SIG hash. Normally, you might opt to only dis­play run­time warn­ings if a debug­ging flag is set, like so:\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\nmy $DEBUG = 0;\n$SIG{__WARN__} = sub { warn @_ if $DEBUG };\nwarn 'shhh'; # silenced\n\n$DEBUG = 1;\nwarn 'hello warnings';\nBut if you set that sig­nal han­dler in a BEGIN block, it catch­es compile-​time warn­ings too, in which case flip­ping a flag after the fact has no effect — the compiler’s already run:\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\nmy $DEBUG = 0;\nBEGIN { $SIG{__WARN__} = sub { warn @_ if $DEBUG } }\nmy $foo = 'hello';\nmy $foo = 'world'; # no warning issued here\n\n$DEBUG = 1;\nmy $foo = 'howdy'; # still nothing\nBy the way, both __WARN__ and __DIE__ hooks are also used by the Carp mod­ule and its friends, so you can use the same tech­nique with their enhanced output:\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Carp qw(carp cluck);\n\nmy $DEBUG = 0;\nBEGIN { $SIG{__WARN__} = sub { warn @_ if $DEBUG } }\ncarp 'quiet fish';\n\n$DEBUG = 1;\nloud_chicken();\n\nsub loud_chicken {\n    cluck 'here comes a stack trace';\n}\nYou could use these as step­ping stones towards a debug log for larg­er appli­ca­tions, but at that point, I’d sug­gest look­ing into one of the log­ging mod­ules on CPAN like Log::Log4perl (not to be con­fused with that lately-​problematic Java library), Log::Dispatch (which can be wired into Log4perl), or some­thing else to suit your needs."
              }
            ],
            "category": [
              "Carp",
              "CPAN",
              "die",
              "exceptions",
              "Log::Dispatch",
              "Log::Log4perl",
              "logging",
              "Perl",
              "signal handlers",
              "warn",
              "warnings"
            ]
          },
          "id": "post-1890"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Avoid Yoda conditions in Perl you should"
            ],
            "url": [
              "https://phoenixtrap.com/2021/12/28/avoid-yoda-conditions-in-perl-you-should/",
              "https://phoenixtrap.com/2021/12/28/avoid-yoda-conditions-in-perl-you-should/"
            ],
            "updated": [
              "2021-12-28T09:00:00-06:00"
            ],
            "published": [
              "2021-12-28T09:00:00-06:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/9C78CCFE-A940-4579-A5C2-119AAAC340AD.jpeg?fit=668%2C445&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": ""
              }
            ],
            "content": [
              {
                "html": "<p>I remem­ber a brief time in the mid-​2000s insist­ing on so-​called <a href=\"https://en.wikipedia.org/wiki/Yoda_conditions\"><span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>Yoda con­di­tions”</a> in my Perl. I would place con­stants to the left of <a href=\"https://perldoc.perl.org/perlop#Equality-Operators\">equal­i­ty com­par­isons</a>. In case I acci­den­tal­ly typed a sin­gle <code>=</code> instead of <code>==</code>, the com­pil­er would catch it instead of blithe­ly <a href=\"https://perldoc.perl.org/perlop#Assignment-Operators\">assign­ing</a> a vari­able. E.g.:</p>\n<pre class=\"wp-block-code\"><code>if ( $foo == 42 ) { ... } # don’t do this\nif ( 42 == $foo ) { ... } # do this\nif ( $foo = 42  ) { ... } # to prevent this</code></pre>\n<p>And because <a href=\"https://www.goodreads.com/quotes/353571\">a fool­ish con­sis­ten­cy is the hob­gob­lin of lit­tle minds</a>, I would even extend this to string and rela­tion­al comparisons.</p>\n<pre class=\"wp-block-code\"><code>if ( 'bar' eq $foo ) { ... } # weirdo\nif ( 42 &gt; $foo )     { ... } # make it stop</code></pre>\n<p>It looks weird, and it turns out it’s unnec­es­sary as long as you pre­cede your code with <code>use warnings;</code>. Perl will then <a href=\"https://perldoc.perl.org/perldiag#Found-=-in-conditional,-should-be-==\">warn you</a>: <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span><code>Found = in conditional, should be ==</code>“. (Sidenote: Perl v5.36, due in mid-​2022, is <a href=\"https://metacpan.org/release/ETHER/perl-5.35.3/view/pod/perldelta.pod#Core-Enhancements\">slat­ed to enable warn­ings by default</a> if you do <code>use v5.35;</code> or above, in addi­tion to the strict­ness that <a href=\"https://perldoc.perl.org/perl5120delta#Implicit-strictures\">was enabled with <code>use v5.11;</code></a>. Yay for less boilerplate!)</p>\n<p>If you want to fatal­ly catch this and many oth­er warn­ings, use the <a href=\"https://metacpan.org/pod/strictures\">stric­tures mod­ule from CPAN</a> in your code like this:</p>\n<pre class=\"wp-block-code\"><code>use strictures 2;</code></pre>\n<p>This will cause your code to throw an <a href=\"https://phoenixtrap.com/2021/02/22/exceptional-perl-failure-is-an-option/\">excep­tion</a> if it com­mits many <a href=\"https://perldoc.perl.org/warnings#Category-Hierarchy\">cat­e­gories</a> of mis­takes. If you’re run­ning in a ver­sion con­trol sys­tem’s work­ing direc­to­ry (specif­i­cal­ly <a href=\"https://git-scm.com/\">Git</a>, <a href=\"https://subversion.apache.org/\">Subversion</a>, <a href=\"https://www.mercurial-scm.org/\">Mercurial</a>, or <a href=\"https://bazaar.canonical.com/\">Bazaar</a>), the mod­ule also pre­vents you from using <a href=\"https://perldoc.perl.org/perlobj#Indirect-Object-Syntax\">indi­rect object syn­tax</a>, <a href=\"https://perldoc.perl.org/variables/%24;\">Perl 4‑style mul­ti­di­men­sion­al arrays</a>, and <a href=\"https://perldoc.perl.org/functions/open#Assigning-a-filehandle-to-a-bareword\">bare­word file­han­dles</a>.</p>\n<p>Getting back to assign­ments vs. con­di­tion­als, there is one case where I’ve found it to be accept­able to use an assign­ment inside an if state­ment, and that’s when I need to use the result of a check inside the con­di­tion. For example:</p>\n<pre class=\"wp-block-code\"><code>if ( my $foo = some_truthy_function() ) {\n    ... # do something further with $foo\n}</code></pre>\n<p>This keeps the scope of <code>some_truthy_function()</code><span class=\"push-single\"></span>​<span class=\"pull-single\">‘</span>s result inside the block so that I don’t pol­lute the out­er scope with a tem­po­rary vari­able. Fortunately, Perl does­n’t warn on this syntax.</p>\n<span id=\"tip-jar-wp-element-1\" class=\"tip-jar-wp-element\" tip-jar-wp-form-number=\"1\"></span>",
                "value": "I remem­ber a brief time in the mid-​2000s insist­ing on so-​called ​“Yoda con­di­tions” in my Perl. I would place con­stants to the left of equal­i­ty com­par­isons. In case I acci­den­tal­ly typed a sin­gle = instead of ==, the com­pil­er would catch it instead of blithe­ly assign­ing a vari­able. E.g.:\nif ( $foo == 42 ) { ... } # don’t do this\nif ( 42 == $foo ) { ... } # do this\nif ( $foo = 42  ) { ... } # to prevent this\nAnd because a fool­ish con­sis­ten­cy is the hob­gob­lin of lit­tle minds, I would even extend this to string and rela­tion­al comparisons.\nif ( 'bar' eq $foo ) { ... } # weirdo\nif ( 42 > $foo )     { ... } # make it stop\nIt looks weird, and it turns out it’s unnec­es­sary as long as you pre­cede your code with use warnings;. Perl will then warn you: ​“Found = in conditional, should be ==“. (Sidenote: Perl v5.36, due in mid-​2022, is slat­ed to enable warn­ings by default if you do use v5.35; or above, in addi­tion to the strict­ness that was enabled with use v5.11;. Yay for less boilerplate!)\nIf you want to fatal­ly catch this and many oth­er warn­ings, use the stric­tures mod­ule from CPAN in your code like this:\nuse strictures 2;\nThis will cause your code to throw an excep­tion if it com­mits many cat­e­gories of mis­takes. If you’re run­ning in a ver­sion con­trol sys­tem’s work­ing direc­to­ry (specif­i­cal­ly Git, Subversion, Mercurial, or Bazaar), the mod­ule also pre­vents you from using indi­rect object syn­tax, Perl 4‑style mul­ti­di­men­sion­al arrays, and bare­word file­han­dles.\nGetting back to assign­ments vs. con­di­tion­als, there is one case where I’ve found it to be accept­able to use an assign­ment inside an if state­ment, and that’s when I need to use the result of a check inside the con­di­tion. For example:\nif ( my $foo = some_truthy_function() ) {\n    ... # do something further with $foo\n}\nThis keeps the scope of some_truthy_function()​‘s result inside the block so that I don’t pol­lute the out­er scope with a tem­po­rary vari­able. Fortunately, Perl does­n’t warn on this syntax."
              }
            ],
            "category": [
              "conditions",
              "exceptions",
              "Perl",
              "Star Wars",
              "strictures",
              "variables",
              "warnings",
              "Yoda"
            ]
          },
          "id": "post-1793"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "34 at 34 for v5.34: Modern Perl features for Perl’s birthday"
            ],
            "url": [
              "https://phoenixtrap.com/2021/12/21/34-at-34-for-v5-34-modern-perl-features-for-perls-birthday/",
              "https://phoenixtrap.com/2021/12/21/34-at-34-for-v5-34-modern-perl-features-for-perls-birthday/"
            ],
            "updated": [
              "2021-12-21T09:00:00-06:00"
            ],
            "published": [
              "2021-12-21T09:00:00-06:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/6B6EA21B-2DAC-457E-B08D-A45B970C0FEC-scaled.jpeg?fit=668%2C444&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": ""
              }
            ],
            "content": [
              {
                "html": "<p>Friday, December 17, 2021, marked the <a href=\"https://github.com/Perl/perl5/commit/8d063cd8450e59ea1c611a2f4f5a21059a2804f1\">thirty-​fourth birth­day</a> of the Perl pro­gram­ming lan­guage, and coin­ci­den­tal­ly this year saw the <a href=\"https://www.nntp.perl.org/group/perl.perl5.porters/2021/05/msg260110.html\">release of ver­sion 5.34</a>. There are plen­ty of Perl devel­op­ers out there who haven’t kept up with recent (and not-​so-​recent) improve­ments to the lan­guage and its ecosys­tem, so I thought I might list a batch. (You may have seen some of these before in May’s post <a href=\"https://phoenixtrap.com/2021/05/25/perl-can-do-that-now/\" data-type=\"post\" data-id=\"706\"><span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>Perl can do that now!”</a>)</p>\n<h2><a href=\"https://perldoc.perl.org/feature\">The <code>feature</code> pragma</a></h2>\n<p><a href=\"https://www.nntp.perl.org/group/perl.perl5.porters/2007/12/msg131636.html\">Perl v5.10 was released in December 2007</a>, and with it came <code><a href=\"https://perldoc.perl.org/feature\">feature</a></code>, a way of enabling new syn­tax with­out break­ing back­ward com­pat­i­bil­i­ty. You can enable indi­vid­ual fea­tures by name (e.g., <code>use feature qw(say fc);</code> for the <code><a href=\"https://perldoc.perl.org/functions/say\">say</a></code> and <code><a href=\"https://perldoc.perl.org/functions/fc\">fc</a></code> key­words), or by using a <a href=\"https://perldoc.perl.org/feature#FEATURE-BUNDLES\">fea­ture bun­dle</a> based on the Perl ver­sion that intro­duced them. For exam­ple, the following:</p>\n<pre class=\"wp-block-code\"><code>use feature ':5.34';</code></pre>\n<p>…gives you the equiv­a­lent of:</p>\n<pre class=\"wp-block-code\"><code>use feature qw(bareword_filehandles bitwise current_sub evalbytes fc indirect multidimensional postderef_qq say state switch unicode_eval unicode_strings);</code></pre>\n<p>Boy, that’s a mouth­ful. <em>Feature bun­dles are good.</em> The cor­re­spond­ing bun­dle also gets <a href=\"https://perldoc.perl.org/feature#IMPLICIT-LOADING\">implic­it­ly loaded</a> if you spec­i­fy a min­i­mum required Perl ver­sion, e.g., with <code>use v5.32;</code>. If you <code>use v5.12;</code> or high­er, <a href=\"https://perldoc.perl.org/strict\"><code>strict</code> mode</a> is enabled for free. So just say:</p>\n<pre class=\"wp-block-code\"><code>use v5.34;</code></pre>\n<p>And last­ly, one-​liners can use the <a href=\"https://perldoc.perl.org/perlrun#-E-commandline\"><code>-E</code> switch</a> instead of <code><a href=\"https://perldoc.perl.org/perlrun#-e-commandline\">-e</a></code> to enable all fea­tures for that ver­sion of Perl, so you can say the fol­low­ing on the com­mand line:</p>\n<pre class=\"wp-block-code\"><code>perl -E 'say \"Hello world!\"'</code></pre>\n<p>Instead of:</p>\n<pre class=\"wp-block-code\"><code>perl -e 'print \"Hello world!\\n\"'</code></pre>\n<p>Which is great when you’re try­ing to save some typing.</p>\n<h2><a href=\"https://perldoc.perl.org/experimental\">The <code>experimental</code> pragma</a></h2>\n<p>Sometimes new Perl fea­tures need to be <a href=\"https://perldoc.perl.org/perlpolicy#experimental\">dri­ven a cou­ple of releas­es around the block</a> before their behav­ior set­tles. Those exper­i­ments are doc­u­ment­ed in <a href=\"https://perldoc.perl.org/perlexperiment\">the per­l­ex­per­i­ment page</a>, and usu­al­ly, you need both a <code>use feature</code> (see above) and <code>no <a href=\"https://perldoc.perl.org/warnings\">warnings</a></code> state­ment to safe­ly enable them. Or you can sim­ply pass a list to <code>use <a href=\"https://perldoc.perl.org/experimental\">experimental</a></code> of the fea­tures you want, e.g.:</p>\n<pre class=\"wp-block-code\"><code>use experimental qw(isa postderef signatures);</code></pre>\n<h2 id=\"warnings\">Ever-​expanding <a href=\"https://perldoc.perl.org/warnings#Category-Hierarchy\"><code>warnings</code> categories</a>\n</h2>\n<p><a href=\"https://www.nntp.perl.org/group/perl.perl5.porters/2000/03/msg10668.html\">March 2000 saw the release of Perl 5.6</a>, and with it, the expan­sion of the <a href=\"https://perldoc.perl.org/perlrun#-w\"><code>-w</code> command-​line switch</a> to a sys­tem of fine-​grained con­trols for warn­ing against <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>dubi­ous con­structs” that can be turned on and off depend­ing on the lex­i­cal <a href=\"https://perldoc.perl.org/perlintro#Variable-scoping\">scope</a>. What start­ed as <a href=\"https://perldoc.perl.org/5.6.0/perllexwarn#Category-Hierarchy\">26 main and 20 sub­cat­e­gories</a> has <a href=\"https://perldoc.perl.org/warnings#Category-Hierarchy\">expand­ed into 31 main and 43 sub­cat­e­gories</a>, includ­ing warn­ings for the afore­men­tioned exper­i­men­tal features.</p>\n<p>As the <a href=\"https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::RequireUseWarnings#DESCRIPTION\">rel­e­vant Perl::Critic pol­i­cy says</a>, <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>Using warn­ings, and pay­ing atten­tion to what they say, is prob­a­bly the sin­gle most effec­tive way to improve the qual­i­ty of your code.” If you must vio­late warn­ings (per­haps because you’re reha­bil­i­tat­ing some lega­cy code), you can iso­late such vio­la­tions to a small scope and indi­vid­ual cat­e­gories. Check out the <a href=\"https://metacpan.org/pod/strictures\">stric­tures mod­ule on CPAN</a> if you’d like to go fur­ther and make a safe sub­set of these cat­e­gories fatal dur­ing development.</p>\n<h2 id=\"syntax-construct\">Document other recently-​introduced syntax with <a href=\"https://metacpan.org/pod/Syntax::Construct\">Syntax::Construct</a>\n</h2>\n<p>Not every new bit of Perl syn­tax is enabled with a <code>feature</code> guard. For the rest, there’s E. Choroba’s <a href=\"https://metacpan.org/pod/Syntax::Construct\">Syntax::Construct mod­ule on CPAN</a>. Rather than hav­ing to remem­ber which ver­sion of Perl intro­duced what, Syntax::Construct lets you declare only what you use and pro­vides a help­ful error mes­sage if some­one tries to run your code on an old­er unsup­port­ed ver­sion. Between it and the <code>feature</code> prag­ma, you can pre­vent many head-​scratching moments and give your users a chance to either upgrade or workaround.</p>\n<h2>Make built-​in functions throw exceptions with <code><a href=\"https://perldoc.perl.org/autodie\">autodie</a></code>\n</h2>\n<p>Many of Perl’s built-​in func­tions only return false on fail­ure, requir­ing the devel­op­er to check every time whether a file can be <code><a href=\"https://perldoc.perl.org/functions/open\">open</a></code>ed or a <code><a href=\"https://perldoc.perl.org/functions/system\">system</a></code> com­mand exe­cut­ed. The lex­i­cal <a href=\"https://perldoc.perl.org/autodie\"><code>autodie</code> prag­ma</a> replaces them with ver­sions that <a href=\"https://perldoc.perl.org/functions/die\">raise an excep­tion</a> with an <a href=\"https://perldoc.perl.org/autodie::exception\">object</a> that can be inter­ro­gat­ed for fur­ther details. No mat­ter how many func­tions or meth­ods deep a prob­lem occurs, you can choose to catch it and respond appro­pri­ate­ly. This leads us to…</p>\n<h2>\n<a href=\"https://perldoc.perl.org/perlsyn#Try-Catch-Exception-Handling\"><code>try</code>/​<code>catch</code> exception handling</a> and <a href=\"https://metacpan.org/pod/Feature::Compat::Try\">Feature::Compat::Try</a>\n</h2>\n<p><a href=\"https://www.nntp.perl.org/group/perl.perl5.porters/2021/05/msg260110.html\">This year’s Perl v5.34 release</a> intro­duced <a href=\"https://perldoc.perl.org/perlsyn#Try-Catch-Exception-Handling\">exper­i­men­tal <code>try</code>/​<code>catch</code> syn­tax</a> for excep­tion han­dling that should look more famil­iar to users of oth­er lan­guages while han­dling the <a href=\"https://metacpan.org/pod/Try::Tiny#BACKGROUND\">issues</a> sur­round­ing using <a href=\"https://perldoc.perl.org/functions/eval#Block-eval\">block <code>eval</code></a> and test­ing of the <a href=\"https://perldoc.perl.org/variables/%24@\">spe­cial <code><span class=\"__cf_email__\" data-cfemail=\"b591f5\">[email protected]</span></code> vari­able</a>. If you need to remain com­pat­i­ble with old­er ver­sions of Perl (back to v5.14), just use the <a href=\"https://metacpan.org/pod/Feature::Compat::Try\">Feature::Compat::Try mod­ule from CPAN</a> to auto­mat­i­cal­ly select either v5.34’s native <code>try</code>/​<code>catch</code> or a sub­set of the func­tion­al­i­ty pro­vid­ed by <a href=\"https://metacpan.org/pod/Syntax::Keyword::Try\">Syntax::Keyword::Try</a>.</p>\n<h2>Pluggable keywords</h2>\n<p>The above­men­tioned Syntax::Keyword::Try was made pos­si­ble by the <a href=\"https://perldoc.perl.org/perl5120delta#Pluggable-keywords\">intro­duc­tion of a plug­gable key­word mech­a­nism in 2010’s Perl v5.12</a>. So was the <a href=\"https://metacpan.org/pod/Future::AsyncAwait\">Future::AsyncAwait</a> asyn­chro­nous pro­gram­ming library and the <a href=\"https://metacpan.org/pod/Object::Pad\">Object::Pad</a> test­bed for new object-​oriented Perl syn­tax. If you’re handy with C and <a href=\"https://perldoc.perl.org/perlxs\">Perl’s XS glue lan­guage</a>, check out Paul <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>LeoNerd” Evans’ <a href=\"https://metacpan.org/pod/XS::Parse::Keyword\">XS::Parse::Keyword</a> mod­ule to get a leg up on devel­op­ing your own syn­tax module.</p>\n<h2>Define <code><a href=\"https://perldoc.perl.org/functions/package\">package</a></code>s with versions and blocks</h2>\n<p>Perl v5.12 also helped reduce clut­ter by enabling a <a href=\"https://perldoc.perl.org/functions/package\"><code>package</code> name­space dec­la­ra­tion</a> to <a href=\"https://perldoc.perl.org/perl5120delta#New-package-NAME-VERSION-syntax\">also include a ver­sion num­ber</a>, instead of requir­ing a sep­a­rate <code>our $VERSION = ...;</code> v5.14 fur­ther refined <code>package</code>s to be <a href=\"https://perldoc.perl.org/perl5140delta#package-block-syntax\">spec­i­fied in code blocks</a>, so a name­space dec­la­ra­tion can be the same as a lex­i­cal scope. Putting the two togeth­er gives you:</p>\n<pre class=\"wp-block-code\"><code>package Local::NewHotness v1.2.3 {\n    ...\n}</code></pre>\n<p>Instead of:</p>\n<pre class=\"wp-block-code\"><code>{\n    package Local::OldAndBusted;\n    use version 0.77; our $VERSION = version-&gt;declare(\"v1.2.3\");\n    ...\n}</code></pre>\n<p>I know which I’d rather do. (Though you may want to also <code>use Syntax::Construct qw(package-version package-block);</code> to help along with old­er instal­la­tions as <a href=\"https://phoenixtrap.com/#syntax-construct\">described above</a>.)</p>\n<h2><a href=\"https://perldoc.perl.org/perlop#Logical-Defined-Or\">The <code>//</code> defined-​or operator</a></h2>\n<p>This is an easy win <a href=\"https://perldoc.perl.org/perl5100delta#Defined-or-operator\">from Perl v5.10</a>:</p>\n<pre class=\"wp-block-code\"><code>defined $foo ? $foo : $bar  # replace this\n$foo // $bar                # with this</code></pre>\n<p>And:</p>\n<pre class=\"wp-block-code\"><code>$foo = $bar unless defined $foo  # replace this\n$foo //= $bar                    # with this</code></pre>\n<p>Perfect for assign­ing defaults to variables.</p>\n<h2>\n<a href=\"https://perldoc.perl.org/functions/state\"><code>state</code> variables</a> only initialize once</h2>\n<p>Speaking of vari­ables, ever want one to keep its old val­ue the next time a scope is entered, like <a href=\"https://perldoc.perl.org/perlsub#Persistent-Private-Variables\">in a <code>sub</code></a>? Declare it with <code><a href=\"https://perldoc.perl.org/functions/state\">state</a></code> instead of <code><a href=\"https://perldoc.perl.org/functions/my\">my</a></code>. Before <a href=\"https://perldoc.perl.org/perl5100delta#state()-variables\">Perl v5.10</a>, you need­ed to <a href=\"https://perldoc.perl.org/perlsub#Persistent-variables-with-closures\">use a clo­sure instead</a>.</p>\n<h2>Save some typing with <code><a href=\"https://perldoc.perl.org/functions/say\">say</a></code>\n</h2>\n<p><a href=\"https://perldoc.perl.org/perl5100delta#Core-Enhancements\">Perl v5.10’s bumper crop of enhance­ments</a> also includ­ed the <a href=\"https://perldoc.perl.org/functions/say\"><code>say</code> func­tion</a>, which han­dles the com­mon use case of <code><a href=\"https://perldoc.perl.org/functions/print\">print</a></code>ing a string or list of strings with a new­line. It’s less noise in your code and saves you four char­ac­ters. What’s not to love?</p>\n<h2>Note unimplemented code with <code><a href=\"https://perldoc.perl.org/perlsyn#The-Ellipsis-Statement\">...</a></code>\n</h2>\n<p>The <a href=\"https://perldoc.perl.org/perlsyn#The-Ellipsis-Statement\"><code>...</code> ellip­sis state­ment</a> (col­lo­qui­al­ly <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>yada-​yada”) gives you an easy place­hold­er for yet-​to-​be-​implemented code. It pars­es OK but will throw an excep­tion if exe­cut­ed. Hopefully, your <a href=\"https://metacpan.org/pod/Devel::Cover\">test cov­er­age</a> (or at least <a href=\"https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitYadaOperator\">sta­t­ic analy­sis</a>) will catch it before your users do.</p>\n<h2>Loop and enumerate arrays with <code><a href=\"https://perldoc.perl.org/functions/each\">each</a></code>, <code><a href=\"https://perldoc.perl.org/functions/keys\">keys</a></code>, and <code><a href=\"https://perldoc.perl.org/functions/values\">values</a></code>\n</h2>\n<p>The <code><a href=\"https://perldoc.perl.org/functions/each\">each</a></code>, <code><a href=\"https://perldoc.perl.org/functions/keys\">keys</a></code>, and <code><a href=\"https://perldoc.perl.org/functions/values\">values</a></code> func­tions have always been able to oper­ate on hash­es. <a href=\"https://perldoc.perl.org/perl5120delta#each,-keys,-values-are-now-more-flexible\">Perl v5.12 and above make them work on arrays, too.</a> The lat­ter two are main­ly for con­sis­ten­cy, but you can use <code>each</code> to iter­ate over an array’s indices and val­ues at the same time:</p>\n<pre class=\"wp-block-code\"><code>while (my ($index, $value) = each @array) {\n    ...\n}</code></pre>\n<p>This can be <a href=\"https://metacpan.org/pod/Perl::Critic::Policy::Community::Each\">prob­lem­at­ic in non-​trivial loops</a>, but I’ve found it help­ful in quick scripts and one-liners.</p>\n<h2><a href=\"https://perldoc.perl.org/perlsub#Localized-deletion-of-elements-of-composite-types\"><code>delete local</code> hash (and array) entries</a></h2>\n<p>Ever need­ed to <code><a href=\"https://perldoc.perl.org/functions/delete\">delete</a></code> an entry from a hash (e.g, an envi­ron­ment vari­able from <code><a href=\"https://perldoc.perl.org/variables/%25ENV\">%ENV</a></code> or a sig­nal han­dler from <code><a href=\"https://perldoc.perl.org/variables/%25SIG\">%SIG</a></code>) just inside a block? <a href=\"https://perldoc.perl.org/perl5120delta#delete-local\">Perl v5.12 lets you do that</a> with <code><a href=\"https://perldoc.perl.org/perlsub#Localized-deletion-of-elements-of-composite-types\">delete local</a></code>.</p>\n<h2>Paired hash slices</h2>\n<p>Jumping for­ward to <a href=\"https://www.nntp.perl.org/group/perl.perl5.porters/2014/05/msg215815.html\">2014’s Perl v5.20</a>, the <a href=\"https://perldoc.perl.org/perl5200delta#New-slice-syntax\">new <code>%foo{'bar', 'baz'}</code> syn­tax</a> enables you to <a href=\"https://perldoc.perl.org/perldata#Key%2FValue-Hash-Slices\">slice a sub­set of a hash</a> with its keys and val­ues intact. Very help­ful for cherry-​picking or aggre­gat­ing many hash­es into one. For example:</p>\n<pre class=\"wp-block-code\"><code>my %args = (\n    verbose =&gt; 1,\n    name    =&gt; 'Mark',\n    extra   =&gt; 'pizza',\n);\n# don't frob the pizza\n$my_object-&gt;frob( %args{ qw(verbose name) };</code></pre>\n<h2>Paired array slices</h2>\n<p>Not to be left out, you can also <a href=\"https://perldoc.perl.org/perldata#Index/Value-Array-Slices\">slice arrays</a> in the same way, in this case return­ing indices and values:</p>\n<pre class=\"wp-block-code\"><code>my @letters = 'a' .. 'z';\nmy @subset_kv = %letters[16, 5, 18, 12];\n# @subset_kv is now (16, 'p', 5, 'e', 18, 'r', 12, 'l')</code></pre>\n<h2>More readable dereferencing</h2>\n<p><a href=\"https://perldoc.perl.org/perl5200delta#Experimental-Postfix-Dereferencing\">Perl v5.20 intro­duced</a> and <a href=\"https://perldoc.perl.org/perl5240delta#Postfix-dereferencing-is-no-longer-experimental\">v5.24 de-​experimentalized</a> a more read­able <a href=\"https://perldoc.perl.org/perlref#Postfix-Dereference-Syntax\">post­fix deref­er­enc­ing syn­tax</a> for nav­i­gat­ing nest­ed data struc­tures. Instead of using <code>{</code>braces<code>}</code> or smoosh­ing sig­ils to the left of iden­ti­fiers, you can use a post­fixed sigil-and-star:</p>\n<pre class=\"wp-block-code\"><code>push @$array_ref,    1, 2, 3;  # noisy\npush @{$array_ref},  1, 2, 3;  # a little easier\npush $array_ref-&gt;@*, 1, 2, 3;  # read from left to right</code></pre>\n<p>So much of web devel­op­ment is sling­ing around and pick­ing apart com­pli­cat­ed <a href=\"https://perldoc.perl.org/perldsc\">data struc­tures</a> via <a href=\"https://www.json.org/\">JSON</a>, so I wel­come any­thing like this to reduce the cog­ni­tive load.</p>\n<h2>\n<code>when</code> as a statement modifier</h2>\n<p><a href=\"https://perldoc.perl.org/perl5120delta#when-as-a-statement-modifier\">Starting in Perl v5.12</a>, you can use the <a href=\"https://perldoc.perl.org/perlsyn#Switch-Statements\">exper­i­men­tal switch fea­ture</a><span class=\"push-single\"></span>​<span class=\"pull-single\">’</span>s <code>when</code> key­word as a post­fix mod­i­fi­er. For example:</p>\n<pre class=\"wp-block-code\"><code>for ($foo) {\n    $a =  1 when /^abc/;\n    $a = 42 when /^dna/;\n    ...\n}</code></pre>\n<p>But I don’t rec­om­mend <code>when</code>, <code>given</code>, or <code>given</code><span class=\"push-single\"></span>​<span class=\"pull-single\">’</span>s <a href=\"https://perldoc.perl.org/perlop#Smartmatch-Operator\">smart­match</a> oper­a­tions as they were <a href=\"https://perldoc.perl.org/perl5180delta#New-mechanism-for-experimental-features\">ret­conned as exper­i­ments in 2013’s Perl v5.18</a> and have remained so due to their <a href=\"https://perldoc.perl.org/perlsyn#Experimental-Details-on-given-and-when\">tricky behav­ior</a>. I wrote about <a href=\"https://phoenixtrap.com/2021/02/14/switching-up-my-switches/\" data-type=\"post\" data-id=\"344\">some alter­na­tives using sta­ble syn­tax</a> back in February.</p>\n<h2>Simple class inheritance with <code>use <a href=\"https://perldoc.perl.org/parent\">parent</a></code>\n</h2>\n<p>Sometimes in old­er object-​oriented Perl code, you’ll see <code>use <a href=\"https://perldoc.perl.org/base\">base</a></code> as a prag­ma to estab­lish inher­i­tance from anoth­er class. Older still is the direct manip­u­la­tion of the <a href=\"https://perldoc.perl.org/variables/@ISA\">package’s spe­cial <code>@ISA</code> array</a>. In most cas­es, both should be avoid­ed in favor of <code>use <a href=\"https://perldoc.perl.org/parent\">parent</a></code>, which was <a href=\"https://perldoc.perl.org/perl5101delta#parent\">added to core in Perl v5.10.1</a>.</p>\n<p>Mind you, if you’re fol­low­ing the <a href=\"https://perldoc.perl.org/perlootut#PERL-OO-SYSTEMS\">Perl object-​oriented tutorial’s advice and have select­ed an OO sys­tem</a> from CPAN, use its sub­class­ing mech­a­nism if it has one. <a href=\"https://metacpan.org/pod/Moose#extends-(@superclasses)\">Moose</a>, <a href=\"https://metacpan.org/pod/Moo#extends\">Moo</a>, and <a href=\"https://metacpan.org/pod/Class::Accessor#Moose!\">Class::Accessor’s <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>antlers” mode</a> all pro­vide an <code>extends</code> func­tion; <a href=\"https://metacpan.org/pod/Object::Pad#:isa\">Object::Pad pro­vides an <code>:isa</code> attribute</a> on its <a href=\"https://metacpan.org/pod/Object::Pad#class\"><code>class</code> key­word</a>.</p>\n<h2>Test for class membership with the <a href=\"https://perldoc.perl.org/perlop#Class-Instance-Operator\"><code>isa</code> operator</a>\n</h2>\n<p>As an alter­na­tive to the <a href=\"https://perldoc.perl.org/UNIVERSAL#%24obj-%3Eisa(-TYPE-)\"><code>isa()</code> method</a> pro­vid­ed to all Perl objects, <a href=\"https://perldoc.perl.org/perl5320delta#The-isa-Operator\">Perl v5.32 intro­duced</a> the exper­i­men­tal <a href=\"https://perldoc.perl.org/perlop#Class-Instance-Operator\"><code>isa</code> infix oper­a­tor</a>:</p>\n<pre class=\"wp-block-code\"><code>$my_object-&gt;isa('Local::MyClass')\n# or\n$my_object isa Local::MyClass</code></pre>\n<p>The lat­ter can take either a bare­word class name or string expres­sion, but more impor­tant­ly, it’s safer as it also returns false if the left argu­ment is unde­fined or isn’t a <code><a href=\"https://perldoc.perl.org/functions/bless\">bless</a></code>ed object ref­er­ence. The old­er <code>isa()</code> method will throw an excep­tion in the for­mer case and might return true if called as a class method when <code>$my_object</code> is actu­al­ly a string of a class name that’s the same as or inher­its from <code>isa()</code><span class=\"push-single\"></span>​<span class=\"pull-single\">’</span>s argu­ment.</p>\n<h2><a href=\"https://perldoc.perl.org/perlsub#Lexical-Subroutines\">Lexical subroutines</a></h2>\n<p><a href=\"https://perldoc.perl.org/perl5180delta#Lexical-subroutines\">Introduced in Perl v5.18</a> and <a href=\"https://perldoc.perl.org/perl5260delta#Lexical-subroutines-are-no-longer-experimental\">de-​experimentalized in 2017’s Perl v5.26</a>, you can now pre­cede sub dec­la­ra­tions with <a href=\"https://perldoc.perl.org/perlsub#Lexical-Subroutines\"><code>my</code>, <code>state</code></a>, or <code><a href=\"https://perldoc.perl.org/perlsub#our-subroutines\">our</a></code>. One use of the first two is tru­ly pri­vate func­tions and meth­ods, as described in <a href=\"https://jacoby.github.io/perl/2018/08/29/use-perl-features-lexical_subs.html\">this 2018 Dave Jacoby blog</a> and as part of <a href=\"http://neilb.org/2014/07/24/private-functions.html\">Neil Bowers’ 2014 sur­vey</a> of pri­vate func­tion techniques.</p>\n<h2><a href=\"https://perldoc.perl.org/perlsub#Signatures\">Subroutine signatures</a></h2>\n<p>I’ve <a href=\"https://phoenixtrap.com/2021/01/27/better-perl-with-subroutine-signatures-and-type-validation/\" data-type=\"post\" data-id=\"152\">writ­ten</a> and <a href=\"https://phoenixtrap.com/2021/03/17/video-for-better-perl-subroutine-signatures-and-type-validation/\" data-type=\"post\" data-id=\"533\">pre­sent­ed</a> <a href=\"https://phoenixtrap.com/2021/02/16/better-perl-more-on-signatures-and-types/\" data-type=\"post\" data-id=\"356\">exten­sive­ly</a> about sig­na­tures and alter­na­tives over the past year, so I won’t repeat that here. I’ll just add that the <a href=\"https://lists.perl.org/list/perl5-porters.html\">Perl 5 Porters</a> devel­op­ment mail­ing list has been <a href=\"https://www.nntp.perl.org/group/perl.perl5.porters/2021/11/msg261939.html\">mak­ing a con­cert­ed effort</a> over the past month to hash out the remain­ing issues towards ren­der­ing this fea­ture non-​experimental. The pop­u­lar Mojolicious real-​time web frame­work also <a href=\"https://metacpan.org/dist/Mojolicious/view/lib/Mojolicious/Guides.pod#Signatures\">pro­vides a short­cut for enabling sig­na­tures</a> and uses them exten­sive­ly in examples.</p>\n<h2>Indented here-​documents with <code>&lt;&lt;~</code>\n</h2>\n<p>Perl has had shell-​style <a href=\"https://perldoc.perl.org/perlop#%3C%3CEOF\"><span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>here-​document” syn­tax</a> for embed­ding multi-​line strings of quot­ed text for a long time. <a href=\"https://perldoc.perl.org/perlop#%3C%3CEOF\">Starting with Perl v5.26</a>, you can pre­cede the delim­it­ing string with a <code>~</code> char­ac­ter and Perl will both allow the end­ing delim­iter to be indent­ed as well as strip inden­ta­tion from the embed­ded text. This allows for much more read­able embed­ded code such as runs of HTML and SQL. For example:</p>\n<pre class=\"wp-block-code\"><code>if ($do_query) {\n    my $rows_deleted = $dbh-&gt;do(&lt;&lt;~'END_SQL', undef, 42);\n      DELETE FROM table\n      WHERE status = ?\n      END_SQL\n    say \"$rows_deleted rows were deleted.\"; \n}</code></pre>\n<h2>More readable chained comparisons</h2>\n<p>When I learned math in school, my teach­ers and text­books would often describe mul­ti­ple com­par­isons and inequal­i­ties as a sin­gle expres­sion. Unfortunately, when it came time to learn pro­gram­ming every com­put­er lan­guage I saw required them to be bro­ken up with a series of <code>and</code> (or <code>&amp;&amp;</code>) oper­a­tors. <a href=\"https://perldoc.perl.org/perl5320delta#Chained-comparisons-capability\">With Perl v5.32, this is no more</a>:</p>\n<pre class=\"wp-block-code\"><code>if ( $x &lt; $y &amp;&amp; $y &lt;= $z ) { ... }  # old way\nif ( $x &lt; $y &lt;= $z )       { ... }  # new way</code></pre>\n<p>It’s more con­cise, less noisy, and more like what reg­u­lar math looks like.</p>\n<h2>Self-​documenting named regular expression captures</h2>\n<p>Perl’s expres­sive <a href=\"https://perldoc.perl.org/perlre\">reg­u­lar expres­sion</a> match­ing and text-​processing prowess are leg­endary, although overuse and poor use of read­abil­i­ty enhance­ments often turn peo­ple away from them (and Perl in gen­er­al). We often use reg­ex­ps for extract­ing data from a matched pat­tern. For example:</p>\n<pre class=\"wp-block-code\"><code>if ( /Time: (..):(..):(..)/ ) {  # parse out values\n    say \"$1 hours, $2 minutes, $3 seconds\";\n}</code></pre>\n<p>Named <a href=\"https://perldoc.perl.org/perlre#Capture-groups\">cap­ture groups</a>, <a href=\"https://perldoc.perl.org/perl5100delta#Named-Capture-Buffers\">intro­duced in Perl v5.10</a>, make both the pat­tern more obvi­ous and retrieval of its data less cryptic:</p>\n<pre class=\"wp-block-code\"><code>if ( /Time: (?&lt;hours&gt;..):(?&lt;minutes&gt;..):(?&lt;seconds&gt;..)/ ) {\n    say \"$+{hours} hours, $+{minutes} minutes, $+{seconds} seconds\";\n}</code></pre>\n<h2>More readable regexp character classes</h2>\n<p>The <code>/x</code> reg­u­lar expres­sion mod­i­fi­er already enables bet­ter read­abil­i­ty by telling the pars­er to ignore most white­space, allow­ing you to break up com­pli­cat­ed pat­terns into spaced-​out groups and mul­ti­ple lines with code com­ments. <a href=\"https://perldoc.perl.org/perl5260delta#New-regular-expression-modifier-/xx\">With Perl v5.26 you can spec­i­fy <code>/xx</code></a> to also ignore spaces and tabs inside <code>[</code>brack­et­ed<code>]</code> char­ac­ter class­es, turn­ing this:</p>\n<pre class=\"wp-block-code\"><code>/[d-eg-i3-7]/\n/[<a href=\"https://phoenixtrap.com/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"dafb9a\">[email protected]</a>\"#$%^&amp;*()=?&lt;&gt;']/</code></pre>\n<p>…into this:</p>\n<pre class=\"wp-block-code\"><code>/ [d-e g-i 3-7]/xx\n/[ ! @ \" # $ % ^ &amp; * () = ? &lt;&gt; ' ]/xx</code></pre>\n<h2><a href=\"https://perldoc.perl.org/re#'/flags'-mode\">Set default regexp flags with the <code>re</code> pragma</a></h2>\n<p><a href=\"https://perldoc.perl.org/re#'/flags'-mode\">Beginning with Perl v5.14</a>, writ­ing <code>use re '/xms';</code> (or any com­bi­na­tion of <a href=\"https://perldoc.perl.org/perlre#Modifiers\">reg­u­lar expres­sion mod­i­fi­er flags</a>) will turn on those flags until the end of that lex­i­cal scope, sav­ing you the trou­ble of remem­ber­ing them every time.</p>\n<h2>Non-​destructive substitution with <code>s///r</code> and <code>tr///r</code>\n</h2>\n<p>The <a href=\"https://perldoc.perl.org/perlop#s/PATTERN/REPLACEMENT/msixpodualngcer\"><code>s///</code> sub­sti­tu­tion</a> and <a href=\"https://perldoc.perl.org/perlop#tr/SEARCHLIST/REPLACEMENTLIST/cdsr\"><code>tr///</code> translit­er­a­tion</a> oper­a­tors typ­i­cal­ly change their input direct­ly, often in con­junc­tion with the <a href=\"https://perldoc.perl.org/perlop#Binding-Operators\"><code>=~</code> bind­ing oper­a­tor</a>:</p>\n<pre class=\"wp-block-code\"><code>s/foo/bar/;  # changes the first foo to bar in $_\n$baz =~ s/foo/bar/;  # the same but in $baz</code></pre>\n<p>But what if you want to leave the orig­i­nal untouched, such as when pro­cess­ing an array of strings with a <code><a href=\"https://perldoc.perl.org/functions/map\">map</a></code>? <a href=\"https://perldoc.perl.org/perl5140delta#Non-destructive-substitution\">With Perl v5.14 and above, add the <code>/r</code> flag</a>, which makes the sub­sti­tu­tion on a copy and returns the result:</p>\n<pre class=\"wp-block-code\"><code>my @changed = map { s/foo/bar/r } @original;</code></pre>\n<h2>\n<a href=\"https://perldoc.perl.org/functions/fc\">Unicode case-​folding with <code>fc</code></a> for better string comparisons</h2>\n<p>Unicode and char­ac­ter encod­ing in gen­er­al are com­pli­cat­ed beasts. Perl has <a href=\"https://perldoc.perl.org/perl56delta#Unicode-and-UTF-8-support\">han­dled Unicode since v5.6</a> and has kept pace with fix­es and sup­port for updat­ed stan­dards in the inter­ven­ing decades. If you need to test if two strings are equal regard­less of case, use the <a href=\"https://perldoc.perl.org/functions/fc\"><code>fc</code> func­tion</a> intro­duced <a href=\"https://perldoc.perl.org/perl5160delta#New-function-fc-and-corresponding-escape-sequence-%5CF-for-Unicode-foldcase\">in Perl v5.16</a>.</p>\n<h2>Safer processing of file arguments with <code>&lt;&lt;&gt;&gt;</code>\n</h2>\n<p>The <code>&lt;&gt;</code> null file­han­dle or <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>dia­mond oper­a­tor” is often used in <a href=\"https://perldoc.perl.org/perlsyn#Compound-Statements\"><code>while</code> loops</a> to process input per line com­ing either from stan­dard input (e.g., piped from anoth­er pro­gram) or from a list of files on the com­mand line. Unfortunately, it uses a <a href=\"https://perldoc.perl.org/functions/open#open-FILEHANDLE,EXPR\">form of Perl’s <code>open</code> func­tion</a> that inter­prets spe­cial char­ac­ters such as pipes (<code>|</code>) that would allow it to inse­cure­ly <a href=\"https://perldoc.perl.org/perlopentut#Opening-Pipes\">run exter­nal com­mands</a>. Using the <code>&lt;&lt;&gt;&gt;</code> <span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>dou­ble dia­mond” oper­a­tor <a href=\"https://perldoc.perl.org/perl5220delta#New-double-diamond-operator\">intro­duced in Perl v5.22</a> forces <code>open</code> to treat all command-​line argu­ments as file names only. For old­er Perls, the <a href=\"https://perldoc.perl.org/perlop#I/O-Operators\">per­lop doc­u­men­ta­tion</a> rec­om­mends the <a href=\"https://metacpan.org/pod/ARGV::readonly\">ARGV::readonly CPAN mod­ule</a>.</p>\n<h2>Safer loading of Perl libraries and modules from <code><a href=\"https://perldoc.perl.org/variables/@INC\">@INC</a></code>\n</h2>\n<p><a href=\"https://perldoc.perl.org/perl5260delta#Removal-of-the-current-directory-(%22.%22)-from-@INC\">Perl v5.26 removed the abil­i­ty for all pro­grams to load mod­ules by default from the cur­rent direc­to­ry</a>, clos­ing a secu­ri­ty vul­ner­a­bil­i­ty orig­i­nal­ly iden­ti­fied and fixed as <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-1238\">CVE-​2016 – 1238</a> in pre­vi­ous ver­sions’ includ­ed scripts. If your code relied on this unsafe behav­ior, the <a href=\"https://perldoc.perl.org/perl5260delta#Removal-of-the-current-directory-(%22.%22)-from-@INC\">v5.26 release notes include steps</a> on how to adapt.</p>\n<h2>\n<a href=\"https://perldoc.perl.org/HTTP::Tiny\">HTTP::Tiny</a> simple HTTP/1.1 client included</h2>\n<p>To boot­strap access to <a href=\"https://cpan.org/\">CPAN</a> on the web in the pos­si­ble absence of exter­nal tools like <code><a href=\"https://curl.se/\">curl</a></code> or <code><a href=\"https://www.gnu.org/software/wget/\">wget</a></code>, <a href=\"https://perldoc.perl.org/HTTP::Tiny\">Perl v5.14 began includ­ing the HTTP::Tiny mod­ule</a>. You can also use it in your pro­grams if you need a sim­ple web client with no dependencies.</p>\n<h2>\n<a href=\"https://perldoc.perl.org/Test2\">Test2</a>: The next generation of Perl testing frameworks</h2>\n<p>Forked and refac­tored from the ven­er­a­ble <a href=\"https://perldoc.perl.org/Test::Builder\">Test::Builder</a> (the basis for the <a href=\"https://perldoc.perl.org/Test::More\">Test::More</a> library that many are famil­iar with), <a href=\"https://perldoc.perl.org/Test2\">Test2</a> was includ­ed in the core mod­ule library <a href=\"https://perldoc.perl.org/5.26.0/perlmodlib#Test2\">begin­ning with Perl v5.26</a>. I’ve <a href=\"https://phoenixtrap.com/tag/test2/\">exper­i­ment­ed recent­ly</a> with using the <a href=\"https://metacpan.org/pod/Test2::Suite\">Test2::Suite</a> CPAN library instead of Test::More and it looks pret­ty good. I’m also intrigued by <a href=\"https://metacpan.org/pod/Test2::Harness\">Test2::Harness</a>’ sup­port for thread­ing, fork­ing, and pre­load­ing mod­ules to reduce test run times.</p>\n<h2>\n<a href=\"https://metacpan.org/pod/Task::Kensho\">Task::Kensho</a>: Where to start for recommended Perl modules</h2>\n<p>This last item may not be includ­ed when you install Perl, but it’s where I turn for a col­lec­tion of well-​regarded CPAN mod­ules for accom­plish­ing a wide vari­ety of com­mon tasks span­ning from <a href=\"https://metacpan.org/pod/Task::Kensho::Async\">asyn­chro­nous pro­gram­ming</a> to <a href=\"https://metacpan.org/pod/Task::Kensho::XML\">XML</a>. Use it as a start­ing point or <a href=\"https://metacpan.org/dist/App-cpanminus/view/lib/App/cpanminus/fatscript.pm#-interactive\">inter­ac­tive­ly</a> select the mix of libraries appro­pri­ate to your project.</p>\n<hr class=\"wp-block-separator\">\n<p>And there you have it: a selec­tion of 34 fea­tures, enhance­ments, and improve­ments for the first 34 years of Perl. What’s your favorite? Did I miss any­thing? Let me know in the comments.</p>\n<span id=\"tip-jar-wp-element-2\" class=\"tip-jar-wp-element\" tip-jar-wp-form-number=\"2\"></span>",
                "value": "Friday, December 17, 2021, marked the thirty-​fourth birth­day of the Perl pro­gram­ming lan­guage, and coin­ci­den­tal­ly this year saw the release of ver­sion 5.34. There are plen­ty of Perl devel­op­ers out there who haven’t kept up with recent (and not-​so-​recent) improve­ments to the lan­guage and its ecosys­tem, so I thought I might list a batch. (You may have seen some of these before in May’s post ​“Perl can do that now!”)\nThe feature pragma\nPerl v5.10 was released in December 2007, and with it came feature, a way of enabling new syn­tax with­out break­ing back­ward com­pat­i­bil­i­ty. You can enable indi­vid­ual fea­tures by name (e.g., use feature qw(say fc); for the say and fc key­words), or by using a fea­ture bun­dle based on the Perl ver­sion that intro­duced them. For exam­ple, the following:\nuse feature ':5.34';\n…gives you the equiv­a­lent of:\nuse feature qw(bareword_filehandles bitwise current_sub evalbytes fc indirect multidimensional postderef_qq say state switch unicode_eval unicode_strings);\nBoy, that’s a mouth­ful. Feature bun­dles are good. The cor­re­spond­ing bun­dle also gets implic­it­ly loaded if you spec­i­fy a min­i­mum required Perl ver­sion, e.g., with use v5.32;. If you use v5.12; or high­er, strict mode is enabled for free. So just say:\nuse v5.34;\nAnd last­ly, one-​liners can use the -E switch instead of -e to enable all fea­tures for that ver­sion of Perl, so you can say the fol­low­ing on the com­mand line:\nperl -E 'say \"Hello world!\"'\nInstead of:\nperl -e 'print \"Hello world!\\n\"'\nWhich is great when you’re try­ing to save some typing.\nThe experimental pragma\nSometimes new Perl fea­tures need to be dri­ven a cou­ple of releas­es around the block before their behav­ior set­tles. Those exper­i­ments are doc­u­ment­ed in the per­l­ex­per­i­ment page, and usu­al­ly, you need both a use feature (see above) and no warnings state­ment to safe­ly enable them. Or you can sim­ply pass a list to use experimental of the fea­tures you want, e.g.:\nuse experimental qw(isa postderef signatures);\nEver-​expanding warnings categories\nMarch 2000 saw the release of Perl 5.6, and with it, the expan­sion of the -w command-​line switch to a sys­tem of fine-​grained con­trols for warn­ing against ​“dubi­ous con­structs” that can be turned on and off depend­ing on the lex­i­cal scope. What start­ed as 26 main and 20 sub­cat­e­gories has expand­ed into 31 main and 43 sub­cat­e­gories, includ­ing warn­ings for the afore­men­tioned exper­i­men­tal features.\nAs the rel­e­vant Perl::Critic pol­i­cy says, ​“Using warn­ings, and pay­ing atten­tion to what they say, is prob­a­bly the sin­gle most effec­tive way to improve the qual­i­ty of your code.” If you must vio­late warn­ings (per­haps because you’re reha­bil­i­tat­ing some lega­cy code), you can iso­late such vio­la­tions to a small scope and indi­vid­ual cat­e­gories. Check out the stric­tures mod­ule on CPAN if you’d like to go fur­ther and make a safe sub­set of these cat­e­gories fatal dur­ing development.\nDocument other recently-​introduced syntax with Syntax::Construct\nNot every new bit of Perl syn­tax is enabled with a feature guard. For the rest, there’s E. Choroba’s Syntax::Construct mod­ule on CPAN. Rather than hav­ing to remem­ber which ver­sion of Perl intro­duced what, Syntax::Construct lets you declare only what you use and pro­vides a help­ful error mes­sage if some­one tries to run your code on an old­er unsup­port­ed ver­sion. Between it and the feature prag­ma, you can pre­vent many head-​scratching moments and give your users a chance to either upgrade or workaround.\nMake built-​in functions throw exceptions with autodie\nMany of Perl’s built-​in func­tions only return false on fail­ure, requir­ing the devel­op­er to check every time whether a file can be opened or a system com­mand exe­cut­ed. The lex­i­cal autodie prag­ma replaces them with ver­sions that raise an excep­tion with an object that can be inter­ro­gat­ed for fur­ther details. No mat­ter how many func­tions or meth­ods deep a prob­lem occurs, you can choose to catch it and respond appro­pri­ate­ly. This leads us to…\ntry/​catch exception handling and Feature::Compat::Try\nThis year’s Perl v5.34 release intro­duced exper­i­men­tal try/​catch syn­tax for excep­tion han­dling that should look more famil­iar to users of oth­er lan­guages while han­dling the issues sur­round­ing using block eval and test­ing of the spe­cial [email protected] vari­able. If you need to remain com­pat­i­ble with old­er ver­sions of Perl (back to v5.14), just use the Feature::Compat::Try mod­ule from CPAN to auto­mat­i­cal­ly select either v5.34’s native try/​catch or a sub­set of the func­tion­al­i­ty pro­vid­ed by Syntax::Keyword::Try.\nPluggable keywords\nThe above­men­tioned Syntax::Keyword::Try was made pos­si­ble by the intro­duc­tion of a plug­gable key­word mech­a­nism in 2010’s Perl v5.12. So was the Future::AsyncAwait asyn­chro­nous pro­gram­ming library and the Object::Pad test­bed for new object-​oriented Perl syn­tax. If you’re handy with C and Perl’s XS glue lan­guage, check out Paul ​“LeoNerd” Evans’ XS::Parse::Keyword mod­ule to get a leg up on devel­op­ing your own syn­tax module.\nDefine packages with versions and blocks\nPerl v5.12 also helped reduce clut­ter by enabling a package name­space dec­la­ra­tion to also include a ver­sion num­ber, instead of requir­ing a sep­a­rate our $VERSION = ...; v5.14 fur­ther refined packages to be spec­i­fied in code blocks, so a name­space dec­la­ra­tion can be the same as a lex­i­cal scope. Putting the two togeth­er gives you:\npackage Local::NewHotness v1.2.3 {\n    ...\n}\nInstead of:\n{\n    package Local::OldAndBusted;\n    use version 0.77; our $VERSION = version->declare(\"v1.2.3\");\n    ...\n}\nI know which I’d rather do. (Though you may want to also use Syntax::Construct qw(package-version package-block); to help along with old­er instal­la­tions as described above.)\nThe // defined-​or operator\nThis is an easy win from Perl v5.10:\ndefined $foo ? $foo : $bar  # replace this\n$foo // $bar                # with this\nAnd:\n$foo = $bar unless defined $foo  # replace this\n$foo //= $bar                    # with this\nPerfect for assign­ing defaults to variables.\nstate variables only initialize once\nSpeaking of vari­ables, ever want one to keep its old val­ue the next time a scope is entered, like in a sub? Declare it with state instead of my. Before Perl v5.10, you need­ed to use a clo­sure instead.\nSave some typing with say\nPerl v5.10’s bumper crop of enhance­ments also includ­ed the say func­tion, which han­dles the com­mon use case of printing a string or list of strings with a new­line. It’s less noise in your code and saves you four char­ac­ters. What’s not to love?\nNote unimplemented code with ...\nThe ... ellip­sis state­ment (col­lo­qui­al­ly ​“yada-​yada”) gives you an easy place­hold­er for yet-​to-​be-​implemented code. It pars­es OK but will throw an excep­tion if exe­cut­ed. Hopefully, your test cov­er­age (or at least sta­t­ic analy­sis) will catch it before your users do.\nLoop and enumerate arrays with each, keys, and values\nThe each, keys, and values func­tions have always been able to oper­ate on hash­es. Perl v5.12 and above make them work on arrays, too. The lat­ter two are main­ly for con­sis­ten­cy, but you can use each to iter­ate over an array’s indices and val­ues at the same time:\nwhile (my ($index, $value) = each @array) {\n    ...\n}\nThis can be prob­lem­at­ic in non-​trivial loops, but I’ve found it help­ful in quick scripts and one-liners.\ndelete local hash (and array) entries\nEver need­ed to delete an entry from a hash (e.g, an envi­ron­ment vari­able from %ENV or a sig­nal han­dler from %SIG) just inside a block? Perl v5.12 lets you do that with delete local.\nPaired hash slices\nJumping for­ward to 2014’s Perl v5.20, the new %foo{'bar', 'baz'} syn­tax enables you to slice a sub­set of a hash with its keys and val­ues intact. Very help­ful for cherry-​picking or aggre­gat­ing many hash­es into one. For example:\nmy %args = (\n    verbose => 1,\n    name    => 'Mark',\n    extra   => 'pizza',\n);\n# don't frob the pizza\n$my_object->frob( %args{ qw(verbose name) };\nPaired array slices\nNot to be left out, you can also slice arrays in the same way, in this case return­ing indices and values:\nmy @letters = 'a' .. 'z';\nmy @subset_kv = %letters[16, 5, 18, 12];\n# @subset_kv is now (16, 'p', 5, 'e', 18, 'r', 12, 'l')\nMore readable dereferencing\nPerl v5.20 intro­duced and v5.24 de-​experimentalized a more read­able post­fix deref­er­enc­ing syn­tax for nav­i­gat­ing nest­ed data struc­tures. Instead of using {braces} or smoosh­ing sig­ils to the left of iden­ti­fiers, you can use a post­fixed sigil-and-star:\npush @$array_ref,    1, 2, 3;  # noisy\npush @{$array_ref},  1, 2, 3;  # a little easier\npush $array_ref->@*, 1, 2, 3;  # read from left to right\nSo much of web devel­op­ment is sling­ing around and pick­ing apart com­pli­cat­ed data struc­tures via JSON, so I wel­come any­thing like this to reduce the cog­ni­tive load.\nwhen as a statement modifier\nStarting in Perl v5.12, you can use the exper­i­men­tal switch fea­ture​’s when key­word as a post­fix mod­i­fi­er. For example:\nfor ($foo) {\n    $a =  1 when /^abc/;\n    $a = 42 when /^dna/;\n    ...\n}\nBut I don’t rec­om­mend when, given, or given​’s smart­match oper­a­tions as they were ret­conned as exper­i­ments in 2013’s Perl v5.18 and have remained so due to their tricky behav­ior. I wrote about some alter­na­tives using sta­ble syn­tax back in February.\nSimple class inheritance with use parent\nSometimes in old­er object-​oriented Perl code, you’ll see use base as a prag­ma to estab­lish inher­i­tance from anoth­er class. Older still is the direct manip­u­la­tion of the package’s spe­cial @ISA array. In most cas­es, both should be avoid­ed in favor of use parent, which was added to core in Perl v5.10.1.\nMind you, if you’re fol­low­ing the Perl object-​oriented tutorial’s advice and have select­ed an OO sys­tem from CPAN, use its sub­class­ing mech­a­nism if it has one. Moose, Moo, and Class::Accessor’s ​“antlers” mode all pro­vide an extends func­tion; Object::Pad pro­vides an :isa attribute on its class key­word.\nTest for class membership with the isa operator\nAs an alter­na­tive to the isa() method pro­vid­ed to all Perl objects, Perl v5.32 intro­duced the exper­i­men­tal isa infix oper­a­tor:\n$my_object->isa('Local::MyClass')\n# or\n$my_object isa Local::MyClass\nThe lat­ter can take either a bare­word class name or string expres­sion, but more impor­tant­ly, it’s safer as it also returns false if the left argu­ment is unde­fined or isn’t a blessed object ref­er­ence. The old­er isa() method will throw an excep­tion in the for­mer case and might return true if called as a class method when $my_object is actu­al­ly a string of a class name that’s the same as or inher­its from isa()​’s argu­ment.\nLexical subroutines\nIntroduced in Perl v5.18 and de-​experimentalized in 2017’s Perl v5.26, you can now pre­cede sub dec­la­ra­tions with my, state, or our. One use of the first two is tru­ly pri­vate func­tions and meth­ods, as described in this 2018 Dave Jacoby blog and as part of Neil Bowers’ 2014 sur­vey of pri­vate func­tion techniques.\nSubroutine signatures\nI’ve writ­ten and pre­sent­ed exten­sive­ly about sig­na­tures and alter­na­tives over the past year, so I won’t repeat that here. I’ll just add that the Perl 5 Porters devel­op­ment mail­ing list has been mak­ing a con­cert­ed effort over the past month to hash out the remain­ing issues towards ren­der­ing this fea­ture non-​experimental. The pop­u­lar Mojolicious real-​time web frame­work also pro­vides a short­cut for enabling sig­na­tures and uses them exten­sive­ly in examples.\nIndented here-​documents with <<~\nPerl has had shell-​style ​“here-​document” syn­tax for embed­ding multi-​line strings of quot­ed text for a long time. Starting with Perl v5.26, you can pre­cede the delim­it­ing string with a ~ char­ac­ter and Perl will both allow the end­ing delim­iter to be indent­ed as well as strip inden­ta­tion from the embed­ded text. This allows for much more read­able embed­ded code such as runs of HTML and SQL. For example:\nif ($do_query) {\n    my $rows_deleted = $dbh->do(<<~'END_SQL', undef, 42);\n      DELETE FROM table\n      WHERE status = ?\n      END_SQL\n    say \"$rows_deleted rows were deleted.\"; \n}\nMore readable chained comparisons\nWhen I learned math in school, my teach­ers and text­books would often describe mul­ti­ple com­par­isons and inequal­i­ties as a sin­gle expres­sion. Unfortunately, when it came time to learn pro­gram­ming every com­put­er lan­guage I saw required them to be bro­ken up with a series of and (or &&) oper­a­tors. With Perl v5.32, this is no more:\nif ( $x < $y && $y <= $z ) { ... }  # old way\nif ( $x < $y <= $z )       { ... }  # new way\nIt’s more con­cise, less noisy, and more like what reg­u­lar math looks like.\nSelf-​documenting named regular expression captures\nPerl’s expres­sive reg­u­lar expres­sion match­ing and text-​processing prowess are leg­endary, although overuse and poor use of read­abil­i­ty enhance­ments often turn peo­ple away from them (and Perl in gen­er­al). We often use reg­ex­ps for extract­ing data from a matched pat­tern. For example:\nif ( /Time: (..):(..):(..)/ ) {  # parse out values\n    say \"$1 hours, $2 minutes, $3 seconds\";\n}\nNamed cap­ture groups, intro­duced in Perl v5.10, make both the pat­tern more obvi­ous and retrieval of its data less cryptic:\nif ( /Time: (?<hours>..):(?<minutes>..):(?<seconds>..)/ ) {\n    say \"$+{hours} hours, $+{minutes} minutes, $+{seconds} seconds\";\n}\nMore readable regexp character classes\nThe /x reg­u­lar expres­sion mod­i­fi­er already enables bet­ter read­abil­i­ty by telling the pars­er to ignore most white­space, allow­ing you to break up com­pli­cat­ed pat­terns into spaced-​out groups and mul­ti­ple lines with code com­ments. With Perl v5.26 you can spec­i­fy /xx to also ignore spaces and tabs inside [brack­et­ed] char­ac­ter class­es, turn­ing this:\n/[d-eg-i3-7]/\n/[[email protected]\"#$%^&*()=?<>']/\n…into this:\n/ [d-e g-i 3-7]/xx\n/[ ! @ \" # $ % ^ & * () = ? <> ' ]/xx\nSet default regexp flags with the re pragma\nBeginning with Perl v5.14, writ­ing use re '/xms'; (or any com­bi­na­tion of reg­u­lar expres­sion mod­i­fi­er flags) will turn on those flags until the end of that lex­i­cal scope, sav­ing you the trou­ble of remem­ber­ing them every time.\nNon-​destructive substitution with s///r and tr///r\nThe s/// sub­sti­tu­tion and tr/// translit­er­a­tion oper­a­tors typ­i­cal­ly change their input direct­ly, often in con­junc­tion with the =~ bind­ing oper­a­tor:\ns/foo/bar/;  # changes the first foo to bar in $_\n$baz =~ s/foo/bar/;  # the same but in $baz\nBut what if you want to leave the orig­i­nal untouched, such as when pro­cess­ing an array of strings with a map? With Perl v5.14 and above, add the /r flag, which makes the sub­sti­tu­tion on a copy and returns the result:\nmy @changed = map { s/foo/bar/r } @original;\nUnicode case-​folding with fc for better string comparisons\nUnicode and char­ac­ter encod­ing in gen­er­al are com­pli­cat­ed beasts. Perl has han­dled Unicode since v5.6 and has kept pace with fix­es and sup­port for updat­ed stan­dards in the inter­ven­ing decades. If you need to test if two strings are equal regard­less of case, use the fc func­tion intro­duced in Perl v5.16.\nSafer processing of file arguments with <<>>\nThe <> null file­han­dle or ​“dia­mond oper­a­tor” is often used in while loops to process input per line com­ing either from stan­dard input (e.g., piped from anoth­er pro­gram) or from a list of files on the com­mand line. Unfortunately, it uses a form of Perl’s open func­tion that inter­prets spe­cial char­ac­ters such as pipes (|) that would allow it to inse­cure­ly run exter­nal com­mands. Using the <<>> ​“dou­ble dia­mond” oper­a­tor intro­duced in Perl v5.22 forces open to treat all command-​line argu­ments as file names only. For old­er Perls, the per­lop doc­u­men­ta­tion rec­om­mends the ARGV::readonly CPAN mod­ule.\nSafer loading of Perl libraries and modules from @INC\nPerl v5.26 removed the abil­i­ty for all pro­grams to load mod­ules by default from the cur­rent direc­to­ry, clos­ing a secu­ri­ty vul­ner­a­bil­i­ty orig­i­nal­ly iden­ti­fied and fixed as CVE-​2016 – 1238 in pre­vi­ous ver­sions’ includ­ed scripts. If your code relied on this unsafe behav­ior, the v5.26 release notes include steps on how to adapt.\nHTTP::Tiny simple HTTP/1.1 client included\nTo boot­strap access to CPAN on the web in the pos­si­ble absence of exter­nal tools like curl or wget, Perl v5.14 began includ­ing the HTTP::Tiny mod­ule. You can also use it in your pro­grams if you need a sim­ple web client with no dependencies.\nTest2: The next generation of Perl testing frameworks\nForked and refac­tored from the ven­er­a­ble Test::Builder (the basis for the Test::More library that many are famil­iar with), Test2 was includ­ed in the core mod­ule library begin­ning with Perl v5.26. I’ve exper­i­ment­ed recent­ly with using the Test2::Suite CPAN library instead of Test::More and it looks pret­ty good. I’m also intrigued by Test2::Harness’ sup­port for thread­ing, fork­ing, and pre­load­ing mod­ules to reduce test run times.\nTask::Kensho: Where to start for recommended Perl modules\nThis last item may not be includ­ed when you install Perl, but it’s where I turn for a col­lec­tion of well-​regarded CPAN mod­ules for accom­plish­ing a wide vari­ety of com­mon tasks span­ning from asyn­chro­nous pro­gram­ming to XML. Use it as a start­ing point or inter­ac­tive­ly select the mix of libraries appro­pri­ate to your project.\n\nAnd there you have it: a selec­tion of 34 fea­tures, enhance­ments, and improve­ments for the first 34 years of Perl. What’s your favorite? Did I miss any­thing? Let me know in the comments."
              }
            ],
            "category": [
              "@INC",
              "@ISA",
              "//",
              "advocacy",
              "array slices",
              "arrays",
              "autodie",
              "base",
              "Class::Accessor",
              "CPAN",
              "curl",
              "datastructures",
              "dereferencing",
              "each",
              "eval",
              "exceptions",
              "experimental",
              "fc",
              "feature",
              "Feature::Compat::Try",
              "given",
              "hash slices",
              "hashes",
              "here-documents",
              "HTTP::Tiny",
              "isa",
              "JSON",
              "keys",
              "lexical subroutines",
              "Mojolicious",
              "Moo",
              "Moose",
              "Object::Pad",
              "OOP",
              "package",
              "parent",
              "Perl",
              "perlcritic",
              "pluggable keywords",
              "postfix dereferencing",
              "regexps",
              "regular expressions",
              "say",
              "signatures",
              "slices",
              "smartmatch",
              "state",
              "strictures",
              "switch",
              "Syntax::Construct",
              "Syntax::Keyword::Try",
              "Task::Kensho",
              "Test::Builder",
              "Test::More",
              "Test2",
              "Test2::Harness",
              "Test2::Suite",
              "testing",
              "try/catch",
              "Unicode",
              "uture::AsyncAwait",
              "values",
              "warnings",
              "webdev",
              "wget",
              "when",
              "XML",
              "XS",
              "XS::Parse::Keyword",
              "yada-yada"
            ]
          },
          "id": "post-1803"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "A brief note on Log4perl"
            ],
            "url": [
              "https://phoenixtrap.com/2021/12/14/a-brief-note-on-log4perl/",
              "https://phoenixtrap.com/2021/12/14/a-brief-note-on-log4perl/"
            ],
            "updated": [
              "2021-12-14T09:00:00-06:00"
            ],
            "published": [
              "2021-12-14T09:00:00-06:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/pexels-photo-209229.jpeg?fit=668%2C446&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": "man cutting tress using chainsaw"
              }
            ],
            "content": [
              {
                "html": "<p>The Java world had an… inter­est­ing week­end when secu­ri­ty researchers revealed on December 9 a <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228\">vul­ner­a­bil­i­ty</a> in the pop­u­lar <a href=\"https://logging.apache.org/log4j/2.x/\">Apache Log4j 2</a> soft­ware library for record­ing and debug­ging events. Systems as diverse as <a href=\"https://aws.amazon.com/security/security-bulletins/AWS-2021-006/\">Amazon Web Services</a>, <a href=\"https://www.macworld.com/article/559108/icloud-patch-log4shell-exploit.html\">Apple iCloud</a>, and the <a href=\"https://www.minecraft.net/en-us/article/important-message--security-vulnerability-java-edition\">Minecraft video game</a> could be exploit­ed to run arbi­trary code on a serv­er mere­ly by send­ing a specially-​crafted string of text. Information tech­nol­o­gy pro­fes­sion­als have been scram­bling ever since the ini­tial dis­clo­sure to patch, upgrade, recon­fig­ure, or oth­er­wise pro­tect affect­ed servers. <a href=\"https://log4shell.com/\">It’s bad</a>, and past unpatched vul­ner­a­bil­i­ties <a href=\"https://arstechnica.com/information-technology/2017/09/massive-equifax-breach-caused-by-failure-to-patch-two-month-old-bug/\">like this</a> have been respon­si­ble for the expo­sure of mil­lions of people’s sen­si­tive data.</p>\n<p>Many Perl appli­ca­tions use the similarly-​named and ‑designed <a href=\"https://metacpan.org/pod/Log::Log4perl\">Log::Log4perl</a> library, and the good news is that as far as I can tell the lat­ter doesn’t suf­fer from the type of vul­ner­a­bil­i­ty described above. <strong>This doesn’t mean poorly-​written or ‑con­fig­ured Perl-​based sys­tems are immune to all exploits, just this par­tic­u­lar one.</strong> You should be safe to con­tin­ue using Log4perl unless some­one has delib­er­ate­ly con­fig­ured it oth­er­wise, and in fact, <a href=\"https://www.hostgator.com/\">my work</a> uses it extensively.</p>\n<p>You might be sur­prised to read me sug­gest­ing a log­ging frame­work after <a href=\"https://phoenixtrap.com/tag/debugging/\">writ­ing mul­ti­ple arti­cles espous­ing the Perl step debug­ger</a> as an alter­na­tive. Log4perl devel­op­er Mike Schilli’s <a href=\"https://www.perl.com/pub/2002/09/11/log4perl.html\">2002 intro­duc­tion to the pack­age for Perl.com</a> came down on the oppo­site side of the argu­ment. It can seem like one of those pro­gram­mer reli­gious issues like <a href=\"https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/\">tabs vs. spaces</a>, <a href=\"https://en.wikipedia.org/wiki/Editor_war\">vim vs. Emacs</a>, or <a href=\"https://docs.microsoft.com/en-us/windows/wsl/\">Linux</a> vs. <a href=\"https://www.winehq.org/\">Windows</a>. (For the record, the cor­rect answers are <a href=\"https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::ProhibitHardTabs\">spaces</a>, <a href=\"https://www.barebones.com/products/bbedit/\">BBEdit</a>, and <a href=\"https://www.apple.com/macos/\">macOS</a>. 😉)</p>\n<p>But in this case, you can and should have the best of both worlds — log­ging at dif­fer­ent <a href=\"https://metacpan.org/pod/Log::Log4perl#Log-Levels\">lev­els</a> to appro­pri­ate <a href=\"https://metacpan.org/pod/Log::Log4perl#Appenders\">des­ti­na­tions</a> while still drop­ping into the <a href=\"https://perldoc.perl.org/perldebug\">inter­ac­tive debug­ger</a> when you need to do some­thing trick­i­er like exam­ine pro­gram state or tweak a data struc­ture on the fly. I use both tech­niques and only empha­size the advo­ca­cy of step debug­ging because it’s under­stood less.</p>",
                "value": "The Java world had an… inter­est­ing week­end when secu­ri­ty researchers revealed on December 9 a vul­ner­a­bil­i­ty in the pop­u­lar Apache Log4j 2 soft­ware library for record­ing and debug­ging events. Systems as diverse as Amazon Web Services, Apple iCloud, and the Minecraft video game could be exploit­ed to run arbi­trary code on a serv­er mere­ly by send­ing a specially-​crafted string of text. Information tech­nol­o­gy pro­fes­sion­als have been scram­bling ever since the ini­tial dis­clo­sure to patch, upgrade, recon­fig­ure, or oth­er­wise pro­tect affect­ed servers. It’s bad, and past unpatched vul­ner­a­bil­i­ties like this have been respon­si­ble for the expo­sure of mil­lions of people’s sen­si­tive data.\nMany Perl appli­ca­tions use the similarly-​named and ‑designed Log::Log4perl library, and the good news is that as far as I can tell the lat­ter doesn’t suf­fer from the type of vul­ner­a­bil­i­ty described above. This doesn’t mean poorly-​written or ‑con­fig­ured Perl-​based sys­tems are immune to all exploits, just this par­tic­u­lar one. You should be safe to con­tin­ue using Log4perl unless some­one has delib­er­ate­ly con­fig­ured it oth­er­wise, and in fact, my work uses it extensively.\nYou might be sur­prised to read me sug­gest­ing a log­ging frame­work after writ­ing mul­ti­ple arti­cles espous­ing the Perl step debug­ger as an alter­na­tive. Log4perl devel­op­er Mike Schilli’s 2002 intro­duc­tion to the pack­age for Perl.com came down on the oppo­site side of the argu­ment. It can seem like one of those pro­gram­mer reli­gious issues like tabs vs. spaces, vim vs. Emacs, or Linux vs. Windows. (For the record, the cor­rect answers are spaces, BBEdit, and macOS. 😉)\nBut in this case, you can and should have the best of both worlds — log­ging at dif­fer­ent lev­els to appro­pri­ate des­ti­na­tions while still drop­ping into the inter­ac­tive debug­ger when you need to do some­thing trick­i­er like exam­ine pro­gram state or tweak a data struc­ture on the fly. I use both tech­niques and only empha­size the advo­ca­cy of step debug­ging because it’s under­stood less."
              }
            ],
            "category": [
              "Apple",
              "AWS",
              "BBEdit",
              "debugging",
              "Emacs",
              "iCloud",
              "Linux",
              "Log::Log4perl",
              "Log4j",
              "logging",
              "Minecraft",
              "Perl",
              "Perl.com",
              "security",
              "Vim",
              "Windows",
              "work"
            ]
          },
          "id": "post-1775"
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Sweeter Perl exception classes"
            ],
            "url": [
              "https://phoenixtrap.com/2021/12/07/sweeter-perl-exception-classes/",
              "https://phoenixtrap.com/2021/12/07/sweeter-perl-exception-classes/"
            ],
            "updated": [
              "2021-12-07T09:00:00-06:00"
            ],
            "published": [
              "2021-12-07T09:00:00-06:00"
            ],
            "author": [
              {
                "type": [
                  "h-card"
                ],
                "properties": {
                  "photo": [
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "1x": "data:image/gif;base64"
                      },
                      "alt": ""
                    },
                    {
                      "value": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=90&d=wavatar&r=g",
                      "srcset": {
                        "2x": "https://secure.gravatar.com/avatar/49bcb5f94f6774e518276effbbc8e028?s=180&d=wavatar&r=g"
                      },
                      "alt": ""
                    }
                  ],
                  "url": [
                    "https://phoenixtrap.com/"
                  ],
                  "uid": [
                    "https://phoenixtrap.com/"
                  ],
                  "name": [
                    "Mark Gardner"
                  ]
                },
                "value": "Mark Gardner"
              }
            ],
            "featured": [
              {
                "value": "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/pexels-photo-8670450.jpeg?fit=668%2C445&ssl=1",
                "srcset": {
                  "1x": "data:image/gif;base64"
                },
                "alt": "chocolate bar and sugar cubes on a hand"
              }
            ],
            "content": [
              {
                "html": "<div class=\"wp-block-image\"><figure class=\"alignright size-medium\"><a href=\"https://phoenixtrap.com/2021/11/23/video-a-year-of-being-wrong-on-the-internet/\"><img data-attachment-id=\"1739\" data-permalink=\"https://phoenixtrap.com/2021/12/07/sweeter-perl-exception-classes/img_0168/\" data-orig-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?fit=1920%2C1080&amp;ssl=1\" data-orig-size=\"1920,1080\" data-comments-opened=\"1\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"img_0168\" data-image-description data-image-caption data-medium-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?fit=300%2C169&amp;ssl=1\" data-large-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?fit=670%2C377&amp;ssl=1\" decoding=\"async\" width=\"300\" height=\"169\" src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=300%2C169&amp;ssl=1\" alt class=\"wp-image-1739 jetpack-lazy-image\" data-recalc-dims=\"1\" data-lazy-srcset=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=1536%2C864&amp;ssl=1 1536w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=668%2C376&amp;ssl=1 668w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?w=1920&amp;ssl=1 1920w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?w=1340&amp;ssl=1 1340w\" data-lazy-sizes=\"(max-width: 300px) 100vw, 300px\" data-lazy-src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=300%2C169&amp;is-pending-load=1#038;ssl=1\" srcset=\"data:image/gif;base64, https://phoenixtrap.com/R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7\"><noscript><img data-lazy-fallback=\"1\" data-attachment-id=\"1739\" data-permalink=\"https://phoenixtrap.com/2021/12/07/sweeter-perl-exception-classes/img_0168/\" data-orig-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?fit=1920%2C1080&amp;ssl=1\" data-orig-size=\"1920,1080\" data-comments-opened=\"1\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"img_0168\" data-image-description data-image-caption data-medium-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?fit=300%2C169&amp;ssl=1\" data-large-file=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?fit=670%2C377&amp;ssl=1\" decoding=\"async\" loading=\"lazy\" width=\"300\" height=\"169\" src=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=300%2C169&amp;ssl=1\" alt class=\"wp-image-1739\" srcset=\"https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=1536%2C864&amp;ssl=1 1536w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?resize=668%2C376&amp;ssl=1 668w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?w=1920&amp;ssl=1 1920w, https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/12/img_0168.png?w=1340&amp;ssl=1 1340w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\"></noscript></a><figcaption>What about My::Favorite::Module?</figcaption></figure></div>\n<p>I men­tioned at the <a href=\"https://thibaultduponchelle.github.io/the-ephemeral-miniconf/\">Ephemeral Miniconf</a> last month that as soon as I write about one Perl mod­ule (or five), some­one inevitably brings up anoth­er (or sev­en) I’ve missed. And of course, it hap­pened again <a href=\"https://phoenixtrap.com/2021/11/30/vicious-test-mockery-of-a-perl-modulino/\">last week</a>: no soon­er had I writ­ten in pass­ing that I was using <a href=\"https://metacpan.org/pod/Exception::Class\">Exception::Class</a> than the denizens of the <a href=\"https://web.libera.chat/#perl\">Libera Chat IRC #perl chan­nel</a> insist­ed I should use <a href=\"https://metacpan.org/pod/Throwable\">Throwable</a> instead for defin­ing my excep­tions. (I’ve already blogged about var­i­ous ways of <a href=\"https://phoenixtrap.com/2021/02/22/exceptional-perl-failure-is-an-option/\" data-type=\"post\" data-id=\"366\">catch­ing excep­tions</a>.)</p>\n<p>Why Throwable? Aside from Exception::Class’s author <a href=\"https://metacpan.org/pod/Exception::Class#DESCRIPTION\">rec­om­mend­ing it</a> over his own work due to a <a href=\"https://metacpan.org/release/DROLSKY/Exception-Class-1.45/source/Changes#L57\"><span class=\"push-double\"></span>​<span class=\"pull-double\">“</span>nicer, more mod­ern inter­face,”</a> Throwable is a <a href=\"https://metacpan.org/pod/Moo::Role\">Moo role</a>, so it’s com­pos­able into class­es along with oth­er <a href=\"https://perldoc.perl.org/perlootut#Roles\">roles</a> instead of muck­ing about with mul­ti­ple inher­i­tance. This means that if your excep­tions need to do some­thing reusable in your appli­ca­tion like <a href=\"https://metacpan.org/pod/Task::Kensho::Logging\">log­ging</a>, you can also con­sume a role that does that and not have so much dupli­cate code. (No, I’m not going to pick a favorite log­ging mod­ule; I’ll prob­a­bly get that wrong too.)</p>\n<p>However, since Throwable is a role instead of a class, I would have to define sev­er­al addi­tion­al <a href=\"https://perldoc.perl.org/functions/package\"><code>package</code></a>s in my tiny <a href=\"https://perlmaven.com/modulino-both-script-and-module\">mod­uli­no</a> script from last week, one for each excep­tion class I want. The beau­ty of Exception::Class is its sim­ple declar­a­tive nature: just <a href=\"https://perldoc.perl.org/functions/use\"><code>use</code></a> it and <a href=\"https://metacpan.org/pod/Exception::Class#DECLARING-EXCEPTION-CLASSES\">pass a list</a> of desired class names along with options for attrib­ut­es and what­not. What’s need­ed for sim­ple use cas­es like mine is a declar­a­tive syn­tax for defin­ing sev­er­al excep­tion class­es with­out the noise of mul­ti­ple packages.</p>\n<p>Enter <a href=\"https://metacpan.org/pod/Throwable::SugarFactory\">Throwable::SugarFactory</a>, a mod­ule that enables you to do just that by adding an <code>exception</code> func­tion for declar­ing excep­tion class­es. (There’s also the similarly-​named <a href=\"https://metacpan.org/pod/Throwable::Factory\">Throwable::Factory</a>; see the above dis­cus­sion about nev­er being able to cov­er everybody’s favorites.) The <code>exception</code> func­tion <a href=\"https://metacpan.org/pod/Throwable::SugarFactory#DECLARATION\">takes three argu­ments</a>: the name of the desired excep­tion class as a string, a descrip­tion, and an option­al list of instruc­tions Moo uses to build the class. It might look some­thing like this:</p>\n<pre class=\"wp-block-code\"><code>package Local::My::Exceptions;\nuse Throwable::SugarFactory;\n\nexception GenericError  =&gt; 'something bad happened';\nexception DetailedError =&gt; 'something specific happened' =&gt;\n  ( has =&gt; [ message =&gt; ( is =&gt; 'ro' ) ] );\n\n1;</code></pre>\n<p>Throwable::SugarFactory takes care of cre­at­ing con­struc­tor func­tions in Perl-​style <code>snake_case</code> as well as func­tions for detect­ing what kind of excep­tion is being caught, so you can use your new excep­tion library like this:</p>\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env perl\n\nuse experimental qw(isa);\nuse Feature::Compat::Try;\nuse JSON::MaybeXS;\nuse Local::My::Exceptions;\n\ntry {\n    die generic_error();\n}\ncatch ($e) {\n    warn 'whoops!';\n}\n\ntry {\n    die detailed_error( message =&gt; 'you got me' );\n}\ncatch ($e) {\n    die encode_json( $e-&gt;to_hash )\n      if $e isa DetailedError and defined $e-&gt;message;\n    $e-&gt;throw if $e-&gt;does('Throwable');\n    die $e;\n}</code></pre>\n<p>The above also demon­strates a cou­ple of oth­er Throwable::SugarFactory fea­tures. First, you get a <code><a href=\"https://metacpan.org/pod/Throwable::SugarFactory#to_hash\">to_hash</a></code> method that returns a hash ref­er­ence of all excep­tion data, suit­able for seri­al­iz­ing to JSON. Second, you <a href=\"https://metacpan.org/pod/Throwable::SugarFactory#Throwable\">get all of Throwable’s meth­ods</a>, includ­ing <code><a href=\"https://metacpan.org/pod/Throwable#throw\">throw</a></code> for re-​throwing exceptions. </p>\n<p>So where does this leave last week’s <a href=\"https://foaas.com/\">FOAAS.com</a> mod­uli­no client demon­stra­tion of <a href=\"https://en.wikipedia.org/wiki/Mock_object\">object mock­ing</a> tests? With a lit­tle bit of rewrit­ing to define and then use our sweet­er excep­tion library, it looks like this. You can <a href=\"https://phoenixtrap.com/2021/11/30/vicious-test-mockery-of-a-perl-modulino/\" data-type=\"post\" data-id=\"1687\">review</a> for a descrip­tion of the rest of its workings.</p>\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env perl\n\npackage Local::CallFOAAS::Exceptions;\nuse Throwable::SugarFactory;\n\nBEGIN {\n    exception NoMethodError =&gt;\n      'no matching WebService::FOAAS method' =&gt;\n      ( has =&gt; [ method =&gt; ( is =&gt; 'ro' ) ] );\n    exception ServiceError =&gt;\n      'error from WebService::FOAAS' =&gt;\n      ( has =&gt; [ message =&gt; ( is =&gt; 'ro' ) ] );\n}\n\npackage Local::CallFOAAS;  # this is a modulino\nuse Test2::V0;             # enables strict, warnings, utf8\n\n# declare all the new stuff we're using\nuse feature qw(say state);\nuse experimental qw(isa postderef signatures);\nuse Feature::Compat::Try;\nuse Syntax::Construct qw(non-destructive-substitution);\n\nuse WebService::FOAAS ();\nuse Package::Stash;\nBEGIN { Local::CallFOAAS::Exceptions-&gt;import() }\n\nmy $foaas = Package::Stash-&gt;new('WebService::FOAAS');\n\nmy $run_as =\n    !!$ENV{CPANTEST}       ? 'test'\n  : !defined scalar caller ? 'run'\n  :                          undef;\n__PACKAGE__-&gt;$run_as(@ARGV) if defined $run_as;\n\nsub run ( $class, @args ) {\n    try { say $class-&gt;call_method(@args) }\n    catch ($e) {\n        die 'No method ', $e-&gt;method, \"\\n\"\n          if $e isa NoMethodError;\n        die 'Service error: ', $e-&gt;message, \"\\n\"\n          if $e isa ServiceError;\n        die \"$e\\n\";\n    }\n    return;\n}\n\n# Utilities\n\nsub methods ($) {\n    state @methods = sort map s/^foaas_(.+)/$1/r,\n      grep /^foaas_/, $foaas-&gt;list_all_symbols('CODE');\n    return @methods;\n}\n\nsub call_method ( $class, $method = '', @args ) {\n    state %methods = map { $_ =&gt; 1 } $class-&gt;methods();\n    die no_method_error( method =&gt; $method )\n      unless $methods{$method};\n    return do {\n        try { $foaas-&gt;get_symbol(\"&amp;$method\")-&gt;(@args) }\n        catch ($e) { die service_error( message =&gt; $e ) }\n    };\n}\n\n# Testing\n\nsub test ( $class, @ ) {\n    state $stash = Package::Stash-&gt;new($class);\n    state @tests = sort grep /^_test_/,\n      $stash-&gt;list_all_symbols('CODE');\n\n    for my $test (@tests) {\n        subtest $test =&gt; sub {\n            try { $class-&gt;$test() }\n            catch ($e) { diag $e }\n        };\n    }\n    done_testing();\n    return;\n}\n\nsub _test_can ($class) {\n    state @subs = qw(run call_method methods test);\n    can_ok $class, \\@subs, \"can do: @subs\";\n    return;\n}\n\nsub _test_methods ($class) {\n    my $mock = mock 'WebService::FOAAS' =&gt; ( track =&gt; 1 );\n\n    for my $method ( $class-&gt;methods() ) {\n        $mock-&gt;override( $method =&gt; 1 );\n\n        ok lives { $class-&gt;call_method($method) },\n          \"$method lives\";\n        ok scalar $mock-&gt;sub_tracking-&gt;{$method}-&gt;@*,\n          \"$method called\";\n    }\n    return;\n}\n\nsub _test_service_failure ($class) {\n    my $mock = mock 'WebService::FOAAS';\n\n    for my $method ( $class-&gt;methods() ) {\n        $mock-&gt;override( $method =&gt; sub { die 'mocked' } );\n\n        my $exception =\n          dies { $class-&gt;call_method($method) };\n        isa_ok $exception, [ServiceError],\n          \"$method throws ServiceError on failure\";\n        like $exception-&gt;message, qr/^mocked/,\n          \"correct error in $method exception\";\n    }\n    return;\n}\n\n1;</code></pre>\n<p><em>[Updated, thanks to <a href=\"http://www.grinnz.com/\">Dan Book</a>, <a href=\"https://github.com/karenetheridge\">Karen Etheridge</a>, and <a href=\"https://metacpan.org/author/BOBK\">Bob Kleemann</a>]</em> The only goofy bit above is the need to put the <code>exception</code> calls in a <code>BEGIN</code> block and then explic­it­ly call <code>BEGIN { Local::CallFOAAS::Exceptions-&gt;import() }</code>. Since the two pack­ages are in the same file, I can’t do a <code>use</code> state­ment since the implied <code><a href=\"https://perldoc.perl.org/functions/require\">require</a></code> would look for a cor­re­spond­ing file or entry in <code><a href=\"https://perldoc.perl.org/variables/%25INC\">%INC</a></code>. (You can get around this by mess­ing with <code>%INC</code> direct­ly or through a mod­ule like <a href=\"https://metacpan.org/pod/me::inlined\">me::inlined</a> that does that mess­ing for you, but for a single-​purpose mod­uli­no like this it’s fine.)</p>\n<hr class=\"wp-block-separator\">\n<span id=\"tip-jar-wp-element-3\" class=\"tip-jar-wp-element\" tip-jar-wp-form-number=\"3\"></span>",
                "value": "What about My::Favorite::Module?\nI men­tioned at the Ephemeral Miniconf last month that as soon as I write about one Perl mod­ule (or five), some­one inevitably brings up anoth­er (or sev­en) I’ve missed. And of course, it hap­pened again last week: no soon­er had I writ­ten in pass­ing that I was using Exception::Class than the denizens of the Libera Chat IRC #perl chan­nel insist­ed I should use Throwable instead for defin­ing my excep­tions. (I’ve already blogged about var­i­ous ways of catch­ing excep­tions.)\nWhy Throwable? Aside from Exception::Class’s author rec­om­mend­ing it over his own work due to a ​“nicer, more mod­ern inter­face,” Throwable is a Moo role, so it’s com­pos­able into class­es along with oth­er roles instead of muck­ing about with mul­ti­ple inher­i­tance. This means that if your excep­tions need to do some­thing reusable in your appli­ca­tion like log­ging, you can also con­sume a role that does that and not have so much dupli­cate code. (No, I’m not going to pick a favorite log­ging mod­ule; I’ll prob­a­bly get that wrong too.)\nHowever, since Throwable is a role instead of a class, I would have to define sev­er­al addi­tion­al packages in my tiny mod­uli­no script from last week, one for each excep­tion class I want. The beau­ty of Exception::Class is its sim­ple declar­a­tive nature: just use it and pass a list of desired class names along with options for attrib­ut­es and what­not. What’s need­ed for sim­ple use cas­es like mine is a declar­a­tive syn­tax for defin­ing sev­er­al excep­tion class­es with­out the noise of mul­ti­ple packages.\nEnter Throwable::SugarFactory, a mod­ule that enables you to do just that by adding an exception func­tion for declar­ing excep­tion class­es. (There’s also the similarly-​named Throwable::Factory; see the above dis­cus­sion about nev­er being able to cov­er everybody’s favorites.) The exception func­tion takes three argu­ments: the name of the desired excep­tion class as a string, a descrip­tion, and an option­al list of instruc­tions Moo uses to build the class. It might look some­thing like this:\npackage Local::My::Exceptions;\nuse Throwable::SugarFactory;\n\nexception GenericError  => 'something bad happened';\nexception DetailedError => 'something specific happened' =>\n  ( has => [ message => ( is => 'ro' ) ] );\n\n1;\nThrowable::SugarFactory takes care of cre­at­ing con­struc­tor func­tions in Perl-​style snake_case as well as func­tions for detect­ing what kind of excep­tion is being caught, so you can use your new excep­tion library like this:\n#!/usr/bin/env perl\n\nuse experimental qw(isa);\nuse Feature::Compat::Try;\nuse JSON::MaybeXS;\nuse Local::My::Exceptions;\n\ntry {\n    die generic_error();\n}\ncatch ($e) {\n    warn 'whoops!';\n}\n\ntry {\n    die detailed_error( message => 'you got me' );\n}\ncatch ($e) {\n    die encode_json( $e->to_hash )\n      if $e isa DetailedError and defined $e->message;\n    $e->throw if $e->does('Throwable');\n    die $e;\n}\nThe above also demon­strates a cou­ple of oth­er Throwable::SugarFactory fea­tures. First, you get a to_hash method that returns a hash ref­er­ence of all excep­tion data, suit­able for seri­al­iz­ing to JSON. Second, you get all of Throwable’s meth­ods, includ­ing throw for re-​throwing exceptions. \nSo where does this leave last week’s FOAAS.com mod­uli­no client demon­stra­tion of object mock­ing tests? With a lit­tle bit of rewrit­ing to define and then use our sweet­er excep­tion library, it looks like this. You can review for a descrip­tion of the rest of its workings.\n#!/usr/bin/env perl\n\npackage Local::CallFOAAS::Exceptions;\nuse Throwable::SugarFactory;\n\nBEGIN {\n    exception NoMethodError =>\n      'no matching WebService::FOAAS method' =>\n      ( has => [ method => ( is => 'ro' ) ] );\n    exception ServiceError =>\n      'error from WebService::FOAAS' =>\n      ( has => [ message => ( is => 'ro' ) ] );\n}\n\npackage Local::CallFOAAS;  # this is a modulino\nuse Test2::V0;             # enables strict, warnings, utf8\n\n# declare all the new stuff we're using\nuse feature qw(say state);\nuse experimental qw(isa postderef signatures);\nuse Feature::Compat::Try;\nuse Syntax::Construct qw(non-destructive-substitution);\n\nuse WebService::FOAAS ();\nuse Package::Stash;\nBEGIN { Local::CallFOAAS::Exceptions->import() }\n\nmy $foaas = Package::Stash->new('WebService::FOAAS');\n\nmy $run_as =\n    !!$ENV{CPANTEST}       ? 'test'\n  : !defined scalar caller ? 'run'\n  :                          undef;\n__PACKAGE__->$run_as(@ARGV) if defined $run_as;\n\nsub run ( $class, @args ) {\n    try { say $class->call_method(@args) }\n    catch ($e) {\n        die 'No method ', $e->method, \"\\n\"\n          if $e isa NoMethodError;\n        die 'Service error: ', $e->message, \"\\n\"\n          if $e isa ServiceError;\n        die \"$e\\n\";\n    }\n    return;\n}\n\n# Utilities\n\nsub methods ($) {\n    state @methods = sort map s/^foaas_(.+)/$1/r,\n      grep /^foaas_/, $foaas->list_all_symbols('CODE');\n    return @methods;\n}\n\nsub call_method ( $class, $method = '', @args ) {\n    state %methods = map { $_ => 1 } $class->methods();\n    die no_method_error( method => $method )\n      unless $methods{$method};\n    return do {\n        try { $foaas->get_symbol(\"&$method\")->(@args) }\n        catch ($e) { die service_error( message => $e ) }\n    };\n}\n\n# Testing\n\nsub test ( $class, @ ) {\n    state $stash = Package::Stash->new($class);\n    state @tests = sort grep /^_test_/,\n      $stash->list_all_symbols('CODE');\n\n    for my $test (@tests) {\n        subtest $test => sub {\n            try { $class->$test() }\n            catch ($e) { diag $e }\n        };\n    }\n    done_testing();\n    return;\n}\n\nsub _test_can ($class) {\n    state @subs = qw(run call_method methods test);\n    can_ok $class, \\@subs, \"can do: @subs\";\n    return;\n}\n\nsub _test_methods ($class) {\n    my $mock = mock 'WebService::FOAAS' => ( track => 1 );\n\n    for my $method ( $class->methods() ) {\n        $mock->override( $method => 1 );\n\n        ok lives { $class->call_method($method) },\n          \"$method lives\";\n        ok scalar $mock->sub_tracking->{$method}->@*,\n          \"$method called\";\n    }\n    return;\n}\n\nsub _test_service_failure ($class) {\n    my $mock = mock 'WebService::FOAAS';\n\n    for my $method ( $class->methods() ) {\n        $mock->override( $method => sub { die 'mocked' } );\n\n        my $exception =\n          dies { $class->call_method($method) };\n        isa_ok $exception, [ServiceError],\n          \"$method throws ServiceError on failure\";\n        like $exception->message, qr/^mocked/,\n          \"correct error in $method exception\";\n    }\n    return;\n}\n\n1;\n[Updated, thanks to Dan Book, Karen Etheridge, and Bob Kleemann] The only goofy bit above is the need to put the exception calls in a BEGIN block and then explic­it­ly call BEGIN { Local::CallFOAAS::Exceptions->import() }. Since the two pack­ages are in the same file, I can’t do a use state­ment since the implied require would look for a cor­re­spond­ing file or entry in %INC. (You can get around this by mess­ing with %INC direct­ly or through a mod­ule like me::inlined that does that mess­ing for you, but for a single-​purpose mod­uli­no like this it’s fine.)"
              }
            ],
            "category": [
              "CPAN",
              "die",
              "Exception::Class",
              "exceptions",
              "experimental",
              "feature",
              "Feature::Compat::Try",
              "grep",
              "IRC",
              "isa",
              "JSON",
              "JSON::MaybeXS",
              "map",
              "metaprogramming",
              "mocking",
              "modulinos",
              "Moo",
              "OOP",
              "Package::Stash",
              "Perl",
              "postfix dereferencing",
              "QA",
              "quality",
              "regexps",
              "regular expressions",
              "roles",
              "signatures",
              "Syntax::Construct",
              "Test2",
              "Test2::Suite",
              "testing",
              "Throwable",
              "Throwable::Factory",
              "Throwable::SugarFactory",
              "web services",
              "WebService::FOAAS"
            ]
          },
          "id": "post-1737"
        }
      ]
    }
  ],
  "rels": {
    "profile": [
      "https://microformats.org/profile/specs",
      "https://microformats.org/profile/hatom"
    ],
    "dns-prefetch": [
      "https://js.stripe.com/",
      "https://secure.gravatar.com/",
      "https://www.googletagmanager.com/",
      "https://i0.wp.com/",
      "https://c0.wp.com/",
      "https://widgets.wp.com/",
      "https://s0.wp.com/",
      "https://0.gravatar.com/",
      "https://1.gravatar.com/",
      "https://2.gravatar.com/",
      "https://jetpack.wordpress.com/",
      "https://public-api.wordpress.com/"
    ],
    "alternate": [
      "https://phoenixtrap.com/feed/",
      "https://phoenixtrap.com/comments/feed/"
    ],
    "stylesheet": [
      "https://c0.wp.com/c/6.1/wp-includes/css/dist/block-library/style.min.css",
      "https://c0.wp.com/c/6.1/wp-includes/js/mediaelement/mediaelementplayer-legacy.min.css",
      "https://c0.wp.com/c/6.1/wp-includes/js/mediaelement/wp-mediaelement.min.css",
      "https://phoenixtrap.com/wp-content/plugins/coblocks/dist/style-coblocks-1.css?ver=2.25.0",
      "https://phoenixtrap.com/wp-content/plugins/coil-web-monetization/dist/blocks.style.build.min.css?ver=2.0.0",
      "https://c0.wp.com/c/6.1/wp-includes/css/classic-themes.min.css",
      "https://c0.wp.com/c/6.1/wp-includes/css/dist/components/style.min.css",
      "https://phoenixtrap.com/wp-content/plugins/coblocks/includes/Dependencies/GoDaddy/Styles/build/latest.css?ver=1.0.5",
      "https://phoenixtrap.com/wp-content/plugins/coil-web-monetization/assets/css/messages/coil.min.css?ver=2.0.0",
      "https://phoenixtrap.com/wp-content/plugins/indieweb/static/css/indieweb.css?ver=3.4.7",
      "https://phoenixtrap.com/wp-content/plugins/tip-jar-wp/includes/frontend/css/build/tip-jar-wp.css?ver=2.0.0",
      "https://phoenixtrap.com/wp-content/plugins/tip-jar-wp/assets/images/flags/flags.min.css?ver=2.0.0",
      "https://phoenixtrap.com/wp-content/plugins/semantic-linkbacks/css/semantic-linkbacks.css?ver=3.10.3",
      "https://phoenixtrap.com/wp-content/themes/sempress/style.css?ver=d6eb82c324cab2f36e345863fad95090",
      "https://c0.wp.com/p/jetpack/11.5.1/css/jetpack.css",
      "https://phoenixtrap.com/wp-content/plugins/jetpack/_inc/blocks/instagram-gallery/view.css?minify=false&ver=11.5.1",
      "https://phoenixtrap.com/wp-content/plugins/jetpack/_inc/blocks/subscriptions/view.css?minify=false&ver=11.5.1"
    ],
    "https://api.w.org/": [
      "https://phoenixtrap.com/wp-json/"
    ],
    "EditURI": [
      "https://phoenixtrap.com/xmlrpc.php?rsd"
    ],
    "authorization_endpoint": [
      "https://phoenixtrap.com/wp-json/indieauth/1.0/auth"
    ],
    "token_endpoint": [
      "https://phoenixtrap.com/wp-json/indieauth/1.0/token"
    ],
    "monetization": [
      "https://ilp.uphold.com/zy4NbUXE9Xwn"
    ],
    "me": [
      "https://github.com/mjgardner",
      "https://twitter.com/markjgardner",
      "https://www.facebook.com/mjgardner",
      "https://www.instagram.com/mjgardner",
      "https://www.flickr.com/people/mjgardner",
      "https://mastodon.sdf.org/@mjgardner",
      "https://phoenixtrap.com/cdn-cgi/l/email-protection#721f181532021a1d171c1b0a060013025c111d1f"
    ],
    "pgpkey": [
      "https://phoenixtrap.com/.well-known/pka/mjg_pubkey_8CB08A45.txt"
    ],
    "icon": [
      "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=32%2C32&ssl=1",
      "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=192%2C192&ssl=1"
    ],
    "apple-touch-icon": [
      "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=180%2C180&ssl=1"
    ],
    "micropub_media": [
      "https://phoenixtrap.com/wp-json/micropub/1.0/media"
    ],
    "micropub": [
      "https://phoenixtrap.com/wp-json/micropub/1.0/endpoint"
    ],
    "home": [
      "https://phoenixtrap.com/"
    ],
    "prev": [
      "https://phoenixtrap.com/page/2/"
    ],
    "bookmark": [
      "https://phoenixtrap.com/2022/06/24/perl-lightning-talk-dont-fear-map-and-grep/",
      "https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/",
      "https://phoenixtrap.com/2022/02/10/perl-list-processing-is-for-hashes-too/",
      "https://phoenixtrap.com/2022/01/19/get-out-early-with-perl-statement-modifiers/",
      "https://phoenixtrap.com/2022/01/11/highlighting-members-of-the-perl-family/",
      "https://phoenixtrap.com/2022/01/04/perl-warnings-and-the-warn-function/",
      "https://phoenixtrap.com/2021/12/28/avoid-yoda-conditions-in-perl-you-should/",
      "https://phoenixtrap.com/2021/12/21/34-at-34-for-v5-34-modern-perl-features-for-perls-birthday/",
      "https://phoenixtrap.com/2021/12/14/a-brief-note-on-log4perl/",
      "https://phoenixtrap.com/2021/12/07/sweeter-perl-exception-classes/"
    ],
    "author": [
      "https://phoenixtrap.com/"
    ],
    "category": [
      "https://phoenixtrap.com/category/programming/"
    ],
    "tag": [
      "https://phoenixtrap.com/category/programming/",
      "https://phoenixtrap.com/tag/conferences/",
      "https://phoenixtrap.com/tag/grep/",
      "https://phoenixtrap.com/tag/lists/",
      "https://phoenixtrap.com/tag/map/",
      "https://phoenixtrap.com/tag/meetup/",
      "https://phoenixtrap.com/tag/meta/",
      "https://phoenixtrap.com/tag/perl/",
      "https://phoenixtrap.com/tag/raku/",
      "https://phoenixtrap.com/tag/rakulang/",
      "https://phoenixtrap.com/tag/the-perl-conference/",
      "https://phoenixtrap.com/tag/ajax/",
      "https://phoenixtrap.com/tag/ansi/",
      "https://phoenixtrap.com/tag/base64/",
      "https://phoenixtrap.com/tag/cpan/",
      "https://phoenixtrap.com/tag/curl/",
      "https://phoenixtrap.com/tag/httptiny/",
      "https://phoenixtrap.com/tag/ikea/",
      "https://phoenixtrap.com/tag/imageterm256color/",
      "https://phoenixtrap.com/tag/ios/",
      "https://phoenixtrap.com/tag/ipad/",
      "https://phoenixtrap.com/tag/iphone/",
      "https://phoenixtrap.com/tag/iterm2/",
      "https://phoenixtrap.com/tag/jq/",
      "https://phoenixtrap.com/tag/json/",
      "https://phoenixtrap.com/tag/jsonpp/",
      "https://phoenixtrap.com/tag/mimebase64/",
      "https://phoenixtrap.com/tag/mojolicious/",
      "https://phoenixtrap.com/tag/postfix-dereferencing/",
      "https://phoenixtrap.com/tag/termreadkey/",
      "https://phoenixtrap.com/tag/unicode/",
      "https://phoenixtrap.com/tag/webdev/",
      "https://phoenixtrap.com/tag/any/",
      "https://phoenixtrap.com/tag/benchmark/",
      "https://phoenixtrap.com/tag/hashes/",
      "https://phoenixtrap.com/tag/keys/",
      "https://phoenixtrap.com/tag/listsomeutils/",
      "https://phoenixtrap.com/tag/listutil/",
      "https://phoenixtrap.com/tag/pairgrep/",
      "https://phoenixtrap.com/tag/work/",
      "https://phoenixtrap.com/tag/die/",
      "https://phoenixtrap.com/tag/eval/",
      "https://phoenixtrap.com/tag/exceptions/",
      "https://phoenixtrap.com/tag/perlcritic/",
      "https://phoenixtrap.com/tag/signatures/",
      "https://phoenixtrap.com/tag/syntaxkeywordtry/",
      "https://phoenixtrap.com/tag/typeparams/",
      "https://phoenixtrap.com/tag/irc/",
      "https://phoenixtrap.com/tag/people/",
      "https://phoenixtrap.com/tag/perl-com/",
      "https://phoenixtrap.com/tag/social-media/",
      "https://phoenixtrap.com/tag/twitter/",
      "https://phoenixtrap.com/tag/carp/",
      "https://phoenixtrap.com/tag/logdispatch/",
      "https://phoenixtrap.com/tag/loglog4perl/",
      "https://phoenixtrap.com/tag/logging/",
      "https://phoenixtrap.com/tag/signal-handlers/",
      "https://phoenixtrap.com/tag/warn/",
      "https://phoenixtrap.com/tag/warnings/",
      "https://phoenixtrap.com/tag/conditions/",
      "https://phoenixtrap.com/tag/star-wars/",
      "https://phoenixtrap.com/tag/strictures/",
      "https://phoenixtrap.com/tag/variables/",
      "https://phoenixtrap.com/tag/yoda/",
      "https://phoenixtrap.com/tag/inc/",
      "https://phoenixtrap.com/tag/at-isa/",
      "https://phoenixtrap.com/tag/313/",
      "https://phoenixtrap.com/tag/advocacy/",
      "https://phoenixtrap.com/tag/array-slices/",
      "https://phoenixtrap.com/tag/arrays/",
      "https://phoenixtrap.com/tag/autodie/",
      "https://phoenixtrap.com/tag/base/",
      "https://phoenixtrap.com/tag/classaccessor/",
      "https://phoenixtrap.com/tag/datastructures/",
      "https://phoenixtrap.com/tag/dereferencing/",
      "https://phoenixtrap.com/tag/each/",
      "https://phoenixtrap.com/tag/experimental/",
      "https://phoenixtrap.com/tag/fc/",
      "https://phoenixtrap.com/tag/feature/",
      "https://phoenixtrap.com/tag/featurecompattry/",
      "https://phoenixtrap.com/tag/given/",
      "https://phoenixtrap.com/tag/hash-slices/",
      "https://phoenixtrap.com/tag/here-documents/",
      "https://phoenixtrap.com/tag/isa/",
      "https://phoenixtrap.com/tag/lexical-subroutines/",
      "https://phoenixtrap.com/tag/moo/",
      "https://phoenixtrap.com/tag/moose/",
      "https://phoenixtrap.com/tag/objectpad/",
      "https://phoenixtrap.com/tag/oop/",
      "https://phoenixtrap.com/tag/package/",
      "https://phoenixtrap.com/tag/parent/",
      "https://phoenixtrap.com/tag/pluggable-keywords/",
      "https://phoenixtrap.com/tag/regexps/",
      "https://phoenixtrap.com/tag/regular-expressions/",
      "https://phoenixtrap.com/tag/say/",
      "https://phoenixtrap.com/tag/slices/",
      "https://phoenixtrap.com/tag/smartmatch/",
      "https://phoenixtrap.com/tag/state/",
      "https://phoenixtrap.com/tag/switch/",
      "https://phoenixtrap.com/tag/syntaxconstruct/",
      "https://phoenixtrap.com/tag/taskkensho/",
      "https://phoenixtrap.com/tag/testbuilder/",
      "https://phoenixtrap.com/tag/testmore/",
      "https://phoenixtrap.com/tag/test2/",
      "https://phoenixtrap.com/tag/test2harness/",
      "https://phoenixtrap.com/tag/test2suite/",
      "https://phoenixtrap.com/tag/testing/",
      "https://phoenixtrap.com/tag/try-catch/",
      "https://phoenixtrap.com/tag/utureasyncawait/",
      "https://phoenixtrap.com/tag/values/",
      "https://phoenixtrap.com/tag/wget/",
      "https://phoenixtrap.com/tag/when/",
      "https://phoenixtrap.com/tag/xml/",
      "https://phoenixtrap.com/tag/xs/",
      "https://phoenixtrap.com/tag/xsparsekeyword/",
      "https://phoenixtrap.com/tag/yada-yada/",
      "https://phoenixtrap.com/tag/apple/",
      "https://phoenixtrap.com/tag/aws/",
      "https://phoenixtrap.com/tag/bbedit/",
      "https://phoenixtrap.com/tag/debugging/",
      "https://phoenixtrap.com/tag/emacs/",
      "https://phoenixtrap.com/tag/icloud/",
      "https://phoenixtrap.com/tag/linux/",
      "https://phoenixtrap.com/tag/log4j/",
      "https://phoenixtrap.com/tag/minecraft/",
      "https://phoenixtrap.com/tag/security/",
      "https://phoenixtrap.com/tag/vim/",
      "https://phoenixtrap.com/tag/windows/",
      "https://phoenixtrap.com/tag/exceptionclass/",
      "https://phoenixtrap.com/tag/jsonmaybexs/",
      "https://phoenixtrap.com/tag/metaprogramming/",
      "https://phoenixtrap.com/tag/mocking/",
      "https://phoenixtrap.com/tag/modulinos/",
      "https://phoenixtrap.com/tag/packagestash/",
      "https://phoenixtrap.com/tag/qa/",
      "https://phoenixtrap.com/tag/quality/",
      "https://phoenixtrap.com/tag/roles/",
      "https://phoenixtrap.com/tag/throwable/",
      "https://phoenixtrap.com/tag/throwablefactory/",
      "https://phoenixtrap.com/tag/throwablesugarfactory/",
      "https://phoenixtrap.com/tag/web-services/",
      "https://phoenixtrap.com/tag/webservicefoaas/"
    ],
    "noopener": [
      "https://www.instagram.com/p/CkmuRiQMZjs/",
      "https://www.instagram.com/p/CkiASwROrvs/",
      "https://www.instagram.com/p/CkbXo2lOPBw/",
      "https://www.instagram.com/p/CkQrtXxDXmM/",
      "https://www.instagram.com/p/CkEC_nvJukx/",
      "https://www.instagram.com/p/Cj3DGhXOPKF/",
      "https://www.instagram.com/p/CjYfuBLOVw1/",
      "https://www.instagram.com/p/CjRnlfOOVc9/",
      "https://www.instagram.com/p/CjIjkhIOaoK/"
    ],
    "noreferrer": [
      "https://www.instagram.com/p/CkmuRiQMZjs/",
      "https://www.instagram.com/p/CkiASwROrvs/",
      "https://www.instagram.com/p/CkbXo2lOPBw/",
      "https://www.instagram.com/p/CkQrtXxDXmM/",
      "https://www.instagram.com/p/CkEC_nvJukx/",
      "https://www.instagram.com/p/Cj3DGhXOPKF/",
      "https://www.instagram.com/p/CjYfuBLOVw1/",
      "https://www.instagram.com/p/CjRnlfOOVc9/",
      "https://www.instagram.com/p/CjIjkhIOaoK/"
    ],
    "generator": [
      "https://wordpress.org/"
    ]
  },
  "rel-urls": {
    "https://microformats.org/profile/specs": {
      "rels": [
        "profile"
      ]
    },
    "https://microformats.org/profile/hatom": {
      "rels": [
        "profile"
      ]
    },
    "https://js.stripe.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://secure.gravatar.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://www.googletagmanager.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://i0.wp.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://c0.wp.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://widgets.wp.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://s0.wp.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://0.gravatar.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://1.gravatar.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://2.gravatar.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://jetpack.wordpress.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://public-api.wordpress.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://phoenixtrap.com/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Feed",
      "type": "application/rss+xml"
    },
    "https://phoenixtrap.com/comments/feed/": {
      "rels": [
        "alternate"
      ],
      "title": "The Phoenix Trap » Comments Feed",
      "type": "application/rss+xml"
    },
    "https://c0.wp.com/c/6.1/wp-includes/css/dist/block-library/style.min.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://c0.wp.com/c/6.1/wp-includes/js/mediaelement/mediaelementplayer-legacy.min.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://c0.wp.com/c/6.1/wp-includes/js/mediaelement/wp-mediaelement.min.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/coblocks/dist/style-coblocks-1.css?ver=2.25.0": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/coil-web-monetization/dist/blocks.style.build.min.css?ver=2.0.0": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://c0.wp.com/c/6.1/wp-includes/css/classic-themes.min.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://c0.wp.com/c/6.1/wp-includes/css/dist/components/style.min.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/coblocks/includes/Dependencies/GoDaddy/Styles/build/latest.css?ver=1.0.5": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/coil-web-monetization/assets/css/messages/coil.min.css?ver=2.0.0": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/indieweb/static/css/indieweb.css?ver=3.4.7": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/tip-jar-wp/includes/frontend/css/build/tip-jar-wp.css?ver=2.0.0": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/tip-jar-wp/assets/images/flags/flags.min.css?ver=2.0.0": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/semantic-linkbacks/css/semantic-linkbacks.css?ver=3.10.3": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/themes/sempress/style.css?ver=d6eb82c324cab2f36e345863fad95090": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://c0.wp.com/p/jetpack/11.5.1/css/jetpack.css": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-json/": {
      "rels": [
        "https://api.w.org/"
      ]
    },
    "https://phoenixtrap.com/xmlrpc.php?rsd": {
      "rels": [
        "EditURI"
      ],
      "title": "RSD",
      "type": "application/rsd+xml"
    },
    "https://phoenixtrap.com/wp-json/indieauth/1.0/auth": {
      "rels": [
        "authorization_endpoint"
      ]
    },
    "https://phoenixtrap.com/wp-json/indieauth/1.0/token": {
      "rels": [
        "token_endpoint"
      ]
    },
    "https://ilp.uphold.com/zy4NbUXE9Xwn": {
      "rels": [
        "monetization"
      ]
    },
    "https://github.com/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://twitter.com/markjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://www.facebook.com/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://www.instagram.com/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://www.flickr.com/people/mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://mastodon.sdf.org/@mjgardner": {
      "rels": [
        "me"
      ]
    },
    "https://phoenixtrap.com/.well-known/pka/mjg_pubkey_8CB08A45.txt": {
      "rels": [
        "pgpkey"
      ]
    },
    "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=32%2C32&ssl=1": {
      "rels": [
        "icon"
      ]
    },
    "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=192%2C192&ssl=1": {
      "rels": [
        "icon"
      ]
    },
    "https://i0.wp.com/phoenixtrap.com/wp-content/uploads/2021/02/image.jpg?fit=180%2C180&ssl=1": {
      "rels": [
        "apple-touch-icon"
      ]
    },
    "https://phoenixtrap.com/wp-json/micropub/1.0/media": {
      "rels": [
        "micropub_media"
      ]
    },
    "https://phoenixtrap.com/wp-json/micropub/1.0/endpoint": {
      "rels": [
        "micropub"
      ]
    },
    "https://phoenixtrap.com/": {
      "rels": [
        "home"
      ],
      "title": "The Phoenix Trap",
      "text": "The Phoenix Trap"
    },
    "https://phoenixtrap.com/page/2/": {
      "rels": [
        "prev"
      ],
      "text": "← Older posts"
    },
    "https://phoenixtrap.com/2022/06/24/perl-lightning-talk-dont-fear-map-and-grep/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to Perl lightning talk: ​“Don’t Fear map and grep”",
      "text": "Perl lightning talk: ​“Don’t Fear map and grep”"
    },
    "https://phoenixtrap.com/category/programming/": {
      "rels": [
        "category",
        "tag"
      ],
      "text": "Programming"
    },
    "https://phoenixtrap.com/tag/conferences/": {
      "rels": [
        "tag"
      ],
      "text": "conferences"
    },
    "https://phoenixtrap.com/tag/grep/": {
      "rels": [
        "tag"
      ],
      "text": "grep"
    },
    "https://phoenixtrap.com/tag/lists/": {
      "rels": [
        "tag"
      ],
      "text": "lists"
    },
    "https://phoenixtrap.com/tag/map/": {
      "rels": [
        "tag"
      ],
      "text": "map"
    },
    "https://phoenixtrap.com/tag/meetup/": {
      "rels": [
        "tag"
      ],
      "text": "meetup"
    },
    "https://phoenixtrap.com/tag/meta/": {
      "rels": [
        "tag"
      ],
      "text": "meta"
    },
    "https://phoenixtrap.com/tag/perl/": {
      "rels": [
        "tag"
      ],
      "text": "Perl"
    },
    "https://phoenixtrap.com/tag/raku/": {
      "rels": [
        "tag"
      ],
      "text": "Raku"
    },
    "https://phoenixtrap.com/tag/rakulang/": {
      "rels": [
        "tag"
      ],
      "text": "RakuLang"
    },
    "https://phoenixtrap.com/tag/the-perl-conference/": {
      "rels": [
        "tag"
      ],
      "text": "The Perl Conference"
    },
    "https://phoenixtrap.com/2022/04/12/how-much-is-that-blahaj-in-the-terminal-window/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to How much is that BLÅHAJ in the (terminal) window?",
      "text": "How much is that BLÅHAJ in the (terminal) window?"
    },
    "https://phoenixtrap.com/tag/ajax/": {
      "rels": [
        "tag"
      ],
      "text": "AJAX"
    },
    "https://phoenixtrap.com/tag/ansi/": {
      "rels": [
        "tag"
      ],
      "text": "ANSI"
    },
    "https://phoenixtrap.com/tag/base64/": {
      "rels": [
        "tag"
      ],
      "text": "base64"
    },
    "https://phoenixtrap.com/tag/cpan/": {
      "rels": [
        "tag"
      ],
      "text": "CPAN"
    },
    "https://phoenixtrap.com/tag/curl/": {
      "rels": [
        "tag"
      ],
      "text": "curl"
    },
    "https://phoenixtrap.com/tag/httptiny/": {
      "rels": [
        "tag"
      ],
      "text": "HTTP::Tiny"
    },
    "https://phoenixtrap.com/tag/ikea/": {
      "rels": [
        "tag"
      ],
      "text": "IKEA"
    },
    "https://phoenixtrap.com/tag/imageterm256color/": {
      "rels": [
        "tag"
      ],
      "text": "Image::Term256Color"
    },
    "https://phoenixtrap.com/tag/ios/": {
      "rels": [
        "tag"
      ],
      "text": "iOS"
    },
    "https://phoenixtrap.com/tag/ipad/": {
      "rels": [
        "tag"
      ],
      "text": "iPad"
    },
    "https://phoenixtrap.com/tag/iphone/": {
      "rels": [
        "tag"
      ],
      "text": "iPhone"
    },
    "https://phoenixtrap.com/tag/iterm2/": {
      "rels": [
        "tag"
      ],
      "text": "iTerm2"
    },
    "https://phoenixtrap.com/tag/jq/": {
      "rels": [
        "tag"
      ],
      "text": "jq"
    },
    "https://phoenixtrap.com/tag/json/": {
      "rels": [
        "tag"
      ],
      "text": "JSON"
    },
    "https://phoenixtrap.com/tag/jsonpp/": {
      "rels": [
        "tag"
      ],
      "text": "JSON::PP"
    },
    "https://phoenixtrap.com/tag/mimebase64/": {
      "rels": [
        "tag"
      ],
      "text": "MIME::Base64"
    },
    "https://phoenixtrap.com/tag/mojolicious/": {
      "rels": [
        "tag"
      ],
      "text": "Mojolicious"
    },
    "https://phoenixtrap.com/tag/postfix-dereferencing/": {
      "rels": [
        "tag"
      ],
      "text": "postfix dereferencing"
    },
    "https://phoenixtrap.com/tag/termreadkey/": {
      "rels": [
        "tag"
      ],
      "text": "Term::ReadKey"
    },
    "https://phoenixtrap.com/tag/unicode/": {
      "rels": [
        "tag"
      ],
      "text": "Unicode"
    },
    "https://phoenixtrap.com/tag/webdev/": {
      "rels": [
        "tag"
      ],
      "text": "webdev"
    },
    "https://phoenixtrap.com/2022/02/10/perl-list-processing-is-for-hashes-too/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to Perl list processing is for hashes, too",
      "text": "Perl list processing is for hashes, too"
    },
    "https://phoenixtrap.com/tag/any/": {
      "rels": [
        "tag"
      ],
      "text": "any"
    },
    "https://phoenixtrap.com/tag/benchmark/": {
      "rels": [
        "tag"
      ],
      "text": "Benchmark"
    },
    "https://phoenixtrap.com/tag/hashes/": {
      "rels": [
        "tag"
      ],
      "text": "hashes"
    },
    "https://phoenixtrap.com/tag/keys/": {
      "rels": [
        "tag"
      ],
      "text": "keys"
    },
    "https://phoenixtrap.com/tag/listsomeutils/": {
      "rels": [
        "tag"
      ],
      "text": "List::SomeUtils"
    },
    "https://phoenixtrap.com/tag/listutil/": {
      "rels": [
        "tag"
      ],
      "text": "List::Util"
    },
    "https://phoenixtrap.com/tag/pairgrep/": {
      "rels": [
        "tag"
      ],
      "text": "pairgrep"
    },
    "https://phoenixtrap.com/tag/work/": {
      "rels": [
        "tag"
      ],
      "text": "work"
    },
    "https://phoenixtrap.com/2022/01/19/get-out-early-with-perl-statement-modifiers/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to Get out early with Perl statement modifiers",
      "text": "Get out early with Perl statement modifiers"
    },
    "https://phoenixtrap.com/tag/die/": {
      "rels": [
        "tag"
      ],
      "text": "die"
    },
    "https://phoenixtrap.com/tag/eval/": {
      "rels": [
        "tag"
      ],
      "text": "eval"
    },
    "https://phoenixtrap.com/tag/exceptions/": {
      "rels": [
        "tag"
      ],
      "text": "exceptions"
    },
    "https://phoenixtrap.com/tag/perlcritic/": {
      "rels": [
        "tag"
      ],
      "text": "perlcritic"
    },
    "https://phoenixtrap.com/tag/signatures/": {
      "rels": [
        "tag"
      ],
      "text": "signatures"
    },
    "https://phoenixtrap.com/tag/syntaxkeywordtry/": {
      "rels": [
        "tag"
      ],
      "text": "Syntax::Keyword::Try"
    },
    "https://phoenixtrap.com/tag/typeparams/": {
      "rels": [
        "tag"
      ],
      "text": "Type::Params"
    },
    "https://phoenixtrap.com/2022/01/11/highlighting-members-of-the-perl-family/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to Highlighting members of the Perl family",
      "text": "Highlighting members of the Perl family"
    },
    "https://phoenixtrap.com/tag/irc/": {
      "rels": [
        "tag"
      ],
      "text": "IRC"
    },
    "https://phoenixtrap.com/tag/people/": {
      "rels": [
        "tag"
      ],
      "text": "people"
    },
    "https://phoenixtrap.com/tag/perl-com/": {
      "rels": [
        "tag"
      ],
      "text": "Perl.com"
    },
    "https://phoenixtrap.com/tag/social-media/": {
      "rels": [
        "tag"
      ],
      "text": "social media"
    },
    "https://phoenixtrap.com/tag/twitter/": {
      "rels": [
        "tag"
      ],
      "text": "Twitter"
    },
    "https://phoenixtrap.com/2022/01/04/perl-warnings-and-the-warn-function/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to Perl warnings and the warn function",
      "text": "Perl warnings and the warn function"
    },
    "https://phoenixtrap.com/tag/carp/": {
      "rels": [
        "tag"
      ],
      "text": "Carp"
    },
    "https://phoenixtrap.com/tag/logdispatch/": {
      "rels": [
        "tag"
      ],
      "text": "Log::Dispatch"
    },
    "https://phoenixtrap.com/tag/loglog4perl/": {
      "rels": [
        "tag"
      ],
      "text": "Log::Log4perl"
    },
    "https://phoenixtrap.com/tag/logging/": {
      "rels": [
        "tag"
      ],
      "text": "logging"
    },
    "https://phoenixtrap.com/tag/signal-handlers/": {
      "rels": [
        "tag"
      ],
      "text": "signal handlers"
    },
    "https://phoenixtrap.com/tag/warn/": {
      "rels": [
        "tag"
      ],
      "text": "warn"
    },
    "https://phoenixtrap.com/tag/warnings/": {
      "rels": [
        "tag"
      ],
      "text": "warnings"
    },
    "https://phoenixtrap.com/2021/12/28/avoid-yoda-conditions-in-perl-you-should/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to Avoid Yoda conditions in Perl you should",
      "text": "Avoid Yoda conditions in Perl you should"
    },
    "https://phoenixtrap.com/tag/conditions/": {
      "rels": [
        "tag"
      ],
      "text": "conditions"
    },
    "https://phoenixtrap.com/tag/star-wars/": {
      "rels": [
        "tag"
      ],
      "text": "Star Wars"
    },
    "https://phoenixtrap.com/tag/strictures/": {
      "rels": [
        "tag"
      ],
      "text": "strictures"
    },
    "https://phoenixtrap.com/tag/variables/": {
      "rels": [
        "tag"
      ],
      "text": "variables"
    },
    "https://phoenixtrap.com/tag/yoda/": {
      "rels": [
        "tag"
      ],
      "text": "Yoda"
    },
    "https://phoenixtrap.com/2021/12/21/34-at-34-for-v5-34-modern-perl-features-for-perls-birthday/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to 34 at 34 for v5.34: Modern Perl features for Perl’s birthday",
      "text": "34 at 34 for v5.34: Modern Perl features for Perl’s birthday"
    },
    "https://phoenixtrap.com/tag/inc/": {
      "rels": [
        "tag"
      ],
      "text": "@INC"
    },
    "https://phoenixtrap.com/tag/at-isa/": {
      "rels": [
        "tag"
      ],
      "text": "@ISA"
    },
    "https://phoenixtrap.com/tag/313/": {
      "rels": [
        "tag"
      ],
      "text": "//"
    },
    "https://phoenixtrap.com/tag/advocacy/": {
      "rels": [
        "tag"
      ],
      "text": "advocacy"
    },
    "https://phoenixtrap.com/tag/array-slices/": {
      "rels": [
        "tag"
      ],
      "text": "array slices"
    },
    "https://phoenixtrap.com/tag/arrays/": {
      "rels": [
        "tag"
      ],
      "text": "arrays"
    },
    "https://phoenixtrap.com/tag/autodie/": {
      "rels": [
        "tag"
      ],
      "text": "autodie"
    },
    "https://phoenixtrap.com/tag/base/": {
      "rels": [
        "tag"
      ],
      "text": "base"
    },
    "https://phoenixtrap.com/tag/classaccessor/": {
      "rels": [
        "tag"
      ],
      "text": "Class::Accessor"
    },
    "https://phoenixtrap.com/tag/datastructures/": {
      "rels": [
        "tag"
      ],
      "text": "datastructures"
    },
    "https://phoenixtrap.com/tag/dereferencing/": {
      "rels": [
        "tag"
      ],
      "text": "dereferencing"
    },
    "https://phoenixtrap.com/tag/each/": {
      "rels": [
        "tag"
      ],
      "text": "each"
    },
    "https://phoenixtrap.com/tag/experimental/": {
      "rels": [
        "tag"
      ],
      "text": "experimental"
    },
    "https://phoenixtrap.com/tag/fc/": {
      "rels": [
        "tag"
      ],
      "text": "fc"
    },
    "https://phoenixtrap.com/tag/feature/": {
      "rels": [
        "tag"
      ],
      "text": "feature"
    },
    "https://phoenixtrap.com/tag/featurecompattry/": {
      "rels": [
        "tag"
      ],
      "text": "Feature::Compat::Try"
    },
    "https://phoenixtrap.com/tag/given/": {
      "rels": [
        "tag"
      ],
      "text": "given"
    },
    "https://phoenixtrap.com/tag/hash-slices/": {
      "rels": [
        "tag"
      ],
      "text": "hash slices"
    },
    "https://phoenixtrap.com/tag/here-documents/": {
      "rels": [
        "tag"
      ],
      "text": "here-documents"
    },
    "https://phoenixtrap.com/tag/isa/": {
      "rels": [
        "tag"
      ],
      "text": "isa"
    },
    "https://phoenixtrap.com/tag/lexical-subroutines/": {
      "rels": [
        "tag"
      ],
      "text": "lexical subroutines"
    },
    "https://phoenixtrap.com/tag/moo/": {
      "rels": [
        "tag"
      ],
      "text": "Moo"
    },
    "https://phoenixtrap.com/tag/moose/": {
      "rels": [
        "tag"
      ],
      "text": "Moose"
    },
    "https://phoenixtrap.com/tag/objectpad/": {
      "rels": [
        "tag"
      ],
      "text": "Object::Pad"
    },
    "https://phoenixtrap.com/tag/oop/": {
      "rels": [
        "tag"
      ],
      "text": "OOP"
    },
    "https://phoenixtrap.com/tag/package/": {
      "rels": [
        "tag"
      ],
      "text": "package"
    },
    "https://phoenixtrap.com/tag/parent/": {
      "rels": [
        "tag"
      ],
      "text": "parent"
    },
    "https://phoenixtrap.com/tag/pluggable-keywords/": {
      "rels": [
        "tag"
      ],
      "text": "pluggable keywords"
    },
    "https://phoenixtrap.com/tag/regexps/": {
      "rels": [
        "tag"
      ],
      "text": "regexps"
    },
    "https://phoenixtrap.com/tag/regular-expressions/": {
      "rels": [
        "tag"
      ],
      "text": "regular expressions"
    },
    "https://phoenixtrap.com/tag/say/": {
      "rels": [
        "tag"
      ],
      "text": "say"
    },
    "https://phoenixtrap.com/tag/slices/": {
      "rels": [
        "tag"
      ],
      "text": "slices"
    },
    "https://phoenixtrap.com/tag/smartmatch/": {
      "rels": [
        "tag"
      ],
      "text": "smartmatch"
    },
    "https://phoenixtrap.com/tag/state/": {
      "rels": [
        "tag"
      ],
      "text": "state"
    },
    "https://phoenixtrap.com/tag/switch/": {
      "rels": [
        "tag"
      ],
      "text": "switch"
    },
    "https://phoenixtrap.com/tag/syntaxconstruct/": {
      "rels": [
        "tag"
      ],
      "text": "Syntax::Construct"
    },
    "https://phoenixtrap.com/tag/taskkensho/": {
      "rels": [
        "tag"
      ],
      "text": "Task::Kensho"
    },
    "https://phoenixtrap.com/tag/testbuilder/": {
      "rels": [
        "tag"
      ],
      "text": "Test::Builder"
    },
    "https://phoenixtrap.com/tag/testmore/": {
      "rels": [
        "tag"
      ],
      "text": "Test::More"
    },
    "https://phoenixtrap.com/tag/test2/": {
      "rels": [
        "tag"
      ],
      "text": "Test2"
    },
    "https://phoenixtrap.com/tag/test2harness/": {
      "rels": [
        "tag"
      ],
      "text": "Test2::Harness"
    },
    "https://phoenixtrap.com/tag/test2suite/": {
      "rels": [
        "tag"
      ],
      "text": "Test2::Suite"
    },
    "https://phoenixtrap.com/tag/testing/": {
      "rels": [
        "tag"
      ],
      "text": "testing"
    },
    "https://phoenixtrap.com/tag/try-catch/": {
      "rels": [
        "tag"
      ],
      "text": "try/catch"
    },
    "https://phoenixtrap.com/tag/utureasyncawait/": {
      "rels": [
        "tag"
      ],
      "text": "uture::AsyncAwait"
    },
    "https://phoenixtrap.com/tag/values/": {
      "rels": [
        "tag"
      ],
      "text": "values"
    },
    "https://phoenixtrap.com/tag/wget/": {
      "rels": [
        "tag"
      ],
      "text": "wget"
    },
    "https://phoenixtrap.com/tag/when/": {
      "rels": [
        "tag"
      ],
      "text": "when"
    },
    "https://phoenixtrap.com/tag/xml/": {
      "rels": [
        "tag"
      ],
      "text": "XML"
    },
    "https://phoenixtrap.com/tag/xs/": {
      "rels": [
        "tag"
      ],
      "text": "XS"
    },
    "https://phoenixtrap.com/tag/xsparsekeyword/": {
      "rels": [
        "tag"
      ],
      "text": "XS::Parse::Keyword"
    },
    "https://phoenixtrap.com/tag/yada-yada/": {
      "rels": [
        "tag"
      ],
      "text": "yada-yada"
    },
    "https://phoenixtrap.com/2021/12/14/a-brief-note-on-log4perl/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to A brief note on Log4perl",
      "text": "A brief note on Log4perl"
    },
    "https://phoenixtrap.com/tag/apple/": {
      "rels": [
        "tag"
      ],
      "text": "Apple"
    },
    "https://phoenixtrap.com/tag/aws/": {
      "rels": [
        "tag"
      ],
      "text": "AWS"
    },
    "https://phoenixtrap.com/tag/bbedit/": {
      "rels": [
        "tag"
      ],
      "text": "BBEdit"
    },
    "https://phoenixtrap.com/tag/debugging/": {
      "rels": [
        "tag"
      ],
      "text": "debugging"
    },
    "https://phoenixtrap.com/tag/emacs/": {
      "rels": [
        "tag"
      ],
      "text": "Emacs"
    },
    "https://phoenixtrap.com/tag/icloud/": {
      "rels": [
        "tag"
      ],
      "text": "iCloud"
    },
    "https://phoenixtrap.com/tag/linux/": {
      "rels": [
        "tag"
      ],
      "text": "Linux"
    },
    "https://phoenixtrap.com/tag/log4j/": {
      "rels": [
        "tag"
      ],
      "text": "Log4j"
    },
    "https://phoenixtrap.com/tag/minecraft/": {
      "rels": [
        "tag"
      ],
      "text": "Minecraft"
    },
    "https://phoenixtrap.com/tag/security/": {
      "rels": [
        "tag"
      ],
      "text": "security"
    },
    "https://phoenixtrap.com/tag/vim/": {
      "rels": [
        "tag"
      ],
      "text": "Vim"
    },
    "https://phoenixtrap.com/tag/windows/": {
      "rels": [
        "tag"
      ],
      "text": "Windows"
    },
    "https://phoenixtrap.com/2021/12/07/sweeter-perl-exception-classes/": {
      "rels": [
        "bookmark"
      ],
      "title": "Permalink to Sweeter Perl exception classes",
      "text": "Sweeter Perl exception classes"
    },
    "https://phoenixtrap.com/tag/exceptionclass/": {
      "rels": [
        "tag"
      ],
      "text": "Exception::Class"
    },
    "https://phoenixtrap.com/tag/jsonmaybexs/": {
      "rels": [
        "tag"
      ],
      "text": "JSON::MaybeXS"
    },
    "https://phoenixtrap.com/tag/metaprogramming/": {
      "rels": [
        "tag"
      ],
      "text": "metaprogramming"
    },
    "https://phoenixtrap.com/tag/mocking/": {
      "rels": [
        "tag"
      ],
      "text": "mocking"
    },
    "https://phoenixtrap.com/tag/modulinos/": {
      "rels": [
        "tag"
      ],
      "text": "modulinos"
    },
    "https://phoenixtrap.com/tag/packagestash/": {
      "rels": [
        "tag"
      ],
      "text": "Package::Stash"
    },
    "https://phoenixtrap.com/tag/qa/": {
      "rels": [
        "tag"
      ],
      "text": "QA"
    },
    "https://phoenixtrap.com/tag/quality/": {
      "rels": [
        "tag"
      ],
      "text": "quality"
    },
    "https://phoenixtrap.com/tag/roles/": {
      "rels": [
        "tag"
      ],
      "text": "roles"
    },
    "https://phoenixtrap.com/tag/throwable/": {
      "rels": [
        "tag"
      ],
      "text": "Throwable"
    },
    "https://phoenixtrap.com/tag/throwablefactory/": {
      "rels": [
        "tag"
      ],
      "text": "Throwable::Factory"
    },
    "https://phoenixtrap.com/tag/throwablesugarfactory/": {
      "rels": [
        "tag"
      ],
      "text": "Throwable::SugarFactory"
    },
    "https://phoenixtrap.com/tag/web-services/": {
      "rels": [
        "tag"
      ],
      "text": "web services"
    },
    "https://phoenixtrap.com/tag/webservicefoaas/": {
      "rels": [
        "tag"
      ],
      "text": "WebService::FOAAS"
    },
    "https://phoenixtrap.com/cdn-cgi/l/email-protection#721f181532021a1d171c1b0a060013025c111d1f": {
      "rels": [
        "me"
      ],
      "text": "[email protected]"
    },
    "https://www.instagram.com/p/CkmuRiQMZjs/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CkiASwROrvs/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CkbXo2lOPBw/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CkQrtXxDXmM/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CkEC_nvJukx/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/Cj3DGhXOPKF/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CjYfuBLOVw1/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CjRnlfOOVc9/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://www.instagram.com/p/CjIjkhIOaoK/": {
      "rels": [
        "noopener",
        "noreferrer"
      ]
    },
    "https://wordpress.org/": {
      "rels": [
        "generator"
      ],
      "text": "WordPress"
    },
    "https://phoenixtrap.com/wp-content/plugins/jetpack/_inc/blocks/instagram-gallery/view.css?minify=false&ver=11.5.1": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    },
    "https://phoenixtrap.com/wp-content/plugins/jetpack/_inc/blocks/subscriptions/view.css?minify=false&ver=11.5.1": {
      "rels": [
        "stylesheet"
      ],
      "media": "all",
      "type": "text/css"
    }
  }
}