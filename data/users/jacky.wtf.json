{
  "items": [
    {
      "type": [
        "h-card"
      ],
      "properties": {
        "tz": [
          "-0500"
        ],
        "photo": [
          {
            "value": "https://jacky.wtf/assets/favicon.2fb16a8e.svg",
            "alt": ""
          }
        ]
      },
      "id": "hCard"
    },
    {
      "type": [
        "h-feed"
      ],
      "properties": {
        "name": [
          "Essays"
        ],
        "url": [
          "https://jacky.wtf/archive/article"
        ],
        "note": [
          {
            "html": "A few <a href=\"https://indieweb.org/article\">articles</a> that I've\n          written most recently.",
            "value": "A few articles that I've\n          written most recently."
          }
        ]
      },
      "id": "essays",
      "children": [
        {
          "type": [
            "h-cite"
          ],
          "properties": {
            "name": [
              "Things to Do to Celebrate my 29th"
            ],
            "url": [
              "https://jacky.wtf/2022/7/jGyU"
            ]
          }
        },
        {
          "type": [
            "h-cite"
          ],
          "properties": {
            "name": [
              "A Web that Reflects People and their Values"
            ],
            "url": [
              "https://jacky.wtf/2022/6/Cpq0"
            ]
          }
        },
        {
          "type": [
            "h-cite"
          ],
          "properties": {
            "name": [
              "Implementing Property Searching for Micropub"
            ],
            "url": [
              "https://jacky.wtf/2022/6/fDu9"
            ]
          }
        },
        {
          "type": [
            "h-cite"
          ],
          "properties": {
            "name": [
              "Thoughts on BlueSky's \"Self Authenticating Social\" Protocol"
            ],
            "url": [
              "https://jacky.wtf/thoughts-bluesky-social-protocol"
            ]
          }
        },
        {
          "type": [
            "h-cite"
          ],
          "properties": {
            "name": [
              "HWCs: Glad I Went!"
            ],
            "url": [
              "https://jacky.wtf/2022/3/oo/ooK1B0udp16W9yQp2BHBhyz5"
            ]
          }
        }
      ]
    },
    {
      "type": [
        "h-feed"
      ],
      "properties": {
        "name": [
          "Links"
        ],
        "note": [
          {
            "html": "Here lies the things I've liked, bookmarked or interacted with across\n          the Web (and beyond). Some people call them\n          <a href=\"https://indieweb.org/reactions\">reactions</a> or\n          <a href=\"https://indieweb.org/replies\">replies</a> - I consider them\n          my feedback back to the Web from my site.",
            "value": "Here lies the things I've liked, bookmarked or interacted with across\n          the Web (and beyond). Some people call them\n          reactions or\n          replies - I consider them\n          my feedback back to the Web from my site."
          }
        ]
      },
      "id": "linklog",
      "children": [
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "like-of": [
              {
                "type": [
                  "h-cite",
                  "h-entry"
                ],
                "properties": {
                  "name": [
                    "OAuth Support in Bluesky and AT Protocol"
                  ],
                  "content": [
                    {
                      "html": "<p><a href=\"https://blueskyweb.xyz/\">Bluesky</a>, a new social media platform and <a href=\"https://atproto.com/\">AT Protocol</a>, is unsurprisingly running up against the same challenges and limitations that Flickr, Twitter and many other social media platforms faced in the 2000s: passwords!</p>\n<br><br><p><img src=\"https://aaronparecki.com/2023/03/09/5/yelp-gmail-password.png\" width=\"100%\" alt=\"yelp asks you to enter your gmail password\"></p>\n<br><br><p>You wouldn't give your Gmail password to Yelp, right? Why should you give your Bluesky password to random apps either!</p>\n<br><br><p>The current official Bluesky iOS application unsurprisingly works by logging in with a username and password. It's the easiest form of authentication to implement, even if it is the least secure. Since Bluesky and the AT Protocol are actually intending on creating an entire ecosystem of servers and clients, this is inevitably going to lead to a complete security disaster. In fact, we're already seeing people spin up prototype Bluesky clients, sharing links around to them, which result in users being taught that there's nothing wrong with handing out their account passwords to random website and applications that ask for them. Clearly there has to be a solution, right?</p>\n<br><br><p>The good news is there has been a solution that has existed for about 15 years -- OAuth! This is exactly the problem that OAuth was created to solve. How do we let third party applications access data in a web service without sharing the password with that application.</p>\n<br><br><p>What's novel about Bluesky (and other similarly decentralized and open services like WordPress, Mastodon, Micro.blog, and others), is that there is an expectation that any user should be able to bring any client to any server, without prior relationships between client developers and servers. This is in contrast to consumer services like Twitter and Google, where they limit which developers can access their API by going through a developer registration process. I wrote more about this problem in a previous blog post, <a href=\"https://aaronparecki.com/2018/07/07/7/oauth-for-the-open-web\">OAuth for the Open Web</a>.</p>\n<br><br><p>There are two separate problems that Bluesky can solve with <a href=\"https://oauth.net/\">OAuth</a>, especially a flavor of OAuth like <a href=\"https://indieauth.net/\">IndieAuth</a>.</p>\n<br><br><ol>\n<br><li>How apps can access data in the user's Personal Data Server (PDS)</li>\n<br><li>How the user logs in to their PDS</li>\n<br>\n</ol>\n<br><br><h2>How apps can access the user's data</h2>\n<br><br><p>This is the problem OAuth solved when it was originally created, and the problem ATProto currently has. It's obviously very unsafe to have users give their PDS password to every third party application that's created, especially since the ecosystem is totally open so there's no way for a user to know how legitimate a particular application is. OAuth solves this by having the application redirect to the OAuth server, the user logs in there, and then the application gets only an access token.</p>\n<br><br><p>ATProto already uses <a href=\"https://atproto.com/lexicons/com-atproto-session\">access tokens and refresh tokens</a>, (although they strangely call them <code>accessJwt</code> and <code>refreshJwt</code>) so this is a small leap to make. OAuth support in mobile apps has gotten a lot better than it was 10 years ago, and there is first class support for this pattern on iOS and Android to make the experience work better than the much older plain redirect model used to work a decade ago.</p>\n<br><br><p>Here is what the rough experience the user would see when logging in to an app:</p>\n<br><br><p><img width=\"100%\" alt=\"app login flow\" src=\"https://aaronparecki.com/2023/03/09/5/224077657-13d3f1fc-61a8-4eb6-a1e1-c3a5bd7a7b69.png\"></p>\n<br><br><ol>\n<br><li>The user launches the app and taps the \"Sign In\" button</li>\n<br><li>The user enters their handle or server name (e.g. <code>jay.bsky.social</code>, <code>bsky.social</code>, or <code>aaronpk.com</code>)</li>\n<br><li>The app discovers the user's OAuth server, and launches an in-app browser</li>\n<br><li>The user lands on their own PDS server, and logs in there (however they log in is not relevant to the app, it could be with a password, via email magic link, a passkey, or even delegated login to another provider)</li>\n<br><li>The user is presented with a dialog asking if they want to grant access to this app (this step is optional, but it's up to the OAuth server whether to do this and what it looks like)</li>\n<br><li>The application receives the authorization code and exchanges it at the PDS for an access token and refresh token</li>\n<br>\n</ol>\n<br><br><p><br></p>\n<br><br><p>Most of this is defined in the core OAuth specifications. The part that's missing from OAuth is:</p>\n<br><br><ul>\n<br><li>discovering an OAuth server given a server name</li>\n<br><li>and how clients should be identified when there is no client preregistration step.</li>\n<br>\n</ul>\n<br><br><p>That's where <a href=\"https://indieauth.net/\">IndieAuth</a> fills this in. With IndieAuth, the user's authorization server is discovered by fetching the web page at their URL. IndieAuth avoids the need for client registration by also using URLs as OAuth <code>client_id</code>s.</p>\n<br><br><p>This does mean IndieAuth assumes there is an HTML document hosted at the URL the user enters, which works well for web based solutions, and might even work well for Bluesky given the number of people who have already rushed to set their Bluesky handle to the same URL as their personal website. But, long term it might be an additional burden for people who want to bring their own domain to Bluesky if they aren't also hosting a website there.</p>\n<br><br><p>There's a new discussion happening in the OAuth working group to enable this kind of authorization server discovery from a URL which could rely on DNS or a well-known endpoint. This is in-progress work at the IETF, and I would love to have ATProto/Bluesky involved in those discussions!</p>\n<br><br><h2>How the user logs in to their PDS</h2>\n<br><br><p>Currently, the AT Protocol specifies that login happens with a username and password to get the tokens the app needs. Once clients start using OAuth to log in to apps, this method can be dropped from the specification, which interestingly opens up a lot of new possibilities.</p>\n<br><br><p>Passwords are inherently insecure, and there has been a multi-year effort to improve the security of every online service by adding two-factor authentication and even moving away from passwords entirely by using <a href=\"https://oauth.net/passkeys/\">passkeys</a> instead.</p>\n<br><br><p>Imagine today, Bluesky wants to add multifactor authenticaiton to their current service. There's no good way to add this to the existing API, since the Bluesky client will send the password to the API and expect an access token immediately. If Bluesky switches to an OAuth flow described above, then the app never sees the password, which means the Bluesky server can start doing more fun things with multifactor auth as well as even passwordless flows!</p>\n<br><br><h3>Logging in with a passkey</h3>\n<br><br><p>Here is the same sequence of steps but this time swapping out the password step for a passkey.</p>\n<br><br><p><img width=\"100%\" alt=\"app login flow with passkey\" src=\"https://aaronparecki.com/2023/03/09/5/passkey-flow.png\"></p>\n<br><br><ol>\n<br><li>The user launches the app and taps the \"Sign In\" button</li>\n<br><li>The user enters their handle or server name (e.g. <code>jay.bsky.social</code>, <code>bsky.social</code>, or <code>aaronpk.com</code>)</li>\n<br><li>The app discovers the user's OAuth server, and launches an in-app browser</li>\n<br><li>The user lands on their own PDS server, and logs in there with a passkey</li>\n<br><li>The user is presented with a dialog asking if they want to grant access to this app (this step is optional, but it's up to the OAuth server whether to do this and what it looks like)</li>\n<br><li>The application receives the authorization code and exchanges it at the PDS for an access token and refresh token</li>\n<br>\n</ol>\n<br><br><p>This is already a great improvement, and the nice thing is app developers don't need to worry about implementing passkeys, they just need to implement OAuth! The user's PDS implements passkeys and abstracts that away by providing the OAuth API instead.</p>\n<br><br><h3>Logging in with IndieAuth</h3>\n<br><br><p>Another variation of this would be if the Bluesky service itself supported delegating logins instead of managing any passwords or passkeys at all.</p>\n<br><br><p>Since Bluesky already supports users setting their handle to their own personal website, it's a short leap to imaging allowing users to authenticate themselves to Bluesky using their website as well!</p>\n<br><br><p>That is the exact problem IndieAuth already solves, with quite a few implementations in the wild of services that are IndieAuth providers, including <a href=\"https://micro.blog/\">Micro.blog</a>, a <a href=\"https://wordpress.org/plugins/indieauth/\">WordPress plugin</a>, a <a href=\"https://drupal.org/project/indieweb\">Drupal module</a>, and many options for <a href=\"https://indieweb.org/IndieAuth#Server_Implementations\">self-hosting</a> and endpoint.</p>\n<br><br><p>Let's look at what the sequence would look like for a user to use the bsky.social PDS with their custom domain handle mapped to it.</p>\n<br><br><p><img width=\"100%\" alt=\"app login flow with indieauth\" src=\"https://aaronparecki.com/2023/03/09/5/bsky-sso.png\"></p>\n<br><br><ol>\n<br><li>The user launches the app and taps the \"Sign In\" button</li>\n<br><li>The user enters their server name (e.g. <code>bsky.social</code>)</li>\n<br><li>The app discovers the OAuth server and launches an in-app browser</li>\n<br><li>The user enters their handle, and bsky.social determines whether to prompt for a password or do an IndieAuth flow to their server</li>\n<br><li>The user is redirected to their own website (IndieAuth server) and authenticates there, and is then redirected back to bsky.social</li>\n<br><li>The user is presented by bsky.social with a dialog asking if they want to grant access to this app</li>\n<br><li>The application receives the authorization code and exchanges it at the PDS for an access token and refresh token</li>\n<br>\n</ol>\n<br><br><p>This is very similar to the previous flows, the difference being that in this version, bsky.social is the OAuth server as far as the app is concerned. The app never sees the user's actual IndieAuth server at all.</p>\n<br><br><h3>Further Work</h3>\n<br><br><p>These are some ideas to kick off the discussion of improving the security of Bluesky and the AT Protocol. Let me know if you have any thoughts on this! There is of course a lot more detail to discuss about the specifics, so if you're interested in diving in, a good place to start is reading up on <a href=\"https://oauth.net/\">OAuth</a> as well as the <a href=\"https://indieauth.net/\">IndieAuth</a> extension to OAuth which has solved some of the problems that exist in the space.</p>\n<br><br><p>You can reply to this post by sending a <a href=\"https://webmention.net/\">Webmention</a> from your own website, or you can get in touch with me via <a href=\"https://aaronparecki.com/@aaronpk\">Mastodon</a> or, of course, find me on Bluesky as <code>@aaronpk.com</code>!</p>",
                      "value": "Bluesky, a new social media platform and AT Protocol, is unsurprisingly running up against the same challenges and limitations that Flickr, Twitter and many other social media platforms faced in the 2000s: passwords! yelp asks you to enter your gmail password You wouldn't give your Gmail password to Yelp, right? Why should you give your Bluesky password to random apps either!The current official Bluesky iOS application unsurprisingly works by logging in with a username and password. It's the easiest form of authentication to implement, even if it is the least secure. Since Bluesky and the AT Protocol are actually intending on creating an entire ecosystem of servers and clients, this is inevitably going to lead to a complete security disaster. In fact, we're already seeing people spin up prototype Bluesky clients, sharing links around to them, which result in users being taught that there's nothing wrong with handing out their account passwords to random website and applications that ask for them. Clearly there has to be a solution, right?The good news is there has been a solution that has existed for about 15 years -- OAuth! This is exactly the problem that OAuth was created to solve. How do we let third party applications access data in a web service without sharing the password with that application.What's novel about Bluesky (and other similarly decentralized and open services like WordPress, Mastodon, Micro.blog, and others), is that there is an expectation that any user should be able to bring any client to any server, without prior relationships between client developers and servers. This is in contrast to consumer services like Twitter and Google, where they limit which developers can access their API by going through a developer registration process. I wrote more about this problem in a previous blog post, OAuth for the Open Web.There are two separate problems that Bluesky can solve with OAuth, especially a flavor of OAuth like IndieAuth.How apps can access data in the user's Personal Data Server (PDS)How the user logs in to their PDSHow apps can access the user's dataThis is the problem OAuth solved when it was originally created, and the problem ATProto currently has. It's obviously very unsafe to have users give their PDS password to every third party application that's created, especially since the ecosystem is totally open so there's no way for a user to know how legitimate a particular application is. OAuth solves this by having the application redirect to the OAuth server, the user logs in there, and then the application gets only an access token.ATProto already uses access tokens and refresh tokens, (although they strangely call them accessJwt and refreshJwt) so this is a small leap to make. OAuth support in mobile apps has gotten a lot better than it was 10 years ago, and there is first class support for this pattern on iOS and Android to make the experience work better than the much older plain redirect model used to work a decade ago.Here is what the rough experience the user would see when logging in to an app: app login flow The user launches the app and taps the \"Sign In\" buttonThe user enters their handle or server name (e.g. jay.bsky.social, bsky.social, or aaronpk.com)The app discovers the user's OAuth server, and launches an in-app browserThe user lands on their own PDS server, and logs in there (however they log in is not relevant to the app, it could be with a password, via email magic link, a passkey, or even delegated login to another provider)The user is presented with a dialog asking if they want to grant access to this app (this step is optional, but it's up to the OAuth server whether to do this and what it looks like)The application receives the authorization code and exchanges it at the PDS for an access token and refresh tokenMost of this is defined in the core OAuth specifications. The part that's missing from OAuth is:discovering an OAuth server given a server nameand how clients should be identified when there is no client preregistration step.That's where IndieAuth fills this in. With IndieAuth, the user's authorization server is discovered by fetching the web page at their URL. IndieAuth avoids the need for client registration by also using URLs as OAuth client_ids.This does mean IndieAuth assumes there is an HTML document hosted at the URL the user enters, which works well for web based solutions, and might even work well for Bluesky given the number of people who have already rushed to set their Bluesky handle to the same URL as their personal website. But, long term it might be an additional burden for people who want to bring their own domain to Bluesky if they aren't also hosting a website there.There's a new discussion happening in the OAuth working group to enable this kind of authorization server discovery from a URL which could rely on DNS or a well-known endpoint. This is in-progress work at the IETF, and I would love to have ATProto/Bluesky involved in those discussions!How the user logs in to their PDSCurrently, the AT Protocol specifies that login happens with a username and password to get the tokens the app needs. Once clients start using OAuth to log in to apps, this method can be dropped from the specification, which interestingly opens up a lot of new possibilities.Passwords are inherently insecure, and there has been a multi-year effort to improve the security of every online service by adding two-factor authentication and even moving away from passwords entirely by using passkeys instead.Imagine today, Bluesky wants to add multifactor authenticaiton to their current service. There's no good way to add this to the existing API, since the Bluesky client will send the password to the API and expect an access token immediately. If Bluesky switches to an OAuth flow described above, then the app never sees the password, which means the Bluesky server can start doing more fun things with multifactor auth as well as even passwordless flows!Logging in with a passkeyHere is the same sequence of steps but this time swapping out the password step for a passkey. app login flow with passkey The user launches the app and taps the \"Sign In\" buttonThe user enters their handle or server name (e.g. jay.bsky.social, bsky.social, or aaronpk.com)The app discovers the user's OAuth server, and launches an in-app browserThe user lands on their own PDS server, and logs in there with a passkeyThe user is presented with a dialog asking if they want to grant access to this app (this step is optional, but it's up to the OAuth server whether to do this and what it looks like)The application receives the authorization code and exchanges it at the PDS for an access token and refresh tokenThis is already a great improvement, and the nice thing is app developers don't need to worry about implementing passkeys, they just need to implement OAuth! The user's PDS implements passkeys and abstracts that away by providing the OAuth API instead.Logging in with IndieAuthAnother variation of this would be if the Bluesky service itself supported delegating logins instead of managing any passwords or passkeys at all.Since Bluesky already supports users setting their handle to their own personal website, it's a short leap to imaging allowing users to authenticate themselves to Bluesky using their website as well!That is the exact problem IndieAuth already solves, with quite a few implementations in the wild of services that are IndieAuth providers, including Micro.blog, a WordPress plugin, a Drupal module, and many options for self-hosting and endpoint.Let's look at what the sequence would look like for a user to use the bsky.social PDS with their custom domain handle mapped to it. app login flow with indieauth The user launches the app and taps the \"Sign In\" buttonThe user enters their server name (e.g. bsky.social)The app discovers the OAuth server and launches an in-app browserThe user enters their handle, and bsky.social determines whether to prompt for a password or do an IndieAuth flow to their serverThe user is redirected to their own website (IndieAuth server) and authenticates there, and is then redirected back to bsky.socialThe user is presented by bsky.social with a dialog asking if they want to grant access to this appThe application receives the authorization code and exchanges it at the PDS for an access token and refresh tokenThis is very similar to the previous flows, the difference being that in this version, bsky.social is the OAuth server as far as the app is concerned. The app never sees the user's actual IndieAuth server at all.Further WorkThese are some ideas to kick off the discussion of improving the security of Bluesky and the AT Protocol. Let me know if you have any thoughts on this! There is of course a lot more detail to discuss about the specifics, so if you're interested in diving in, a good place to start is reading up on OAuth as well as the IndieAuth extension to OAuth which has solved some of the problems that exist in the space.You can reply to this post by sending a Webmention from your own website, or you can get in touch with me via Mastodon or, of course, find me on Bluesky as @aaronpk.com!"
                    }
                  ],
                  "author": [
                    {
                      "type": [
                        "h-card"
                      ],
                      "properties": {
                        "photo": [
                          {
                            "value": "https://aaronparecki.com/images/profile.jpg",
                            "alt": ""
                          }
                        ],
                        "name": [
                          "Aaron Parecki"
                        ]
                      },
                      "value": "https://aaronparecki.com/"
                    }
                  ],
                  "url": [
                    "https://aaronparecki.com/2023/03/09/5/bluesky-and-oauth"
                  ]
                },
                "value": "https://aaronparecki.com/2023/03/09/5/bluesky-and-oauth"
              }
            ],
            "url": [
              "https://jacky.wtf/2023/3/lkVK"
            ],
            "published": [
              "2023-03-10T19:34:40Z"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "like-of": [
              {
                "type": [
                  "h-cite",
                  "h-entry",
                  "h-koype-stubbed-from-ogp"
                ],
                "properties": {
                  "name": [
                    "One in, two out"
                  ],
                  "summary": [
                    "As I posted earlier, I’m half letting Twitter back in. I have a policy though: a new potentially addictive thing means another has to go. Because Twitter is even more dangerous, I’ve de…"
                  ],
                  "author": [
                    {
                      "type": [
                        "h-card"
                      ],
                      "properties": {
                        "name": [
                          "Andy Bell"
                        ]
                      },
                      "value": "Andy Bell"
                    }
                  ],
                  "url": [
                    "https://andy-bell.co.uk/one-in-two-out/"
                  ]
                },
                "value": "https://andy-bell.co.uk/one-in-two-out/"
              }
            ],
            "url": [
              "https://jacky.wtf/2023/3/PHWG"
            ],
            "published": [
              "2023-03-06T17:00:59Z"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "like-of": [
              {
                "type": [
                  "h-cite",
                  "h-entry",
                  "h-koype-stubbed-from-ogp"
                ],
                "properties": {
                  "name": [
                    "How I’m dealing with Twitter in a hands-off manner"
                  ],
                  "summary": [
                    "You might have noticed I’ve spent more time on Twitter recently. I was chatting to a new client for my agency recently and — as I always do — I asked where they found us. They said their team…"
                  ],
                  "author": [
                    {
                      "type": [
                        "h-card"
                      ],
                      "properties": {
                        "name": [
                          "Andy Bell"
                        ]
                      },
                      "value": "Andy Bell"
                    }
                  ],
                  "url": [
                    "https://andy-bell.co.uk/how-im-dealing-with-twitter-in-a-hands-off-manner/"
                  ]
                },
                "value": "https://andy-bell.co.uk/how-im-dealing-with-twitter-in-a-hands-off-manner/"
              }
            ],
            "url": [
              "https://jacky.wtf/2023/3/JMoU"
            ],
            "published": [
              "2023-03-06T17:00:09Z"
            ]
          }
        }
      ]
    },
    {
      "type": [
        "h-feed"
      ],
      "properties": {
        "name": [
          "Microblog"
        ],
        "note": [
          {
            "html": "My microblog is where I post quick notes or semi-formed posts. Things that don't quite\n          fit into what I'd consider a blog post but also would need a permalink.",
            "value": "My microblog is where I post quick notes or semi-formed posts. Things that don't quite\n          fit into what I'd consider a blog post but also would need a permalink."
          }
        ]
      },
      "id": "microblog",
      "children": [
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "in-reply-to": [
              {
                "type": [
                  "h-cite",
                  "h-entry",
                  "h-koype-stubbed-from-ogp"
                ],
                "properties": {
                  "name": [
                    "emily :verified_gay: (@est@emily.news)"
                  ],
                  "summary": [
                    "@jalcine@todon.eu Nintendo brought the entire gaming industry back from the brink in 1985 by exerting large amounts of control over their gaming systems, so it’s a winning strategy for them. Every company that puts out a product faces this tension between control and openness.(The 1983 video game crash was in part due to enormous numbers of shitty games flooding the market, and Nintendo’s response to this was to implement NES cartridges with 10NES lockout chips so that only licensees could make games. They haven’t changed much since.)"
                  ],
                  "author": [
                    {
                      "type": [
                        "h-card"
                      ],
                      "properties": {
                        "name": [
                          "social.emily.news"
                        ]
                      },
                      "value": "social.emily.news"
                    }
                  ],
                  "url": [
                    "https://social.emily.news/@est/110001953904621179"
                  ]
                },
                "value": "https://social.emily.news/@est/110001953904621179"
              }
            ],
            "content": [
              {
                "html": "<p>I've heard a little bit about this crash from random documentary about video games, but this is such an anti-consumer response (imo) from Nintendo (nor was <em>this</em> covered). Wow!</p>",
                "value": "I've heard a little bit about this crash from random documentary about video games, but this is such an anti-consumer response (imo) from Nintendo (nor was this covered). Wow!"
              }
            ],
            "url": [
              "https://jacky.wtf/2023/3/G6hh"
            ],
            "published": [
              "2023-03-11T18:18:58Z"
            ],
            "syndication": [
              "https://todon.eu/@jalcine/110006026748173015"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "in-reply-to": [
              {
                "type": [
                  "h-cite",
                  "h-entry",
                  "h-koype-stubbed-from-ogp"
                ],
                "properties": {
                  "name": [
                    "jubilee (@jubilee@treehouse.systems)"
                  ],
                  "summary": [
                    "@jalcine@todon.eu the nice thing about Nintendo is how easy to emulate their consoles are since they keep using Arm chips for them."
                  ],
                  "author": [
                    {
                      "type": [
                        "h-card"
                      ],
                      "properties": {
                        "name": [
                          "Treehouse Mastodon"
                        ]
                      },
                      "value": "Treehouse Mastodon"
                    }
                  ],
                  "url": [
                    "https://social.treehouse.systems/@jubilee/110001954382622151"
                  ]
                },
                "value": "https://social.treehouse.systems/@jubilee/110001954382622151"
              }
            ],
            "content": [
              {
                "html": "<p>Oooh, TIL! And that does indirectly explain their want to make it hard to get the needed firmware/software to be emulated.</p>",
                "value": "Oooh, TIL! And that does indirectly explain their want to make it hard to get the needed firmware/software to be emulated."
              }
            ],
            "url": [
              "https://jacky.wtf/2023/3/Ov5Z"
            ],
            "published": [
              "2023-03-11T18:18:09Z"
            ],
            "syndication": [
              "https://todon.eu/@jalcine/110006022968156445"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "content": [
              {
                "html": "<p>If we had something like <a href=\"https://en.wikipedia.org/wiki/Communism_in_Kerala\">https://en.wikipedia.org/wiki/Communism_in_Kerala</a> happening in the United States (where the \"two sides\" is one that leans into actual forms of democracy and another into healthy communism) from the 1920s, so many peoples' lives would have been better off. So many wars could have been avoided.</p>",
                "value": "If we had something like https://en.wikipedia.org/wiki/Communism_in_Kerala happening in the United States (where the \"two sides\" is one that leans into actual forms of democracy and another into healthy communism) from the 1920s, so many peoples' lives would have been better off. So many wars could have been avoided."
              }
            ],
            "url": [
              "https://jacky.wtf/2023/3/1S8n"
            ],
            "published": [
              "2023-03-11T18:17:27Z"
            ]
          }
        }
      ]
    }
  ],
  "rels": {
    "authorization_endpoint": [
      "https://a.jacky.wtf/api/indieauth/authorization"
    ],
    "hub": [
      "https://pubsubhubbub.appspot.com/"
    ],
    "micropub": [
      "https://mp.jacky.wtf/mp"
    ],
    "microsub": [
      "https://aperture.p3k.io/microsub/126"
    ],
    "ticket_endpoint": [
      "https://a.jacky.wtf/api/indieauth/ticket"
    ],
    "token_endpoint": [
      "https://a.jacky.wtf/api/indieauth/token"
    ],
    "webmention": [
      "https://webmention.io/jacky.wtf/webmention"
    ],
    "bookmark": [
      "https://jacky.wtf/?"
    ],
    "canonical": [
      "https://jacky.wtf/?"
    ],
    "alternate": [
      "https://jacky.wtf/feed.xml",
      "https://granary.io/url?url=https://jacky.wtf/channel/all/&input=html&output=atom&hub=https://bridgy-fed.superfeedr.com/"
    ],
    "dns-prefetch": [
      "https://unpkg.com/",
      "https://plausible.io/",
      "https://webring.xxiivv.com/"
    ],
    "preconnect": [
      "https://unpkg.com/",
      "https://plausible.io/"
    ],
    "key": [
      "https://jacky.wtf/misc/pgp.pub.asc",
      "https://jacky.wtf/misc/ssh.pub"
    ],
    "pgpkey": [
      "https://jacky.wtf/misc/pgp.pub.asc"
    ],
    "ssh": [
      "https://jacky.wtf/misc/ssh.pub"
    ],
    "modulepreload": [
      "https://jacky.wtf/assets/modulepreload-polyfill.6874861d.js",
      "https://jacky.wtf/assets/vendor.648808aa.js"
    ],
    "stylesheet": [
      "https://jacky.wtf/assets/main.a01452ff.css"
    ],
    "manifest": [
      "https://jacky.wtf/assets/manifest.webmanifest"
    ],
    "author": [
      "https://jacky.wtf/about"
    ],
    "me": [
      "https://jacky.wtf/about"
    ],
    "feed": [
      "https://jacky.wtf/channel/all",
      "https://jacky.wtf/channel/chnl_5pvvrZof",
      "https://jacky.wtf/channel/chnl_JXmJLB7G",
      "https://jacky.wtf/feeds",
      "https://jacky.wtf/#linklog",
      "https://jacky.wtf/#microblog"
    ],
    "license": [
      "https://jacky.wtf/copyright"
    ]
  },
  "rel-urls": {
    "https://a.jacky.wtf/api/indieauth/authorization": {
      "rels": [
        "authorization_endpoint"
      ]
    },
    "https://pubsubhubbub.appspot.com/": {
      "rels": [
        "hub"
      ]
    },
    "https://mp.jacky.wtf/mp": {
      "rels": [
        "micropub"
      ]
    },
    "https://aperture.p3k.io/microsub/126": {
      "rels": [
        "microsub"
      ]
    },
    "https://a.jacky.wtf/api/indieauth/ticket": {
      "rels": [
        "ticket_endpoint"
      ]
    },
    "https://a.jacky.wtf/api/indieauth/token": {
      "rels": [
        "token_endpoint"
      ]
    },
    "https://webmention.io/jacky.wtf/webmention": {
      "rels": [
        "webmention"
      ]
    },
    "https://jacky.wtf/?": {
      "rels": [
        "bookmark",
        "canonical"
      ]
    },
    "https://jacky.wtf/feed.xml": {
      "rels": [
        "alternate"
      ],
      "title": "Jacky Alciné's updates",
      "type": "text/atom+xml"
    },
    "https://unpkg.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://plausible.io/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://webring.xxiivv.com/": {
      "rels": [
        "dns-prefetch"
      ]
    },
    "https://jacky.wtf/misc/pgp.pub.asc": {
      "rels": [
        "key",
        "pgpkey"
      ],
      "type": "application/pgp-signature"
    },
    "https://jacky.wtf/misc/ssh.pub": {
      "rels": [
        "key",
        "ssh"
      ],
      "type": "text/plain"
    },
    "https://granary.io/url?url=https://jacky.wtf/channel/all/&input=html&output=atom&hub=https://bridgy-fed.superfeedr.com/": {
      "rels": [
        "alternate"
      ],
      "title": "Everything I Post - Jacky Alciné",
      "type": "application/atom+xml"
    },
    "https://jacky.wtf/assets/modulepreload-polyfill.6874861d.js": {
      "rels": [
        "modulepreload"
      ]
    },
    "https://jacky.wtf/assets/vendor.648808aa.js": {
      "rels": [
        "modulepreload"
      ]
    },
    "https://jacky.wtf/assets/main.a01452ff.css": {
      "rels": [
        "stylesheet"
      ]
    },
    "https://jacky.wtf/assets/manifest.webmanifest": {
      "rels": [
        "manifest"
      ]
    },
    "https://jacky.wtf/about": {
      "rels": [
        "author",
        "me"
      ],
      "title": "Jacky Alciné"
    },
    "https://jacky.wtf/channel/all": {
      "rels": [
        "feed"
      ],
      "type": "text/html",
      "text": "Everything"
    },
    "https://jacky.wtf/channel/chnl_5pvvrZof": {
      "rels": [
        "feed"
      ],
      "type": "text/html",
      "text": "TIL"
    },
    "https://jacky.wtf/channel/chnl_JXmJLB7G": {
      "rels": [
        "feed"
      ],
      "type": "text/html",
      "text": "Books"
    },
    "https://jacky.wtf/feeds": {
      "rels": [
        "feed"
      ],
      "type": "text/html",
      "text": "Archive"
    },
    "https://jacky.wtf/#linklog": {
      "rels": [
        "feed"
      ],
      "text": "Links"
    },
    "https://jacky.wtf/#microblog": {
      "rels": [
        "feed"
      ],
      "text": "Microblog"
    },
    "https://jacky.wtf/copyright": {
      "rels": [
        "license"
      ],
      "text": "licensed by Jacky Alciné for some use cases"
    }
  }
}