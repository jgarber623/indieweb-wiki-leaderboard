{
  "items": [
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "url": [
          "Evgeny Kuznetsov"
        ],
        "name": [
          "Evgeny Kuznetsov"
        ],
        "entry": [
          {
            "html": "<blockquote>\n<p>To accomodate a complex layout like this, <code>webmention.io-backup</code> would have to parse the config file and look up the <code>date</code> field in all the content files' front matter to figure out which directory corresponds to which website page (basically, the way Hugo does it when it creates the pages in the first place). Programming all this is not impossible, of course, but it would be quite an endeavor that I‚Äôm not sure I want to embark on, especially considering the fact that one‚Äôs <code>config.toml</code> may contain something along the lines of</p>\n<pre><code><span>[</span><span>frontmatter</span><span>]</span>\n  <span>date</span> <span>=</span> <span>[</span><span>':git'</span><span>,</span> <span>'lastmod'</span><span>]</span>\n</code></pre>\n<p>I don‚Äôt want to open that can of worms!</p>\n<blockquote>\n<p>These ‚Äòmentions‚Äô on my side aren‚Äôt being threaded back to the original post.</p>\n</blockquote>\n<p>Beware, this is <a href=\"https://indieweb.org/Salmention\">Salmention</a> territory you‚Äôre stepping into. There be dragons.</p>\n</blockquote>",
            "value": "To accomodate a complex layout like this, webmention.io-backup would have to parse the config file and look up the date field in all the content files' front matter to figure out which directory corresponds to which website page (basically, the way Hugo does it when it creates the pages in the first place). Programming all this is not impossible, of course, but it would be quite an endeavor that I‚Äôm not sure I want to embark on, especially considering the fact that one‚Äôs config.toml may contain something along the lines of\n[frontmatter]\n  date = [':git', 'lastmod']\nI don‚Äôt want to open that can of worms!\n\nThese ‚Äòmentions‚Äô on my side aren‚Äôt being threaded back to the original post.\n\nBeware, this is Salmention territory you‚Äôre stepping into. There be dragons."
          }
        ]
      }
    },
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "url": [
          "Evgeny Kuznetsov"
        ],
        "name": [
          "Evgeny Kuznetsov"
        ],
        "entry": [
          {
            "html": "<blockquote>\n<p>I see.</p>\n<p>The reason <code>webmention.io-backup</code> is failing to correctly work your directory structure is that it expects the directory structure to mirror the URL path, that is, it expects <code>petersmith.org/blog/2022/01/10/third-steps-to-indieweb/</code> to reside in <code>content/blog/2022/01/10/third-steps-to-indieweb/</code>. In your setup, that directory doesn‚Äôt exist; instead, <code>content/blog/20220110-third-steps-to-indieweb</code> is used. I suppose, you are using <code>permalinks</code> <a href=\"https://gohugo.io/content-management/urls/\">config option</a> to achieve that? If so, that‚Äôs quite a problem, because in this case <code>webmention.io-backup</code> can not really infer the directory name, since the URL is formed based on the <code>date</code> parameter and not based on the first 8 digits of the directory name, right?</p>\n<p>I mean, I can make a patch for <code>webmention.io-backup</code> to work on your directory structure, it‚Äôs fairly trivial. But I‚Äôd be reluctant to incorporate it in the main branch, because it wouldn‚Äôt be flexible at all.</p>\n</blockquote>",
            "value": "I see.\nThe reason webmention.io-backup is failing to correctly work your directory structure is that it expects the directory structure to mirror the URL path, that is, it expects petersmith.org/blog/2022/01/10/third-steps-to-indieweb/ to reside in content/blog/2022/01/10/third-steps-to-indieweb/. In your setup, that directory doesn‚Äôt exist; instead, content/blog/20220110-third-steps-to-indieweb is used. I suppose, you are using permalinks config option to achieve that? If so, that‚Äôs quite a problem, because in this case webmention.io-backup can not really infer the directory name, since the URL is formed based on the date parameter and not based on the first 8 digits of the directory name, right?\nI mean, I can make a patch for webmention.io-backup to work on your directory structure, it‚Äôs fairly trivial. But I‚Äôd be reluctant to incorporate it in the main branch, because it wouldn‚Äôt be flexible at all."
          }
        ]
      }
    },
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "url": [
          ""
        ],
        "name": [
          ""
        ],
        "entry": [
          {
            "html": "<blockquote><p class=\"blockquote\">...After <a href=\"https://petersmith.org/blog/2021/10/07/first-steps-to-indieweb/\">my first steps to IndieWeb</a>, I got a really helpful message from <a href=\"https://robbinespu.gitlab.io/\">Robbi Nespu</a>. Alas, I've not (yet) got webmentions working in any real way, and the page he commented on had a broken URL (all my problems, not Robbi's). </p></blockquote>",
            "value": "...After my first steps to IndieWeb, I got a really helpful message from Robbi Nespu. Alas, I've not (yet) got webmentions working in any real way, and the page he commented on had a broken URL (all my problems, not Robbi's)."
          }
        ]
      }
    },
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "url": [
          "Robbi Nespu"
        ],
        "name": [
          "Robbi Nespu"
        ],
        "entry": [
          {
            "html": "<blockquote>\n<p>Hello Peter Smith, How going? I also using Hugo, the getting webmention response working is easier if using a javascript called as\n<a href=\"https://github.com/PlaidWeb/webmention.js/\">\nPlaidWeb/webmention.js\n</a>\n. Some tips from my experience :</p>\n<ul>\n<li>Setup the <code>h-card</code> because it important and needed for indieAuth (to use some external services such as\n<a href=\"https://webmention.io/\">\nhttps://webmention.io\n</a>\n)</li>\n<li>You may use\n<a href=\"https://xray.p3k.io/\">\nhttps://xray.p3k.io\n</a>\nto inspect if the HTML are parse correctly, you can submit the URL or just paste the raw HTML (even with <code>localhost</code> / <code>127.0.0.1</code> addressed inside the source code, it working very well). It save my time during debugging.</li>\n<li>I also use\n<a href=\"https://telegraph.p3k.io/\">\nhttps://telegraph.p3k.io\n</a>\nto preview (check) if all link inside <code>h-entry</code> support webmention. You also can manually send webmention by give a source and target from there.</li>\n<li>Lastly, validate published web using\n<a href=\"https://indiewebify.me/\">\nhttps://indiewebify.me/\n</a>\nget your website until level 3.</li>\n</ul>\n<p>Hope this helpful üòÄ</p>\n</blockquote>",
            "value": "Hello Peter Smith, How going? I also using Hugo, the getting webmention response working is easier if using a javascript called as\n\nPlaidWeb/webmention.js\n\n. Some tips from my experience :\nSetup the h-card because it important and needed for indieAuth (to use some external services such as\n\nhttps://webmention.io\n\n)\nYou may use\n\nhttps://xray.p3k.io\n\nto inspect if the HTML are parse correctly, you can submit the URL or just paste the raw HTML (even with localhost / 127.0.0.1 addressed inside the source code, it working very well). It save my time during debugging.\nI also use\n\nhttps://telegraph.p3k.io\n\nto preview (check) if all link inside h-entry support webmention. You also can manually send webmention by give a source and target from there.\nLastly, validate published web using\n\nhttps://indiewebify.me/\n\nget your website until level 3.\nHope this helpful üòÄ"
          }
        ]
      }
    },
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "url": [
          "robbinespu Ó®Ä"
        ],
        "name": [
          "robbinespu Ó®Ä"
        ],
        "entry": [
          {
            "html": "<blockquote><p class=\"blockquote\">...üìù New post:  ‚Ü©Ô∏è Reply to: <a href=\"https://petersmith.org/webmentions/likes/2022/like-202220221213-124654/\">petersmith.org/webmentions/li‚Ä¶</a> -  ‚û°Ô∏è <a href=\"https://journal.robbi.my/posts/221218071647/\">journal.robbi.my/posts/22121807‚Ä¶</a></p></blockquote>",
            "value": "...üìù New post:  ‚Ü©Ô∏è Reply to: petersmith.org/webmentions/li‚Ä¶ -  ‚û°Ô∏è journal.robbi.my/posts/22121807‚Ä¶"
          }
        ]
      }
    },
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "url": [
          "Robbi Nespu"
        ],
        "name": [
          "Robbi Nespu"
        ],
        "entry": [
          {
            "html": "<blockquote>\n<p>Previously, I always send my URL to the Wayback Machine to archive it. But now, I have a better way to do it. I use the\n<a href=\"https://docs.gitlab.com/ee/ci/\">Gitlab CI/CD</a>\nservice to send my URL to the Wayback Machine. It is a free service and it is very easy to use. I just need to add a few lines of code to my Hugo build script.</p>\n<p>Here is an example:</p>\n<p>First, I need to add some python script called\n<a href=\"https://journal.robbi.my/posts/221218071647/\">archivenow</a>\nduring build stage.</p>\n<pre style=\"color:#f8f8f2;background-color:#272822;\"><code><span><span>pages:\n</span></span><span><span>  stage: deploy\n</span></span><span><span>  script:\n</span></span><span><span>    - hugo --verbose --minify --enableGitInfo\n</span></span><span><span>    - git clone git@github.com:oduwsdl/archivenow.git\n</span></span><span><span>    - cd archivenow\n</span></span><span><span>    - pip install -r requirements.txt\n</span></span><span><span>    - pip install ./\n</span></span><span><span>    - cd ..\n</span></span><span><span>    - ./submit10url2backway.sh\n</span></span><span><span>    - echo <span style=\"color:#e6db74;\">'Build is complete and feed submited to web archieved..!!!'</span>\n</span></span></code></pre>\n<p>Then, I need to add ‚Äú<strong>submit10url2backway</strong>‚Äù script to send my URL to the Wayback Machine. Here is the script:</p>\n<pre style=\"color:#f8f8f2;background-color:#272822;\"><code><span><span><span style=\"color:#75715e;\">#!/usr/bin/env bash\n</span></span></span><span><span><span style=\"color:#75715e;\"></span><span style=\"color:#75715e;\"># Copyright Robbi Nespu &lt;contact@robbi.my&gt; , 2022</span>\n</span></span><span><span><span style=\"color:#75715e;\"># License: MIT</span>\n</span></span><span><span>\n</span></span><span><span><span style=\"color:#75715e;\"># This script is used to archive my website to the Internet Archive.</span>\n</span></span><span><span>\n</span></span><span><span><span style=\"color:#75715e;\"># Fetch RSS and read the first 10 URLs send send it to the Wayback Machine</span>\n</span></span><span><span>urls1<span style=\"color:#f92672;\">=</span><span style=\"color:#66d9ef;\">$(</span>curl -s https://robbinespu.gitlab.io/index.xml | grep <span style=\"color:#e6db74;\">\"&lt;link&gt;\"</span> | head -n <span style=\"color:#ae81ff;\">10</span> | awk -F<span style=\"color:#e6db74;\">\"&lt;guid&gt;\"</span> <span style=\"color:#e6db74;\">'{print $2} '</span> | awk -F<span style=\"color:#e6db74;\">\"&lt;/guid&gt;\"</span> <span style=\"color:#e6db74;\">'{print $1}'</span><span style=\"color:#66d9ef;\">)</span>\n</span></span><span><span><span style=\"color:#66d9ef;\">for</span> i in $urls1\n</span></span><span><span>    <span style=\"color:#66d9ef;\">do</span>  archivenow --ia --is --mg <span style=\"color:#e6db74;\">\"</span>$i<span style=\"color:#e6db74;\">\"</span>\n</span></span><span><span><span style=\"color:#66d9ef;\">done</span>\n</span></span><span><span>\n</span></span><span><span><span style=\"color:#75715e;\"># Same like previous but for the IndieWeb RSS</span>\n</span></span><span><span>urls2<span style=\"color:#f92672;\">=</span><span style=\"color:#66d9ef;\">$(</span>curl -s https://robbinespu.gitlab.io/indieweb/index.xml | grep <span style=\"color:#e6db74;\">\"&lt;link&gt;\"</span> | head -n <span style=\"color:#ae81ff;\">10</span> | awk -F<span style=\"color:#e6db74;\">\"&lt;guid&gt;\"</span> <span style=\"color:#e6db74;\">'{print $2} '</span> | awk -F<span style=\"color:#e6db74;\">\"&lt;/guid&gt;\"</span> <span style=\"color:#e6db74;\">'{print $1}'</span><span style=\"color:#66d9ef;\">)</span>\n</span></span><span><span><span style=\"color:#66d9ef;\">for</span> i in $urls2\n</span></span><span><span>    <span style=\"color:#66d9ef;\">do</span>  archivenow --ia --is --mg <span style=\"color:#e6db74;\">\"</span>$i<span style=\"color:#e6db74;\">\"</span>\n</span></span><span><span><span style=\"color:#66d9ef;\">done</span>\n</span></span><span><span>\n</span></span><span><span><span style=\"color:#75715e;\"># Archive the main website</span>\n</span></span><span><span>archivenow --ia --is --mg <span style=\"color:#e6db74;\">\"https://robbinespu.gitlab.io/\"</span>\n</span></span><span><span>echo <span style=\"color:#e6db74;\">\"Done!\"</span>\n</span></span></code></pre>\n<p>But I have turn off / comment out the script since a year ago because I don‚Äôt want to archive my website too often (because I added a webhook to execute CI/CD when received\n<a href=\"https://github.com/aaronpk/webmention.io/blob/45a06629e59d56efdba1ce39936e61b81fc92d97/views/webhooks.erb\">payload from webmention</a>\n).</p>\n<p>Plus this tricks only work for existing old post, the new post not being archived yet because pipeline still running and it the ‚Äúartifacts‚Äù still un-publish.</p>\n<p>I only want to archive it when I have a new post. So, I will archive it manually üòä</p>\n</blockquote>",
            "value": "Previously, I always send my URL to the Wayback Machine to archive it. But now, I have a better way to do it. I use the\nGitlab CI/CD\nservice to send my URL to the Wayback Machine. It is a free service and it is very easy to use. I just need to add a few lines of code to my Hugo build script.Here is an example:First, I need to add some python script called\narchivenow\nduring build stage.pages:\n  stage: deploy\n  script:\n    - hugo --verbose --minify --enableGitInfo\n    - git clone git@github.com:oduwsdl/archivenow.git\n    - cd archivenow\n    - pip install -r requirements.txt\n    - pip install ./\n    - cd ..\n    - ./submit10url2backway.sh\n    - echo 'Build is complete and feed submited to web archieved..!!!'\nThen, I need to add ‚Äúsubmit10url2backway‚Äù script to send my URL to the Wayback Machine. Here is the script:#!/usr/bin/env bash\n# Copyright Robbi Nespu <contact@robbi.my> , 2022\n# License: MIT\n\n# This script is used to archive my website to the Internet Archive.\n\n# Fetch RSS and read the first 10 URLs send send it to the Wayback Machine\nurls1=$(curl -s https://robbinespu.gitlab.io/index.xml | grep \"<link>\" | head -n 10 | awk -F\"<guid>\" '{print $2} ' | awk -F\"</guid>\" '{print $1}')\nfor i in $urls1\n    do  archivenow --ia --is --mg \"$i\"\ndone\n\n# Same like previous but for the IndieWeb RSS\nurls2=$(curl -s https://robbinespu.gitlab.io/indieweb/index.xml | grep \"<link>\" | head -n 10 | awk -F\"<guid>\" '{print $2} ' | awk -F\"</guid>\" '{print $1}')\nfor i in $urls2\n    do  archivenow --ia --is --mg \"$i\"\ndone\n\n# Archive the main website\narchivenow --ia --is --mg \"https://robbinespu.gitlab.io/\"\necho \"Done!\"\nBut I have turn off / comment out the script since a year ago because I don‚Äôt want to archive my website too often (because I added a webhook to execute CI/CD when received\npayload from webmention\n).Plus this tricks only work for existing old post, the new post not being archived yet because pipeline still running and it the ‚Äúartifacts‚Äù still un-publish.I only want to archive it when I have a new post. So, I will archive it manually üòä"
          }
        ]
      }
    },
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "url": [
          "robbinespu Ó®Ä"
        ],
        "name": [
          "robbinespu Ó®Ä"
        ],
        "entry": [
          {
            "html": "<blockquote><p class=\"blockquote\">...üìù New post:  ‚Ü©Ô∏è Reply to: <a href=\"https://petersmith.org/webmentions/likes/2022/like-202220221213-124654/\">petersmith.org/webmentions/li‚Ä¶</a> -  ‚û°Ô∏è <a href=\"https://journal.robbi.my/notes/221218071647/\">journal.robbi.my/notes/22121807‚Ä¶</a></p></blockquote>",
            "value": "...üìù New post:  ‚Ü©Ô∏è Reply to: petersmith.org/webmentions/li‚Ä¶ -  ‚û°Ô∏è journal.robbi.my/notes/22121807‚Ä¶"
          }
        ]
      }
    },
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "url": [
          "Robbi Nespu"
        ],
        "name": [
          "Robbi Nespu"
        ],
        "entry": [
          {
            "html": "<blockquote>\n<p>Previously, I always send my URL to the Wayback Machine to archive it. But now, I have a better way to do it. I use the\n<a href=\"https://docs.gitlab.com/ee/ci/\">Gitlab CI/CD</a>\nservice to send my URL to the Wayback Machine. It is a free service and it is very easy to use. I just need to add a few lines of code to my Hugo build script.</p>\n<p>Here is an example:</p>\n<p>First, I need to add some python script called\n<a href=\"https://github.com/oduwsdl/archivenow\">archivenow</a>\nduring build stage.</p>\n<pre style=\"color:#f8f8f2;background-color:#272822;\"><code><span><span>pages:\n</span></span><span><span>  stage: deploy\n</span></span><span><span>  script:\n</span></span><span><span>    - hugo --verbose --minify --enableGitInfo\n</span></span><span><span>    - git clone git@github.com:oduwsdl/archivenow.git\n</span></span><span><span>    - cd archivenow\n</span></span><span><span>    - pip install -r requirements.txt\n</span></span><span><span>    - pip install ./\n</span></span><span><span>    - cd ..\n</span></span><span><span>    - ./submit10url2backway.sh\n</span></span><span><span>    - echo <span style=\"color:#e6db74;\">'Build is complete and feed submited to web archieved..!!!'</span>\n</span></span></code></pre>\n<p>Then, I need to add ‚Äú<strong>submit10url2backway</strong>‚Äù script to send my URL to the Wayback Machine. Here is the script:</p>\n<pre style=\"color:#f8f8f2;background-color:#272822;\"><code><span><span><span style=\"color:#75715e;\">#!/usr/bin/env bash\n</span></span></span><span><span><span style=\"color:#75715e;\"></span><span style=\"color:#75715e;\"># Copyright Robbi Nespu &lt;contact@robbi.my&gt; , 2022</span>\n</span></span><span><span><span style=\"color:#75715e;\"># License: MIT</span>\n</span></span><span><span>\n</span></span><span><span><span style=\"color:#75715e;\"># This script is used to archive my website to the Internet Archive.</span>\n</span></span><span><span>\n</span></span><span><span><span style=\"color:#75715e;\"># Fetch RSS and read the first 10 URLs send send it to the Wayback Machine</span>\n</span></span><span><span>urls1<span style=\"color:#f92672;\">=</span><span style=\"color:#66d9ef;\">$(</span>curl -s https://robbinespu.gitlab.io/index.xml | grep <span style=\"color:#e6db74;\">\"&lt;link&gt;\"</span> | head -n <span style=\"color:#ae81ff;\">10</span> | awk -F<span style=\"color:#e6db74;\">\"&lt;guid&gt;\"</span> <span style=\"color:#e6db74;\">'{print $2} '</span> | awk -F<span style=\"color:#e6db74;\">\"&lt;/guid&gt;\"</span> <span style=\"color:#e6db74;\">'{print $1}'</span><span style=\"color:#66d9ef;\">)</span>\n</span></span><span><span><span style=\"color:#66d9ef;\">for</span> i in $urls1\n</span></span><span><span>    <span style=\"color:#66d9ef;\">do</span>  archivenow --ia --is --mg <span style=\"color:#e6db74;\">\"</span>$i<span style=\"color:#e6db74;\">\"</span>\n</span></span><span><span><span style=\"color:#66d9ef;\">done</span>\n</span></span><span><span>\n</span></span><span><span><span style=\"color:#75715e;\"># Same like previous but for the IndieWeb RSS</span>\n</span></span><span><span>urls2<span style=\"color:#f92672;\">=</span><span style=\"color:#66d9ef;\">$(</span>curl -s https://robbinespu.gitlab.io/indieweb/index.xml | grep <span style=\"color:#e6db74;\">\"&lt;link&gt;\"</span> | head -n <span style=\"color:#ae81ff;\">10</span> | awk -F<span style=\"color:#e6db74;\">\"&lt;guid&gt;\"</span> <span style=\"color:#e6db74;\">'{print $2} '</span> | awk -F<span style=\"color:#e6db74;\">\"&lt;/guid&gt;\"</span> <span style=\"color:#e6db74;\">'{print $1}'</span><span style=\"color:#66d9ef;\">)</span>\n</span></span><span><span><span style=\"color:#66d9ef;\">for</span> i in $urls2\n</span></span><span><span>    <span style=\"color:#66d9ef;\">do</span>  archivenow --ia --is --mg <span style=\"color:#e6db74;\">\"</span>$i<span style=\"color:#e6db74;\">\"</span>\n</span></span><span><span><span style=\"color:#66d9ef;\">done</span>\n</span></span><span><span>\n</span></span><span><span><span style=\"color:#75715e;\"># Archive the main website</span>\n</span></span><span><span>archivenow --ia --is --mg <span style=\"color:#e6db74;\">\"https://robbinespu.gitlab.io/\"</span>\n</span></span><span><span>echo <span style=\"color:#e6db74;\">\"Done!\"</span>\n</span></span></code></pre>\n<p>But I have turn off / comment out the script since a year ago because I don‚Äôt want to archive my website too often (because I added a webhook to execute CI/CD when received\n<a href=\"https://github.com/aaronpk/webmention.io/blob/45a06629e59d56efdba1ce39936e61b81fc92d97/views/webhooks.erb\">payload from webmention</a>\n).</p>\n<p>Plus this tricks only work for existing old post, the new post not being archived yet because pipeline still running and it the ‚Äúartifacts‚Äù still un-publish.</p>\n<p>I only want to archive it when I have a new post. So, I will archive it manually üòä</p>\n</blockquote>",
            "value": "Previously, I always send my URL to the Wayback Machine to archive it. But now, I have a better way to do it. I use the\nGitlab CI/CD\nservice to send my URL to the Wayback Machine. It is a free service and it is very easy to use. I just need to add a few lines of code to my Hugo build script.Here is an example:First, I need to add some python script called\narchivenow\nduring build stage.pages:\n  stage: deploy\n  script:\n    - hugo --verbose --minify --enableGitInfo\n    - git clone git@github.com:oduwsdl/archivenow.git\n    - cd archivenow\n    - pip install -r requirements.txt\n    - pip install ./\n    - cd ..\n    - ./submit10url2backway.sh\n    - echo 'Build is complete and feed submited to web archieved..!!!'\nThen, I need to add ‚Äúsubmit10url2backway‚Äù script to send my URL to the Wayback Machine. Here is the script:#!/usr/bin/env bash\n# Copyright Robbi Nespu <contact@robbi.my> , 2022\n# License: MIT\n\n# This script is used to archive my website to the Internet Archive.\n\n# Fetch RSS and read the first 10 URLs send send it to the Wayback Machine\nurls1=$(curl -s https://robbinespu.gitlab.io/index.xml | grep \"<link>\" | head -n 10 | awk -F\"<guid>\" '{print $2} ' | awk -F\"</guid>\" '{print $1}')\nfor i in $urls1\n    do  archivenow --ia --is --mg \"$i\"\ndone\n\n# Same like previous but for the IndieWeb RSS\nurls2=$(curl -s https://robbinespu.gitlab.io/indieweb/index.xml | grep \"<link>\" | head -n 10 | awk -F\"<guid>\" '{print $2} ' | awk -F\"</guid>\" '{print $1}')\nfor i in $urls2\n    do  archivenow --ia --is --mg \"$i\"\ndone\n\n# Archive the main website\narchivenow --ia --is --mg \"https://robbinespu.gitlab.io/\"\necho \"Done!\"\nBut I have turn off / comment out the script since a year ago because I don‚Äôt want to archive my website too often (because I added a webhook to execute CI/CD when received\npayload from webmention\n).Plus this tricks only work for existing old post, the new post not being archived yet because pipeline still running and it the ‚Äúartifacts‚Äù still un-publish.I only want to archive it when I have a new post. So, I will archive it manually üòä"
          }
        ]
      }
    },
    {
      "type": [
        "h-card"
      ],
      "properties": {
        "photo": [
          {
            "value": "https://petersmith.org/images/petersmith01.jpg",
            "alt": "Headshot of Peter Smith"
          }
        ],
        "url": [
          "https://petersmith.org/"
        ],
        "uid": [
          "https://petersmith.org/"
        ],
        "name": [
          "Peter Smith"
        ],
        "given-name": [
          "Peter"
        ],
        "family-name": [
          "Smith"
        ]
      }
    },
    {
      "type": [
        "h-card"
      ],
      "properties": {
        "name": [
          "Peter Smith"
        ],
        "url": [
          "https://petersmith.org/",
          "https://petersmith.org/"
        ],
        "uid": [
          "https://petersmith.org/"
        ],
        "honorific-prefix": [
          "Mr"
        ],
        "given-name": [
          "Peter"
        ],
        "family-name": [
          "Smith"
        ],
        "honorific-suffix": [
          "PhD MBA"
        ],
        "org": [
          "The University of Auckland"
        ],
        "photo": [
          {
            "value": "https://petersmith.org/images/petersmith01.webp",
            "alt": "A photo of Peter Smith"
          }
        ],
        "locality": [
          "Auckland"
        ],
        "country-name": [
          "New Zealand"
        ],
        "category": [
          "Academic"
        ],
        "note": [
          "First American woman in space.",
          "This is my commonplace book, covering teaching, research, technology, and whatever else takes my fancy. This site is in a constant state of development and 'becoming'.  A former software engineer, I now teach and research topics in strategic management (especially in regards to professional service firms, and high-tech firms)."
        ]
      }
    }
  ],
  "rels": {
    "canonical": [
      "https://petersmith.org/"
    ],
    "icon": [
      "https://petersmith.org/images/favicon.ico"
    ],
    "shortcut": [
      "https://petersmith.org/images/favicon.ico"
    ],
    "apple-touch-icon": [
      "https://petersmith.org/images/favicon.png"
    ],
    "webmention": [
      "https://webmention.io/petersmith.org/webmention"
    ],
    "pingback": [
      "https://webmention.io/petersmith.org/xmlrpc"
    ],
    "alternate": [
      "https://petersmith.org/index.xml"
    ],
    "me": [
      "https://petersmith.org/",
      "https://orcid.org/0000-0002-6382-7051",
      "https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=657683",
      "https://github.com/psmith1303"
    ]
  },
  "rel-urls": {
    "https://petersmith.org/": {
      "rels": [
        "canonical"
      ]
    },
    "https://petersmith.org/images/favicon.ico": {
      "rels": [
        "icon",
        "shortcut"
      ]
    },
    "https://petersmith.org/images/favicon.png": {
      "rels": [
        "apple-touch-icon"
      ]
    },
    "https://webmention.io/petersmith.org/webmention": {
      "rels": [
        "webmention"
      ]
    },
    "https://webmention.io/petersmith.org/xmlrpc": {
      "rels": [
        "pingback"
      ]
    },
    "https://petersmith.org/index.xml": {
      "rels": [
        "alternate"
      ],
      "title": "PeterSmith.org",
      "type": "application/rss+xml"
    },
    "https://orcid.org/0000-0002-6382-7051": {
      "rels": [
        "me"
      ]
    },
    "https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=657683": {
      "rels": [
        "me"
      ]
    },
    "https://github.com/psmith1303": {
      "rels": [
        "me"
      ]
    }
  }
}