{
  "items": [
    {
      "type": [
        "h-feed"
      ],
      "properties": {},
      "children": [
        {
          "type": [
            "h-card"
          ],
          "properties": {
            "photo": [
              "https://stark-moon-46.s3.amazonaws.com/images/16299.jpg"
            ],
            "url": [
              "https://herestomwiththeweather.com/"
            ],
            "uid": [
              "https://herestomwiththeweather.com/"
            ],
            "name": [
              "Tom"
            ],
            "email": [
              "mailto:herestomwiththeweather@gmail.com"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "IndieWeb and Mastodon",
              ""
            ],
            "url": [
              "https://herestomwiththeweather.com/2022/12/22/indieweb-and-mastodon/"
            ],
            "time": [
              "2022-12-22T20:06:15+00:00"
            ],
            "content": [
              {
                "html": "<p>Thanks to <a href=\"https://effaustin.org/\">EFF-Austin</a> for the opportunity to talk along with <a href=\"https://www.weblogsky.com/\">Jon Lebkowsky</a> about the relationship between <a href=\"https://indieweb.org/\">Indieweb</a> and the <a href=\"https://en.wikipedia.org/wiki/Fediverse\">Fediverse</a>. (<a href=\"https://herestomwiththeweather.com/effaustin/indieweb_mastodon\">Slides</a> and <a href=\"https://www.youtube.com/watch?v=VRu3i9u9I5Q\">video</a>)</p>\n\n<p>The meetup <a href=\"https://www.meetup.com/EFF-Austin/events/nltdcrydcqbrb/\">Indieweb and Mastodon: The Time is Now</a> was coincidentally in the same room as <a href=\"https://indieweb.org/2020/Austin\">IndieWebCamp Austin 2020</a>.</p>",
                "value": "Thanks to EFF-Austin for the opportunity to talk along with Jon Lebkowsky about the relationship between Indieweb and the Fediverse. (Slides and video)\n\nThe meetup Indieweb and Mastodon: The Time is Now was coincidentally in the same room as IndieWebCamp Austin 2020."
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://herestomwiththeweather.com/social/2022/12/02/77469/"
            ],
            "time": [
              "2022-12-02T21:31:09+00:00"
            ],
            "name": [
              {
                "type": [
                  "h-entry"
                ],
                "properties": {
                  "like-of": [
                    "https://www.manton.org/2022/12/02/moving-from-mastodon.html"
                  ],
                  "name": [
                    "Liked\n    \n      https://www.manton.org/2022/12/02/moving-from-mastodon.html"
                  ]
                },
                "value": "Liked\n    \n      https://www.manton.org/2022/12/02/moving-from-mastodon.html"
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Mastodon Discovery",
              ""
            ],
            "url": [
              "https://herestomwiththeweather.com/2022/11/15/mastodon-discovery/"
            ],
            "time": [
              "2022-11-15T16:42:33+00:00"
            ],
            "content": [
              {
                "html": "<p>Making notes is helpful when reading and running unfamiliar code for the first time.  I usually start with happy paths.  Here’s some notes I made while learning about Mastodon account search and discovery.  It’s really cool to poke around the code that so many people are using every day to find each other.</p>\n\n<p>When you search on an account identifier on Mastodon, your browser makes a request to your Mastodon instance:</p>\n\n<blockquote>\n  <p>/api/v2/search?q=%40herestomwiththeweather%40mastodon.social&amp;resolve=true&amp;limit=5</p>\n</blockquote>\n\n<p>The resolve=true parameter tells your Mastodon instance to make a webfinger request to the target Mastodon instance if necessary. The search controller <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/controllers/api/v2/search_controller.rb#L32\">makes a call to the SearchService</a></p>\n\n<div class=\"highlighter-rouge\">\n<pre class=\"highlight\"><code>  def search_results\n    SearchService.new.call(\n      params[:q],\n      current_account,\n      limit_param(RESULTS_LIMIT),\n      search_params.merge(resolve: truthy_param?(:resolve), exclude_unreviewed: truthy_param?(:exclude_unreviewed))\n    )\n  end\n</code></pre>\n</div>\n\n<p>and since resolve=true, SearchService <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/services/account_search_service.rb#L36\">makes a call to the ResolveAccountService</a></p>\n\n<div class=\"highlighter-rouge\">\n<pre class=\"highlight\"><code>      if options[:resolve]\n        ResolveAccountService.new.call(query)\n</code></pre>\n</div>\n\n<p>The purpose of ResolveAccountService is to “Find or create an account record for a remote user” and return an account object to the search controller. It includes <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/helpers/webfinger_helper.rb\">WebfingerHelper</a> which is a trivial module with just one one-line method named webfinger!()</p>\n\n<div class=\"highlighter-rouge\">\n<pre class=\"highlight\"><code>module WebfingerHelper\n  def webfinger!(uri)\n    Webfinger.new(uri).perform\n  end\nend\n</code></pre>\n</div>\n\n<p>This method returns a webfinger object. Rather than call it directly, ResolveAccountService <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/services/resolve_account_service.rb#L34\">invokes process_webfinger!</a> which <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/services/resolve_account_service.rb#L86\">invokes it</a> and then asks the returned webfinger object’s subject method for its username and domain and makes them instance variables of the service object.</p>\n\n<div class=\"highlighter-rouge\">\n<pre class=\"highlight\"><code>  def process_webfinger!(uri)\n    @webfinger                           = webfinger!(\"acct:#{uri}\")\n    confirmed_username, confirmed_domain = split_acct(@webfinger.subject)\n\n    if confirmed_username.casecmp(@username).zero? &amp;&amp; confirmed_domain.casecmp(@domain).zero?\n      @username = confirmed_username\n      @domain   = confirmed_domain\n      return\n    end\n</code></pre>\n</div>\n\n<p>If the Mastodon instance does not already know about this account, ResolveAccountService <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/services/resolve_account_service.rb#L55\">invokes fetch_account!</a> which <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/services/resolve_account_service.rb#L114\">calls the ActivityPub::FetchRemoteAccountService</a> which inherits from <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/services/activitypub/fetch_remote_actor_service.rb\">ActivityPub::FetchRemoteActorService</a></p>\n\n<div class=\"highlighter-rouge\">\n<pre class=\"highlight\"><code>      @account = ActivityPub::FetchRemoteAccountService.new.call(actor_url, suppress_errors: @options[:suppress_errors])\n</code></pre>\n</div>\n\n<p>The actor_url will look something like</p>\n\n<blockquote>\n  <p>https://mastodon.social/users/herestomwiththeweather</p>\n</blockquote>\n\n<p>The ActivityPub::FetchRemoteActorService <a href=\"https://github.com/mastodon/mastodon/blob/main/app/services/activitypub/fetch_remote_actor_service.rb#L19\">passes the actor_url parameter to fetch_resource</a> to receive a json response for the remote account.</p>\n\n<div class=\"highlighter-rouge\">\n<pre class=\"highlight\"><code>    @json = begin\n      if prefetched_body.nil?\n        fetch_resource(uri, id)\n      else\n\n</code></pre>\n</div>\n\n<p>The response includes a lot of information including name, summary, publicKey, images and urls to fetch more information like followers and following.</p>\n\n<p>Finally, the ActivityPub::FetchRemoteActorService <a href=\"https://github.com/mastodon/mastodon/blob/main/app/services/activitypub/fetch_remote_actor_service.rb#L38\">calls the ActivityPub::ProcessAccountService</a>, passing it the json response.</p>\n\n<div class=\"highlighter-rouge\">\n<pre class=\"highlight\"><code>    ActivityPub::ProcessAccountService.new.call(@username, @domain, @json, only_key: only_key, verified_webfinger: !only_key)\n</code></pre>\n</div>\n\n<p>If the Mastodon instance does not know about the account, ActivityPub::ProcessAccountService <a href=\"https://github.com/mastodon/mastodon/blob/main/app/services/activitypub/process_account_service.rb#L28\">invokes create_account and update_account</a> to save the username, domain and all the associated urls from the json response to a new account record in the database.</p>\n\n<div class=\"highlighter-rouge\">\n<pre class=\"highlight\"><code>      create_account if @account.nil?\n      update_account\n</code></pre>\n</div>\n\n<p>I have several questions about how following others works and will probably look at that soon.  I may start out by reading <a href=\"https://tinysubversions.com/notes/reading-activitypub/\">A highly opinionated guide to learning about ActivityPub</a> which I bookmarked a while ago.</p>",
                "value": "Making notes is helpful when reading and running unfamiliar code for the first time.  I usually start with happy paths.  Here’s some notes I made while learning about Mastodon account search and discovery.  It’s really cool to poke around the code that so many people are using every day to find each other.\n\nWhen you search on an account identifier on Mastodon, your browser makes a request to your Mastodon instance:\n\n\n  /api/v2/search?q=%40herestomwiththeweather%40mastodon.social&resolve=true&limit=5\n\n\nThe resolve=true parameter tells your Mastodon instance to make a webfinger request to the target Mastodon instance if necessary. The search controller makes a call to the SearchService\n\n  def search_results\n    SearchService.new.call(\n      params[:q],\n      current_account,\n      limit_param(RESULTS_LIMIT),\n      search_params.merge(resolve: truthy_param?(:resolve), exclude_unreviewed: truthy_param?(:exclude_unreviewed))\n    )\n  end\n\n\n\nand since resolve=true, SearchService makes a call to the ResolveAccountService\n\n      if options[:resolve]\n        ResolveAccountService.new.call(query)\n\n\n\nThe purpose of ResolveAccountService is to “Find or create an account record for a remote user” and return an account object to the search controller. It includes WebfingerHelper which is a trivial module with just one one-line method named webfinger!()\n\nmodule WebfingerHelper\n  def webfinger!(uri)\n    Webfinger.new(uri).perform\n  end\nend\n\n\n\nThis method returns a webfinger object. Rather than call it directly, ResolveAccountService invokes process_webfinger! which invokes it and then asks the returned webfinger object’s subject method for its username and domain and makes them instance variables of the service object.\n\n  def process_webfinger!(uri)\n    @webfinger                           = webfinger!(\"acct:#{uri}\")\n    confirmed_username, confirmed_domain = split_acct(@webfinger.subject)\n\n    if confirmed_username.casecmp(@username).zero? && confirmed_domain.casecmp(@domain).zero?\n      @username = confirmed_username\n      @domain   = confirmed_domain\n      return\n    end\n\n\n\nIf the Mastodon instance does not already know about this account, ResolveAccountService invokes fetch_account! which calls the ActivityPub::FetchRemoteAccountService which inherits from ActivityPub::FetchRemoteActorService\n\n      @account = ActivityPub::FetchRemoteAccountService.new.call(actor_url, suppress_errors: @options[:suppress_errors])\n\n\n\nThe actor_url will look something like\n\n\n  https://mastodon.social/users/herestomwiththeweather\n\n\nThe ActivityPub::FetchRemoteActorService passes the actor_url parameter to fetch_resource to receive a json response for the remote account.\n\n    @json = begin\n      if prefetched_body.nil?\n        fetch_resource(uri, id)\n      else\n\n\n\n\nThe response includes a lot of information including name, summary, publicKey, images and urls to fetch more information like followers and following.\n\nFinally, the ActivityPub::FetchRemoteActorService calls the ActivityPub::ProcessAccountService, passing it the json response.\n\n    ActivityPub::ProcessAccountService.new.call(@username, @domain, @json, only_key: only_key, verified_webfinger: !only_key)\n\n\n\nIf the Mastodon instance does not know about the account, ActivityPub::ProcessAccountService invokes create_account and update_account to save the username, domain and all the associated urls from the json response to a new account record in the database.\n\n      create_account if @account.nil?\n      update_account\n\n\n\nI have several questions about how following others works and will probably look at that soon.  I may start out by reading A highly opinionated guide to learning about ActivityPub which I bookmarked a while ago."
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "RubyConf in Houston",
              ""
            ],
            "url": [
              "https://herestomwiththeweather.com/2022/10/27/rubyconf-in-houston/"
            ],
            "time": [
              "2022-10-27T21:56:20+00:00"
            ],
            "content": [
              {
                "html": "<p>Earlier this week, I signed up for <a href=\"https://rubyconf.org/\">RubyConf 2022</a> which is Nov. 29 - Dec. 1 in Houston.  This is my first conference since the pandemic started and I was glad to see the <a href=\"https://rubyconf.org/safety\">safety precautions</a>.  The <a href=\"https://rubyconf.org/schedule\">schedule</a> also looks great!  Please say “Hi!” if you see me there.</p>",
                "value": "Earlier this week, I signed up for RubyConf 2022 which is Nov. 29 - Dec. 1 in Houston.  This is my first conference since the pandemic started and I was glad to see the safety precautions.  The schedule also looks great!  Please say “Hi!” if you see me there."
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "IndieAuth login history",
              ""
            ],
            "url": [
              "https://herestomwiththeweather.com/2022/10/25/indieauth-login-history/"
            ],
            "time": [
              "2022-10-25T16:51:16+00:00"
            ],
            "content": [
              {
                "html": "<p>In my last post, I mentioned that I planned to add login history to <a href=\"https://github.com/herestomwiththeweather/irwin\">Irwin</a>.  As I was testing my code, I logged into <a href=\"https://indieweb.org/\">indieweb.org</a> and noticed that I needed to update my code to support <a href=\"https://indieauth.spec.indieweb.org/#profile-url-response\">5.3.2 Profile URL Response</a> of the IndieAuth spec as this IndieAuth client does not need an access token.  Here’s what the history looks like on my IndieAuth server:</p>\n\n<p><img src=\"https://coffeebucks.s3.amazonaws.com/images/image/jekyll/indieauth_login_history.png\" alt=\"IndieAuth login history\"></p>\n\n<p>If I click on a login timestamp, I have the option to revoke the access token associated with the login if it exists and has not already expired.  My next step is to test some other <a href=\"https://indieweb.org/Micropub/Servers\">micropub servers</a> than the one I use to see what interoperability updates I may need to make.</p>",
                "value": "In my last post, I mentioned that I planned to add login history to Irwin.  As I was testing my code, I logged into indieweb.org and noticed that I needed to update my code to support 5.3.2 Profile URL Response of the IndieAuth spec as this IndieAuth client does not need an access token.  Here’s what the history looks like on my IndieAuth server:\n\n IndieAuth login history \n\nIf I click on a login timestamp, I have the option to revoke the access token associated with the login if it exists and has not already expired.  My next step is to test some other micropub servers than the one I use to see what interoperability updates I may need to make."
              }
            ]
          }
        }
      ]
    }
  ],
  "rels": {
    "stylesheet": [
      "https://herestomwiththeweather.com/css/main.css"
    ],
    "canonical": [
      "https://herestomwiththeweather.com/"
    ],
    "alternate": [
      "https://herestomwiththeweather.com/feed.xml"
    ],
    "micropub": [
      "https://supermicropub.herokuapp.com/micropub/main"
    ],
    "authorization_endpoint": [
      "https://irwin.onrender.com/auth"
    ],
    "token_endpoint": [
      "https://irwin.onrender.com/token"
    ],
    "microsub": [
      "https://aperture.p3k.io/microsub/20"
    ],
    "me": [
      "https://micro.blog/tomwiththeweather",
      "https://herestomwiththeweather.com/",
      "https://www.goodreads.com/user/show/656838-tom-brown",
      "https://twitter.com/tomwiththeweath",
      "https://github.com/herestomwiththeweather",
      "https://mastodon.social/@herestomwiththeweather",
      "https://keybase.io/tbbrown",
      "https://www.flickr.com/photos/tbbrown"
    ],
    "webmention": [
      "https://elro.herokuapp.com/api/webmention"
    ],
    "next": [
      "https://herestomwiththeweather.com/page2"
    ]
  },
  "rel-urls": {
    "https://herestomwiththeweather.com/css/main.css": {
      "rels": [
        "stylesheet"
      ]
    },
    "https://herestomwiththeweather.com/": {
      "rels": [
        "canonical"
      ]
    },
    "https://herestomwiththeweather.com/feed.xml": {
      "rels": [
        "alternate"
      ],
      "title": "HeresTomWithTheWeather",
      "type": "application/rss+xml"
    },
    "https://supermicropub.herokuapp.com/micropub/main": {
      "rels": [
        "micropub"
      ]
    },
    "https://irwin.onrender.com/auth": {
      "rels": [
        "authorization_endpoint"
      ]
    },
    "https://irwin.onrender.com/token": {
      "rels": [
        "token_endpoint"
      ]
    },
    "https://aperture.p3k.io/microsub/20": {
      "rels": [
        "microsub"
      ]
    },
    "https://micro.blog/tomwiththeweather": {
      "rels": [
        "me"
      ]
    },
    "https://elro.herokuapp.com/api/webmention": {
      "rels": [
        "webmention"
      ]
    },
    "https://herestomwiththeweather.com/page2": {
      "rels": [
        "next"
      ]
    },
    "https://www.goodreads.com/user/show/656838-tom-brown": {
      "rels": [
        "me"
      ],
      "title": "Goodreads"
    },
    "https://twitter.com/tomwiththeweath": {
      "rels": [
        "me"
      ],
      "title": "Twitter"
    },
    "https://github.com/herestomwiththeweather": {
      "rels": [
        "me"
      ],
      "title": "GitHub"
    },
    "https://mastodon.social/@herestomwiththeweather": {
      "rels": [
        "me"
      ],
      "title": "Mastodon"
    },
    "https://keybase.io/tbbrown": {
      "rels": [
        "me"
      ],
      "title": "Keybase",
      "text": "\n.st0{fill:#cccccc;}\n\t"
    },
    "https://www.flickr.com/photos/tbbrown": {
      "rels": [
        "me"
      ],
      "title": "Flickr"
    }
  }
}