{
  "items": [
    {
      "type": [
        "h-feed"
      ],
      "properties": {},
      "children": [
        {
          "type": [
            "h-card"
          ],
          "properties": {
            "photo": [
              "https://stark-moon-46.s3.amazonaws.com/images/16299.jpg"
            ],
            "url": [
              "https://herestomwiththeweather.com/"
            ],
            "uid": [
              "https://herestomwiththeweather.com/"
            ],
            "name": [
              "Tom"
            ],
            "email": [
              "mailto:herestomwiththeweather@gmail.com"
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Toews has long covid",
              ""
            ],
            "url": [
              "https://herestomwiththeweather.com/2023/02/19/toews-has-long-covid/"
            ],
            "time": [
              "2023-02-19T21:36:21+00:00"
            ],
            "content": [
              {
                "html": "<p>Today we learned that <a href=\"https://en.wikipedia.org/wiki/Jonathan_Toews\">a 34 year old hockey player</a>, a 6x all-star in the NHL’s list of 100 greatest players of all time, <a href=\"https://www.cbc.ca/sports/hockey/nhl/jonathan-toews-nhl-roundup-feb19-1.6753912\">stopped playing hockey several weeks ago due to Long Covid</a>.</p>\n\n<p>The covid minimizer that now owns <a href=\"https://en.wikipedia.org/wiki/Twitter\">Twitter</a> intentionally allows misinformation to spread. <a href=\"https://www.staples.com/3m-aura-n95-particulate-respirator-white-20-pack-9205p-20-dc/product_24503827\">Mask up</a>.</p>",
                "value": "Today we learned that a 34 year old hockey player, a 6x all-star in the NHL’s list of 100 greatest players of all time, stopped playing hockey several weeks ago due to Long Covid.\n\nThe covid minimizer that now owns Twitter intentionally allows misinformation to spread. Mask up."
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "Correction: check_webfinger!",
              ""
            ],
            "url": [
              "https://herestomwiththeweather.com/2023/01/08/correction-check_webfinger/"
            ],
            "time": [
              "2023-01-08T18:52:24+00:00"
            ],
            "content": [
              {
                "html": "<p>Mastodon is not the fediverse and in my <a href=\"https://herestomwiththeweather.com/2022/12/23/check_webfinger/\">check_webfinger!</a> post, I’m afraid I made that assumption.  In particular, I concluded</p>\n\n<blockquote>\n  <p>So, from the perspective of mastodon, the domain component of your identifier you are known as is determined by which domain serves your actor document rather than the domain serving the original “well known” webfinger document.</p>\n</blockquote>\n\n<p>which is not necessarily true if you consider the fediverse outside of Mastodon.</p>\n\n<p>Instead, it seems that I should have said that the domain component of your identifier is determined by the domain component of the subject field returned in the webfinger response from the domain that serves your actor document when mastodon makes its 2nd webfinger request which is done in the <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/services/activitypub/fetch_remote_actor_service.rb#L48\">check_webfinger!</a> method.</p>\n\n<div class=\"highlighter-rouge\">\n<pre class=\"highlight\"><code>  def check_webfinger!\n    webfinger                            = webfinger!(\"acct:#{@username}@#{@domain}\")\n    confirmed_username, confirmed_domain = split_acct(webfinger.subject)\n</code></pre>\n</div>\n\n<p>In the code above, the @domain passed to webfinger! is the domain of the server providing the activitypub actor document but the confirmed_domain can be different (e.g. your personal domain) if your original “well known” webfinger document was not pointing to a Mastodon server for providing the actor document.</p>\n\n<p>Therefore, if you have a static personal website, it is not necessary to also host the actor document there as long as the fediverse node providing the actor document is smart enough to provide your personal domain in the subject when mastodon makes a webfinger call to it.  A caveat is that such a fediverse node accomodating personal domains would not be able to distinguish between bob@a.com and bob@b.com when mastodon webfingers server.com for bob@server.com.</p>",
                "value": "Mastodon is not the fediverse and in my check_webfinger! post, I’m afraid I made that assumption.  In particular, I concluded\n\n\n  So, from the perspective of mastodon, the domain component of your identifier you are known as is determined by which domain serves your actor document rather than the domain serving the original “well known” webfinger document.\n\n\nwhich is not necessarily true if you consider the fediverse outside of Mastodon.\n\nInstead, it seems that I should have said that the domain component of your identifier is determined by the domain component of the subject field returned in the webfinger response from the domain that serves your actor document when mastodon makes its 2nd webfinger request which is done in the check_webfinger! method.\n\n  def check_webfinger!\n    webfinger                            = webfinger!(\"acct:#{@username}@#{@domain}\")\n    confirmed_username, confirmed_domain = split_acct(webfinger.subject)\n\n\n\nIn the code above, the @domain passed to webfinger! is the domain of the server providing the activitypub actor document but the confirmed_domain can be different (e.g. your personal domain) if your original “well known” webfinger document was not pointing to a Mastodon server for providing the actor document.\n\nTherefore, if you have a static personal website, it is not necessary to also host the actor document there as long as the fediverse node providing the actor document is smart enough to provide your personal domain in the subject when mastodon makes a webfinger call to it.  A caveat is that such a fediverse node accomodating personal domains would not be able to distinguish between bob@a.com and bob@b.com when mastodon webfingers server.com for bob@server.com."
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "url": [
              "https://herestomwiththeweather.com/social/2023/01/07/73150/"
            ],
            "time": [
              "2023-01-07T20:19:10+00:00"
            ],
            "name": [
              {
                "type": [
                  "h-entry"
                ],
                "properties": {
                  "like-of": [
                    "https://nicolas-hoizey.com/articles/2023/01/07/let-s-posse-to-mastodon-with-a-json-feed-and-a-github-action/"
                  ],
                  "name": [
                    "Liked\n    \n      https://nicolas-hoizey.com/articles/2023/01/07/let-s-posse-to-mastodon-with-a-json-feed-and-a-github-action/"
                  ]
                },
                "value": "Liked\n    \n      https://nicolas-hoizey.com/articles/2023/01/07/let-s-posse-to-mastodon-with-a-json-feed-and-a-github-action/"
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "check_webfinger!",
              ""
            ],
            "url": [
              "https://herestomwiththeweather.com/2022/12/23/check_webfinger/"
            ],
            "time": [
              "2022-12-23T11:37:50+00:00"
            ],
            "content": [
              {
                "html": "<p>The notes I made in <a href=\"https://herestomwiththeweather.com/2022/11/15/mastodon-discovery/\">Mastodon Discovery</a> skipped over a noteworthy step.  In general, after mastodon fetches and parses the “well known” webfinger document (the so-called JSON Resource Descriptor), there is a 3 step process to learn about the actor referenced in that document.</p>\n\n<ol>\n  <li>fetch_resource</li>\n  <li>check_webfinger!</li>\n  <li>create_account</li>\n</ol>\n\n<p>As mentioned previously, in the first step, a very comprehensive json document for the actor is fetched and in the third step, an account is created for that actor if does not already exist.  However, between those two steps, mastodon does another webfinger lookup since, for instance, the domain serving the actor document may be a different domain than the one that originally served the first “well known” webfinger document.  Prior to this check, <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/services/activitypub/fetch_remote_actor_service.rb#L32\">some instance variables are set</a>:</p>\n\n<div class=\"highlighter-rouge\">\n<pre class=\"highlight\"><code>    @uri      = @json['id']\n    @username = @json['preferredUsername']\n    @domain   = Addressable::URI.parse(@uri).normalized_host\n</code></pre>\n</div>\n<p>The @uri instance variable is the location of the actor document and the @domain instance variable is the domain that serves the actor document.  After these variables are set, <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/services/activitypub/fetch_remote_actor_service.rb#L36\">the check is performed</a>:</p>\n\n<div class=\"highlighter-rouge\">\n<pre class=\"highlight\"><code>    check_webfinger! unless only_key\n</code></pre>\n</div>\n<p>This check enforces that the domain component of your identifier is the domain that serves your actor document. (It <a href=\"https://github.com/herestomwiththeweather/mastodon/blob/main/app/services/activitypub/fetch_remote_actor_service.rb#L48\">inspects the subject of the “well known” document</a> and if the username and domain of the subject match the instance variables above, the ‘self’ resource link is required to be the same as the @uri instance variable.  If the subject does not match, one more webfinger lookup for the redirection is allowed.)</p>\n\n<p>So, from the perspective of mastodon, the domain component of your identifier you are known as is determined by which domain serves your actor document rather than the domain serving the original “well known” webfinger document.  It seems if your domain is a static site and you want to be known by an identifier associated with your domain, your domain needs to serve the actor document in addition to “well known” webfinger document.</p>",
                "value": "The notes I made in Mastodon Discovery skipped over a noteworthy step.  In general, after mastodon fetches and parses the “well known” webfinger document (the so-called JSON Resource Descriptor), there is a 3 step process to learn about the actor referenced in that document.\n\n\n  fetch_resource\n  check_webfinger!\n  create_account\n\n\nAs mentioned previously, in the first step, a very comprehensive json document for the actor is fetched and in the third step, an account is created for that actor if does not already exist.  However, between those two steps, mastodon does another webfinger lookup since, for instance, the domain serving the actor document may be a different domain than the one that originally served the first “well known” webfinger document.  Prior to this check, some instance variables are set:\n\n    @uri      = @json['id']\n    @username = @json['preferredUsername']\n    @domain   = Addressable::URI.parse(@uri).normalized_host\n\n\nThe @uri instance variable is the location of the actor document and the @domain instance variable is the domain that serves the actor document.  After these variables are set, the check is performed:\n\n    check_webfinger! unless only_key\n\n\nThis check enforces that the domain component of your identifier is the domain that serves your actor document. (It inspects the subject of the “well known” document and if the username and domain of the subject match the instance variables above, the ‘self’ resource link is required to be the same as the @uri instance variable.  If the subject does not match, one more webfinger lookup for the redirection is allowed.)\n\nSo, from the perspective of mastodon, the domain component of your identifier you are known as is determined by which domain serves your actor document rather than the domain serving the original “well known” webfinger document.  It seems if your domain is a static site and you want to be known by an identifier associated with your domain, your domain needs to serve the actor document in addition to “well known” webfinger document."
              }
            ]
          }
        },
        {
          "type": [
            "h-entry"
          ],
          "properties": {
            "name": [
              "IndieWeb and Mastodon",
              ""
            ],
            "url": [
              "https://herestomwiththeweather.com/2022/12/22/indieweb-and-mastodon/"
            ],
            "time": [
              "2022-12-22T20:06:15+00:00"
            ],
            "content": [
              {
                "html": "<p>Thanks to <a href=\"https://effaustin.org/\">EFF-Austin</a> for the opportunity to talk along with <a href=\"https://www.weblogsky.com/\">Jon Lebkowsky</a> about the relationship between <a href=\"https://indieweb.org/\">Indieweb</a> and the <a href=\"https://en.wikipedia.org/wiki/Fediverse\">Fediverse</a>. (<a href=\"https://herestomwiththeweather.com/effaustin/indieweb_mastodon\">Slides</a> and <a href=\"https://www.youtube.com/watch?v=VRu3i9u9I5Q\">video</a>)</p>\n\n<p>The meetup <a href=\"https://www.meetup.com/EFF-Austin/events/nltdcrydcqbrb/\">Indieweb and Mastodon: The Time is Now</a> was coincidentally in the same room as <a href=\"https://indieweb.org/2020/Austin\">IndieWebCamp Austin 2020</a>.</p>",
                "value": "Thanks to EFF-Austin for the opportunity to talk along with Jon Lebkowsky about the relationship between Indieweb and the Fediverse. (Slides and video)\n\nThe meetup Indieweb and Mastodon: The Time is Now was coincidentally in the same room as IndieWebCamp Austin 2020."
              }
            ]
          }
        }
      ]
    }
  ],
  "rels": {
    "stylesheet": [
      "https://herestomwiththeweather.com/css/main.css"
    ],
    "canonical": [
      "https://herestomwiththeweather.com/"
    ],
    "alternate": [
      "https://herestomwiththeweather.com/feed.xml"
    ],
    "micropub": [
      "https://supermicropub.herokuapp.com/micropub/main"
    ],
    "authorization_endpoint": [
      "https://irwin.onrender.com/auth"
    ],
    "token_endpoint": [
      "https://irwin.onrender.com/token"
    ],
    "microsub": [
      "https://aperture.p3k.io/microsub/20"
    ],
    "me": [
      "https://micro.blog/tomwiththeweather",
      "https://herestomwiththeweather.com/",
      "https://www.goodreads.com/user/show/656838-tom-brown",
      "https://twitter.com/tomwiththeweath",
      "https://github.com/herestomwiththeweather",
      "https://mastodon.social/@herestomwiththeweather",
      "https://keybase.io/tbbrown",
      "https://www.flickr.com/photos/tbbrown"
    ],
    "webmention": [
      "https://elro.herokuapp.com/api/webmention"
    ],
    "next": [
      "https://herestomwiththeweather.com/page2"
    ]
  },
  "rel-urls": {
    "https://herestomwiththeweather.com/css/main.css": {
      "rels": [
        "stylesheet"
      ]
    },
    "https://herestomwiththeweather.com/": {
      "rels": [
        "canonical"
      ]
    },
    "https://herestomwiththeweather.com/feed.xml": {
      "rels": [
        "alternate"
      ],
      "title": "HeresTomWithTheWeather",
      "type": "application/rss+xml"
    },
    "https://supermicropub.herokuapp.com/micropub/main": {
      "rels": [
        "micropub"
      ]
    },
    "https://irwin.onrender.com/auth": {
      "rels": [
        "authorization_endpoint"
      ]
    },
    "https://irwin.onrender.com/token": {
      "rels": [
        "token_endpoint"
      ]
    },
    "https://aperture.p3k.io/microsub/20": {
      "rels": [
        "microsub"
      ]
    },
    "https://micro.blog/tomwiththeweather": {
      "rels": [
        "me"
      ]
    },
    "https://elro.herokuapp.com/api/webmention": {
      "rels": [
        "webmention"
      ]
    },
    "https://herestomwiththeweather.com/page2": {
      "rels": [
        "next"
      ]
    },
    "https://www.goodreads.com/user/show/656838-tom-brown": {
      "rels": [
        "me"
      ],
      "title": "Goodreads"
    },
    "https://twitter.com/tomwiththeweath": {
      "rels": [
        "me"
      ],
      "title": "Twitter"
    },
    "https://github.com/herestomwiththeweather": {
      "rels": [
        "me"
      ],
      "title": "GitHub"
    },
    "https://mastodon.social/@herestomwiththeweather": {
      "rels": [
        "me"
      ],
      "title": "Mastodon"
    },
    "https://keybase.io/tbbrown": {
      "rels": [
        "me"
      ],
      "title": "Keybase",
      "text": "\n.st0{fill:#cccccc;}\n\t"
    },
    "https://www.flickr.com/photos/tbbrown": {
      "rels": [
        "me"
      ],
      "title": "Flickr"
    }
  }
}