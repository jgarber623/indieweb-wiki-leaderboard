{
  "items": [
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "name": [
          "Scrum, agility and the human factor"
        ],
        "url": [
          "http://www.mardy.it/blog/2022/10/scrum-agility-and-the-human-factor.html"
        ],
        "published": [
          "2022-10-29T10:17:14+03:00"
        ],
        "content": [
          {
            "html": "<p>I've been working in Scrum teams for 15 years now, give or take. Different\ncompanies, different approaches, from loosely following the agile principles to\na stricter implementation of the Scrum methodology. The only invariant being\nthat in practice Scrum is never followed by the book, but every company and\nteam makes its own adaptations, which makes it hard for everyone to voice\nstatements and critiques that could be considered universally true. That's why I\nwill refrain from taking this road, and instead I'll try to point out a few\naspects and behaviours that I've personally noticed during my career, good and\nbad ones (but of course, since I'm old and bitter, more bad than good).</p>\n<p>Scrum's focus on communication is, in my opinion, where most of its value lies\non: it's indeed important that other team members know what you are doing, and\nthat management has an idea of the progress being made. Hence daily standups\nand the scrum board, and demos and retrospective at the end of each sprint.</p>\n<p>It makes sense, on paper. And in practice as well, if you find yourself in a\nteam which is not really a team but a group of individuals with communication\nproblems. But that should not be the rule, and that's my main criticism of\nScrum: it's <strong>a very good system for managing poorly skilled developers</strong>.</p>\n<p>In a highly skilled team, all of the benefits that Scrum is supposed to bring\nare already a given: back in 2006-2008, in Nokia, most of our communication was\noccurring in IRC and mailing lists. The fact that some of our co-workers were\n<a href=\"https://www.collabora.com/\">remote</a> indeed acted as a push for this choice.\nThe same occurred in my early years at Canonical, where (at least in my team)\nwe had a video conference only once per week: if the communication is already\nhappening in an open (to the team members) place, there's no need for further\nsynchronisation points. And if the managers and product owners are also\nmonitoring these discussions, they know perfectly well how the situation is and\ncan report it further up.</p>\n<h4>Demos</h4>\n<p>What about demos? Having always worked on middleware and system programming,\nwhere there's very little to <em>show</em>, I've never been fond of demos. Our team\ndemos have always been boring and of little significance for most of their\nspectators. And while it can take a lot of time to prepare a demo, if we\nalready communicated what he have done in this sprint, what's the point of\nspending more time for the demo? Is it a lack of trust? Or is it a way to make\nthe team proud of its accomplishments?\nIn any case, the same could be achieved in a more efficient way: have a\nspecialized person (maybe from the QA team) prepare and run all the demos. In\nthis way you'd not only achieve those goals, but you'd also make sure that\nthere's no cheating (ehmm…) and that bugs are noticed right away.</p>\n<h4>Story estimations</h4>\n<p>Luckily so far I've been involved in only two projects where it was required to\nestimate the complexity of the backlog stories. But it was enough to convince\nme that there's something fundamentally wrong with it. On one hand, we are\nbeing told that we should estimate <em>complexity</em>, and not <em>time</em>, but then the\nstory points are being used to decide how many stories can fit in a\nsprint. It can make sense to estimate the complexity, indeed, because it's an\nintrinsic property of the story, which typically does not depend on the actual\nperson who sits down to work on it; but then what can we use this value for?\nAnd how much time are we willing to spend in order to figure out this nearly\nuseless magic number? We keep the whole team sitting down together while\nthrowing estimates, and then question them; and indeed, in order to let other\npeople express a reasonable estimate we should also explain the story with a\ncertain level of detail. And while this sounds like a worthwhile thing to do\n(explaining the story, I mean), it's probably better to do that in written\nform, and ask the team members to read all the stories <em>before</em> the grooming\nsession. This is what we have been doing at some point, except that most of the\ntime there would be at least one colleague who hadn't done his homework, so you\nstill had to either retell the story during the meeting, or have the complexity\ndiscussion anyway since not all estimates were in agreement.</p>\n<p>Having a clear description on all the stories (where a “clear description”\ncould even be just a link to a bug report, if that contains enough information)\ndoes not cost a lot of time, as long as the description is written by a single\ndeveloper and not during a meeting with the whole team. It brings the benefit\nthat while writing the story one might realize that there's more to it and this\ncan lead to the creation of additional stories <em>before</em> one actually starts the\nsprint.</p>\n<p>If, for whatever reason, a point score is absolutely required (just because\nupper management wants so), then this should probably happen as the description\nis being written, and can be set by the author alone; no need to gather the\nwhole team for this (since, in any case, the score is inevitably linked to how\nthe story's creator presents it).</p>\n<h4>Sprint planning</h4>\n<p>It is my firm believe that a team member with no stories assigned should always\nbe allowed to drag the topmost story from the backlog (who should be kept in\nthe desired order by the product owner) into the sprint, without needing any\nkind of approval from above.</p>\n<p>Unfortunately, I've been working on teams where this was actively discouraged,\nif not prohibited. The rationale being that all stories that we bring into the\nsprint are a commitment, and that once the <em>TODO</em> column is empty, everybody who\nis free of other work should help their colleagues to complete their stories\nwhich are still in progress.  This sounds good in theory, but in practice it\nmakes little sense, unless the stories still in progress can be reasonably\nsplit into smaller parts (and most of the times they can't).</p>\n<p>So, a lot of effort is made in order to plan a sprint so that all of its\nstories can be completed, and at the end of the sprint one can look at the\nburn-down chart and feel proud of that diagonal line having gotten so close to\nthe horizontal axis.  Except that everybody knows that we are just fooling\nourselves, because that beautiful graph is only the result of us undercommitting\non the sprint planning and then avoiding to bring in more stories into the\nsprint once we had the resources to do so.</p>\n<h4>Every developer is worth 1</h4>\n<p>It seems to me that Scrum works under the assumption that all members of a team\nare interchangeable, and that it does not matter which developer takes up which\nstory. It has been like this at least in one of the projects I worked in: as\nsoon as you'd finish working on your story, it was mandatory to pick the\ntopmost story from the <em>TODO</em> column, whatever it might be. Not the second or\nthe third one: you were allowed to pick the first one only. The reason for this\nis that we had some stories that no one wanted to work on, and they'd risk\ngetting delayed forever.  But this “solution” caused another issue, because if\nthe topmost item in the <em>TODO</em> column was an uninspiring story, this made so\nthat developers would be slower and hesitant in finishing their current\nstories; no one would openly talk about that, but it was something you could\neasily sense, as people started to find issues in their code, adding more unit\ntests than usual, or “inadvertently” picking up the <em>second</em> topmost story from\nthe <em>TODO</em> column.\nSo, a problem that could have been easily solved by authority (just let the PO\nor the lead developer decide who should do what) would become another source of\ninefficiency.</p>\n<p>A slightly related issue is the fact that if a team is very inhomogeneous, and\nwe estimate the stories just by their complexity, we can't really predict\nwhether our sprint will be a successful one, because it all depends on which\ndeveloper works on which story. Believe it or not, I happened to complete\nin a handful of hours a story that a teammate had been working on for almost\none month (I assume he was also slacking off, but the point remains): at the\nstandups he was always reporting “good progress”, until I took the chance of\nhim having a day off and I stole the story from him.  One might argue that even if\na complexity estimation gives no forecast on when the story will be completed,\nit can still be used in cases like this, to detect the underperformers.  This\nis totally true, but that's the subject of <a href=\"http://www.mardy.it/blog/2022/10/performance-review.html\">another blog\npost</a>.</p>\n<h4>Rearranging developers in homogeneous teams</h4>\n<p>Besides, it should not come as a surprise that developers can have very\ndifferent skills, up to a factor of hundreds, if we take the extremes, and this\ncan be due to very different reasons: a low performance could be due to one\nbeing a junior developer, to personality issues, or just to a congenic lack of\nan analytic mindset.</p>\n<p>If on one side it makes sense to mix junior and experienced developers in the\nsame team in order to boost the productivity and skills of the junior\ndevelopers, the same does not hold true for good and bad developers: if one\nhasn't acquired the needed coding skills after a couple of years of work\nexperience, it's unlikely that continuing to have this developer work side by\nside with more experienced ones will bring much benefit to him. On the opposite\nside, it can stress out the more productive developer and demotivate him. Now\nthat a long time has passed, I can say that this is exactly what happened to me\nin a couple of occasions during my career (and the fact that these colleagues\ncontinuously argued and did not recognize their shortcomings did not help).</p>\n<p>You will never get a perfectly homogenous team, since people always have\ndifferent experience and skills; anyways, a little of gradation is healthy,\nbecause it stimulates all team members to compete in improving, by seeing each\nother as a model to surpass. But this only works if the target is felt as\nreachable (otherwise the lowest skilled developer won't have enough motivation)\nand worth reaching (otherwise the highest skilled developer will feel he has\nnothing to learn from the others).</p>\n<p>That's why, in my opinion, it's worth rearranging teams along skill levels: the\nteams with lower skill levels can benefit from being Scrum managed, because\nScrum sets up a frame inside which a low-skilled developer can still be\nproductive (albeit at a slower pace) thanks to the continuous monitoring and\nfeedback.  Highly skilled teams — which, incidentally, does not only mean good\ncoders, but also good teammates with prioritization and communication skills,\nand understanding the project goals and nearly capable of managing themselves —\ncould do very well even without Scrum, and just need a project owner who sets\nthe goals and defines the high-level stories (generally called “epics”), which\nthey can then break into smaller tasks by themselves. Adding more Scrum to\nsuch teams might not lead to any improvement.</p>\n<h4>What about managers?</h4>\n<p>I tend to think on a similar vein when it comes to managers (be it project\nmanager or product owner): my impression is that Scrum is most beneficial when\nthe team has a poor manager, because it sets some rules that make the figure of\nthe manager less relevant and reduce it to a role that can be easily performed\nby almost anyone. Here I might be totally wrong, of course, since I've never\nworked as a manager and there are aspects of their job that are less visible\nand that I might be overlooking; but again, I think that a good manager makes\nScrum redundant. Being crystal clear about the team goals, setting up a work\nenvironment that stimulates every team member to give his best, being able to\nnotice early when things are not going as planned or when someone is\nunderperforming or not feeling at ease, making sure that the current\ndevelopment stage is well understood by the rest of the project, etc.: all\nthese things are also Scrum's goals, so if they are already happening, the\ncompany should cherish this manager as a role model and question whether\nScrum would be really beneficial here.</p>\n<h4>Conclusion</h4>\n<p>In other words, summing up, one company/department should consider introducing\nScrum once a problem has been detected; “as long as the boat goes, let it go”,\nas a <a href=\"https://www.youtube.com/watch?v=pVGGCf_i1y4\">popular Italian song</a> says.</p>",
            "value": "I've been working in Scrum teams for 15 years now, give or take. Different\ncompanies, different approaches, from loosely following the agile principles to\na stricter implementation of the Scrum methodology. The only invariant being\nthat in practice Scrum is never followed by the book, but every company and\nteam makes its own adaptations, which makes it hard for everyone to voice\nstatements and critiques that could be considered universally true. That's why I\nwill refrain from taking this road, and instead I'll try to point out a few\naspects and behaviours that I've personally noticed during my career, good and\nbad ones (but of course, since I'm old and bitter, more bad than good).\nScrum's focus on communication is, in my opinion, where most of its value lies\non: it's indeed important that other team members know what you are doing, and\nthat management has an idea of the progress being made. Hence daily standups\nand the scrum board, and demos and retrospective at the end of each sprint.\nIt makes sense, on paper. And in practice as well, if you find yourself in a\nteam which is not really a team but a group of individuals with communication\nproblems. But that should not be the rule, and that's my main criticism of\nScrum: it's a very good system for managing poorly skilled developers.\nIn a highly skilled team, all of the benefits that Scrum is supposed to bring\nare already a given: back in 2006-2008, in Nokia, most of our communication was\noccurring in IRC and mailing lists. The fact that some of our co-workers were\nremote indeed acted as a push for this choice.\nThe same occurred in my early years at Canonical, where (at least in my team)\nwe had a video conference only once per week: if the communication is already\nhappening in an open (to the team members) place, there's no need for further\nsynchronisation points. And if the managers and product owners are also\nmonitoring these discussions, they know perfectly well how the situation is and\ncan report it further up.\nDemos\nWhat about demos? Having always worked on middleware and system programming,\nwhere there's very little to show, I've never been fond of demos. Our team\ndemos have always been boring and of little significance for most of their\nspectators. And while it can take a lot of time to prepare a demo, if we\nalready communicated what he have done in this sprint, what's the point of\nspending more time for the demo? Is it a lack of trust? Or is it a way to make\nthe team proud of its accomplishments?\nIn any case, the same could be achieved in a more efficient way: have a\nspecialized person (maybe from the QA team) prepare and run all the demos. In\nthis way you'd not only achieve those goals, but you'd also make sure that\nthere's no cheating (ehmm…) and that bugs are noticed right away.\nStory estimations\nLuckily so far I've been involved in only two projects where it was required to\nestimate the complexity of the backlog stories. But it was enough to convince\nme that there's something fundamentally wrong with it. On one hand, we are\nbeing told that we should estimate complexity, and not time, but then the\nstory points are being used to decide how many stories can fit in a\nsprint. It can make sense to estimate the complexity, indeed, because it's an\nintrinsic property of the story, which typically does not depend on the actual\nperson who sits down to work on it; but then what can we use this value for?\nAnd how much time are we willing to spend in order to figure out this nearly\nuseless magic number? We keep the whole team sitting down together while\nthrowing estimates, and then question them; and indeed, in order to let other\npeople express a reasonable estimate we should also explain the story with a\ncertain level of detail. And while this sounds like a worthwhile thing to do\n(explaining the story, I mean), it's probably better to do that in written\nform, and ask the team members to read all the stories before the grooming\nsession. This is what we have been doing at some point, except that most of the\ntime there would be at least one colleague who hadn't done his homework, so you\nstill had to either retell the story during the meeting, or have the complexity\ndiscussion anyway since not all estimates were in agreement.\nHaving a clear description on all the stories (where a “clear description”\ncould even be just a link to a bug report, if that contains enough information)\ndoes not cost a lot of time, as long as the description is written by a single\ndeveloper and not during a meeting with the whole team. It brings the benefit\nthat while writing the story one might realize that there's more to it and this\ncan lead to the creation of additional stories before one actually starts the\nsprint.\nIf, for whatever reason, a point score is absolutely required (just because\nupper management wants so), then this should probably happen as the description\nis being written, and can be set by the author alone; no need to gather the\nwhole team for this (since, in any case, the score is inevitably linked to how\nthe story's creator presents it).\nSprint planning\nIt is my firm believe that a team member with no stories assigned should always\nbe allowed to drag the topmost story from the backlog (who should be kept in\nthe desired order by the product owner) into the sprint, without needing any\nkind of approval from above.\nUnfortunately, I've been working on teams where this was actively discouraged,\nif not prohibited. The rationale being that all stories that we bring into the\nsprint are a commitment, and that once the TODO column is empty, everybody who\nis free of other work should help their colleagues to complete their stories\nwhich are still in progress.  This sounds good in theory, but in practice it\nmakes little sense, unless the stories still in progress can be reasonably\nsplit into smaller parts (and most of the times they can't).\nSo, a lot of effort is made in order to plan a sprint so that all of its\nstories can be completed, and at the end of the sprint one can look at the\nburn-down chart and feel proud of that diagonal line having gotten so close to\nthe horizontal axis.  Except that everybody knows that we are just fooling\nourselves, because that beautiful graph is only the result of us undercommitting\non the sprint planning and then avoiding to bring in more stories into the\nsprint once we had the resources to do so.\nEvery developer is worth 1\nIt seems to me that Scrum works under the assumption that all members of a team\nare interchangeable, and that it does not matter which developer takes up which\nstory. It has been like this at least in one of the projects I worked in: as\nsoon as you'd finish working on your story, it was mandatory to pick the\ntopmost story from the TODO column, whatever it might be. Not the second or\nthe third one: you were allowed to pick the first one only. The reason for this\nis that we had some stories that no one wanted to work on, and they'd risk\ngetting delayed forever.  But this “solution” caused another issue, because if\nthe topmost item in the TODO column was an uninspiring story, this made so\nthat developers would be slower and hesitant in finishing their current\nstories; no one would openly talk about that, but it was something you could\neasily sense, as people started to find issues in their code, adding more unit\ntests than usual, or “inadvertently” picking up the second topmost story from\nthe TODO column.\nSo, a problem that could have been easily solved by authority (just let the PO\nor the lead developer decide who should do what) would become another source of\ninefficiency.\nA slightly related issue is the fact that if a team is very inhomogeneous, and\nwe estimate the stories just by their complexity, we can't really predict\nwhether our sprint will be a successful one, because it all depends on which\ndeveloper works on which story. Believe it or not, I happened to complete\nin a handful of hours a story that a teammate had been working on for almost\none month (I assume he was also slacking off, but the point remains): at the\nstandups he was always reporting “good progress”, until I took the chance of\nhim having a day off and I stole the story from him.  One might argue that even if\na complexity estimation gives no forecast on when the story will be completed,\nit can still be used in cases like this, to detect the underperformers.  This\nis totally true, but that's the subject of another blog\npost.\nRearranging developers in homogeneous teams\nBesides, it should not come as a surprise that developers can have very\ndifferent skills, up to a factor of hundreds, if we take the extremes, and this\ncan be due to very different reasons: a low performance could be due to one\nbeing a junior developer, to personality issues, or just to a congenic lack of\nan analytic mindset.\nIf on one side it makes sense to mix junior and experienced developers in the\nsame team in order to boost the productivity and skills of the junior\ndevelopers, the same does not hold true for good and bad developers: if one\nhasn't acquired the needed coding skills after a couple of years of work\nexperience, it's unlikely that continuing to have this developer work side by\nside with more experienced ones will bring much benefit to him. On the opposite\nside, it can stress out the more productive developer and demotivate him. Now\nthat a long time has passed, I can say that this is exactly what happened to me\nin a couple of occasions during my career (and the fact that these colleagues\ncontinuously argued and did not recognize their shortcomings did not help).\nYou will never get a perfectly homogenous team, since people always have\ndifferent experience and skills; anyways, a little of gradation is healthy,\nbecause it stimulates all team members to compete in improving, by seeing each\nother as a model to surpass. But this only works if the target is felt as\nreachable (otherwise the lowest skilled developer won't have enough motivation)\nand worth reaching (otherwise the highest skilled developer will feel he has\nnothing to learn from the others).\nThat's why, in my opinion, it's worth rearranging teams along skill levels: the\nteams with lower skill levels can benefit from being Scrum managed, because\nScrum sets up a frame inside which a low-skilled developer can still be\nproductive (albeit at a slower pace) thanks to the continuous monitoring and\nfeedback.  Highly skilled teams — which, incidentally, does not only mean good\ncoders, but also good teammates with prioritization and communication skills,\nand understanding the project goals and nearly capable of managing themselves —\ncould do very well even without Scrum, and just need a project owner who sets\nthe goals and defines the high-level stories (generally called “epics”), which\nthey can then break into smaller tasks by themselves. Adding more Scrum to\nsuch teams might not lead to any improvement.\nWhat about managers?\nI tend to think on a similar vein when it comes to managers (be it project\nmanager or product owner): my impression is that Scrum is most beneficial when\nthe team has a poor manager, because it sets some rules that make the figure of\nthe manager less relevant and reduce it to a role that can be easily performed\nby almost anyone. Here I might be totally wrong, of course, since I've never\nworked as a manager and there are aspects of their job that are less visible\nand that I might be overlooking; but again, I think that a good manager makes\nScrum redundant. Being crystal clear about the team goals, setting up a work\nenvironment that stimulates every team member to give his best, being able to\nnotice early when things are not going as planned or when someone is\nunderperforming or not feeling at ease, making sure that the current\ndevelopment stage is well understood by the rest of the project, etc.: all\nthese things are also Scrum's goals, so if they are already happening, the\ncompany should cherish this manager as a role model and question whether\nScrum would be really beneficial here.\nConclusion\nIn other words, summing up, one company/department should consider introducing\nScrum once a problem has been detected; “as long as the boat goes, let it go”,\nas a popular Italian song says."
          }
        ]
      }
    },
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "name": [
          "Performance reviews"
        ],
        "url": [
          "http://www.mardy.it/blog/2022/10/performance-review.html"
        ],
        "published": [
          "2022-10-27T08:47:14+03:00"
        ],
        "content": [
          {
            "html": "<p>It happened a few times during my career, that I found myself in a team with a\ncolleague whose productivity was close to zero. In most of these cases it was\nsimply a matter of people who hadn't the skills and happened to choose the wrong\ncareer path, and in one case it was actually an excellent developer, but just\nslacking off. Regardless of the case, in many of these occasions it looked like\nthe team manager hadn't noticed the poor performance of the individual in\nquestion, whereas this was rather obvious to the rest of the team.  I'm not\nsure why the managers didn't notice the black sheep, but the point is that none\nof the other developers did raise the issue either: why would I report a fellow\ncolleague, who might risk losing his job because of my evil tongue?</p>\n<p>So, Scrum to the rescue? Not quite. As a matter of fact, while it is true that an\nunderperformer could be easily spotted by seeing how often he fails to complete\nhis stories in the timeframe suggested by the story points, this information is\ngenerally accessible to the product owner, whereas the line manager might not\nattend the Scrum meetings at all (as was the case in a previous project of\nmine, where the line manager was completely detached from the project); and\neven if the line manager had this information, it's not a given that he'd make\nuse of it — as a matter of fact, I cannot say with certainty that the line\nmanagers did not notice those underperforming colleagues of mine; maybe they\nnoticed, but failed to intervene for some reason?</p>\n<p>It sounds like this might be\n<a href=\"https://en.wikipedia.org/wiki/360-degree_feedback\">360</a> material.\nUnfortunately, in my experience the 360 reviews are a waste of time for the\nmost part, but that might be because they had been badly implemented in the\ncompanies where I worked in.  In these reviews I get to rate my colleagues\nusing a set of predefined statements which generally look positive, such as\n“Often delivers more than expected” or “Always meets the expectations”, but\neach of which imply a very different rating.  I can see that the reason why the\nsystem uses this kind of sentences is because no one wants to explicitly assign\na bad rating to a colleague, so all the possible answers have a “positive”\nfeeling.  The problem with this is that the shades of meaning in these\nsentences is not obvious at all, so one risks ending up picking sentences\nalmost at random.</p>\n<p>A system that would allow a company to get a honest feedback, without requiring\nemployees to say bad things about their colleagues, could be based on the idea\nthat your colleagues have usually a good sense of how well you are doing.  To\nme, it would make more sense if the performance review consisted of a question\nlike this:</p>\n<blockquote>\n<p>Please make a list of those colleagues that in your opinion are more valuable\nto your team or to the company in general.</p>\n</blockquote>\n<p>Then the company should sum up these lists and have a look at who is <em>not</em>\nthere, or whose name appears way too few times in relation to the number of\npeople who have worked with him or her. Then this information would not only be\navailable to the direct line manager, but also to upper line managers, who\nmight be willing to judge the situation with more objectivity and be able to\ndecide to move the person to another team.</p>\n<p>The presentation of this question could indeed be very different from what I've\nsuggested here, for example it could be something like “Make a list of\ncolleagues you'd be most happy to work (or continue working) with”, or it could\ninclude some personal feedback: in that way, if the only good thing that people\nhave to say about a developer is “He's a very nice guy”, well, you could\nimagine that we are not dealing with a strong developer after all.</p>\n<p>On the opposite side of the spectrum, the people whose names appear more often\nin the <em>star colleagues</em> lists are probably the employees that the company\nshould cherish and try hard not to lose. Salary increases, bonuses and all\nother gratifications that can help in retaining them should be primarily\nconnected to the colleagues' direct feedback, rather than to semi-obscure\nmetrics which might not capture their real value.</p>",
            "value": "It happened a few times during my career, that I found myself in a team with a\ncolleague whose productivity was close to zero. In most of these cases it was\nsimply a matter of people who hadn't the skills and happened to choose the wrong\ncareer path, and in one case it was actually an excellent developer, but just\nslacking off. Regardless of the case, in many of these occasions it looked like\nthe team manager hadn't noticed the poor performance of the individual in\nquestion, whereas this was rather obvious to the rest of the team.  I'm not\nsure why the managers didn't notice the black sheep, but the point is that none\nof the other developers did raise the issue either: why would I report a fellow\ncolleague, who might risk losing his job because of my evil tongue?\nSo, Scrum to the rescue? Not quite. As a matter of fact, while it is true that an\nunderperformer could be easily spotted by seeing how often he fails to complete\nhis stories in the timeframe suggested by the story points, this information is\ngenerally accessible to the product owner, whereas the line manager might not\nattend the Scrum meetings at all (as was the case in a previous project of\nmine, where the line manager was completely detached from the project); and\neven if the line manager had this information, it's not a given that he'd make\nuse of it — as a matter of fact, I cannot say with certainty that the line\nmanagers did not notice those underperforming colleagues of mine; maybe they\nnoticed, but failed to intervene for some reason?\nIt sounds like this might be\n360 material.\nUnfortunately, in my experience the 360 reviews are a waste of time for the\nmost part, but that might be because they had been badly implemented in the\ncompanies where I worked in.  In these reviews I get to rate my colleagues\nusing a set of predefined statements which generally look positive, such as\n“Often delivers more than expected” or “Always meets the expectations”, but\neach of which imply a very different rating.  I can see that the reason why the\nsystem uses this kind of sentences is because no one wants to explicitly assign\na bad rating to a colleague, so all the possible answers have a “positive”\nfeeling.  The problem with this is that the shades of meaning in these\nsentences is not obvious at all, so one risks ending up picking sentences\nalmost at random.\nA system that would allow a company to get a honest feedback, without requiring\nemployees to say bad things about their colleagues, could be based on the idea\nthat your colleagues have usually a good sense of how well you are doing.  To\nme, it would make more sense if the performance review consisted of a question\nlike this:\n\nPlease make a list of those colleagues that in your opinion are more valuable\nto your team or to the company in general.\n\nThen the company should sum up these lists and have a look at who is not\nthere, or whose name appears way too few times in relation to the number of\npeople who have worked with him or her. Then this information would not only be\navailable to the direct line manager, but also to upper line managers, who\nmight be willing to judge the situation with more objectivity and be able to\ndecide to move the person to another team.\nThe presentation of this question could indeed be very different from what I've\nsuggested here, for example it could be something like “Make a list of\ncolleagues you'd be most happy to work (or continue working) with”, or it could\ninclude some personal feedback: in that way, if the only good thing that people\nhave to say about a developer is “He's a very nice guy”, well, you could\nimagine that we are not dealing with a strong developer after all.\nOn the opposite side of the spectrum, the people whose names appear more often\nin the star colleagues lists are probably the employees that the company\nshould cherish and try hard not to lose. Salary increases, bonuses and all\nother gratifications that can help in retaining them should be primarily\nconnected to the colleagues' direct feedback, rather than to semi-obscure\nmetrics which might not capture their real value."
          }
        ]
      }
    },
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "name": [
          "MiTubo 1.4 adds feed folders"
        ],
        "url": [
          "http://www.mardy.it/blog/2022/10/mitubo-14-adds-feed-folders.html"
        ],
        "published": [
          "2022-10-10T17:40:09+03:00"
        ],
        "content": [
          {
            "html": "<p>Exactly one month has passed since the previous release, just the right time\nneeded to complete the feafure I've been working on since several weeks and to\nfix a few bugfixes introduced with the previous release. So it's time a new\nrelease of <a href=\"https://gitlab.com/mardy/mitubo\">MiTubo</a>:</p>\n<p></p>\n<center>\n<video id=\"video\" controls preload=\"metadata\" width=\"100%\"><source src=\"http://www.mardy.it/archivos/videos/mitubo-1.4.webm\" type=\"video/webm\"></source></video><p></p>\n</center>\n<p>I realized that I'm not that good at making release videos, but the point of\nthe video above is to show that you can organize your feeds into folders. When\nclicking on a folder, a page opens with the folder's contents; but you can also\ndirectly click on a feed, as long as its preview is visible in the folder's\ndelegate, and then the feeds open directly. This means that if you organize the\nfeeds inside your folders so that the favourite ones are at the top, they'll\nalso be visible in the folder preview and you'll be able to jump to them in\njust one click.</p>\n<p>Maybe I'm not that good with textual explanations either, so why don't you\ncheck it out for yourself? ☺  Get it at\n<a href=\"http://www.mardy.it/mitubo\">mardy.it/mitubo</a> (builds for Linux, Ubuntu Touch,\nWindows and macOS are available)!</p>",
            "value": "Exactly one month has passed since the previous release, just the right time\nneeded to complete the feafure I've been working on since several weeks and to\nfix a few bugfixes introduced with the previous release. So it's time a new\nrelease of MiTubo:\n\n\n\n\nI realized that I'm not that good at making release videos, but the point of\nthe video above is to show that you can organize your feeds into folders. When\nclicking on a folder, a page opens with the folder's contents; but you can also\ndirectly click on a feed, as long as its preview is visible in the folder's\ndelegate, and then the feeds open directly. This means that if you organize the\nfeeds inside your folders so that the favourite ones are at the top, they'll\nalso be visible in the folder preview and you'll be able to jump to them in\njust one click.\nMaybe I'm not that good with textual explanations either, so why don't you\ncheck it out for yourself? ☺  Get it at\nmardy.it/mitubo (builds for Linux, Ubuntu Touch,\nWindows and macOS are available)!"
          }
        ]
      }
    },
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "name": [
          "The Media"
        ],
        "url": [
          "http://www.mardy.it/blog/2022/09/the-media.html"
        ],
        "published": [
          "2022-09-15T23:29:28+03:00"
        ],
        "content": [
          {
            "html": "<p>Ah, the media. No words from me are necessary here: just read these two\narticles, then read their titles again, then wonder.</p>\n<ul>\n<li><a href=\"https://news.mc/2022/09/12/ukrainian-refugees-attacked-by-russian/\">news.mc/2022/09/12/ukrainian-refugees-attacked-by-russian/</a></li>\n<li><a href=\"https://news.mc/2022/09/15/assailant-appears-in-court-charged-with-assault-on-ukrainian-refugees/\">news.mc/2022/09/15/assailant-appears-in-court-charged-with-assault-on-ukrainian-refugees/</a></li>\n</ul>\n<p>Just wow.</p>",
            "value": "Ah, the media. No words from me are necessary here: just read these two\narticles, then read their titles again, then wonder.\n\nnews.mc/2022/09/12/ukrainian-refugees-attacked-by-russian/\nnews.mc/2022/09/15/assailant-appears-in-court-charged-with-assault-on-ukrainian-refugees/\n\nJust wow."
          }
        ]
      }
    },
    {
      "type": [
        "h-entry"
      ],
      "properties": {
        "name": [
          "MiTubo 1.3: sorting of QML ListView via Drag&Drop"
        ],
        "url": [
          "http://www.mardy.it/blog/2022/09/mitubo-13-sorting-of-qml-listview-via-dragdrop.html"
        ],
        "published": [
          "2022-09-10T13:38:51+03:00"
        ],
        "content": [
          {
            "html": "<p>One feature that I've been asked to add to\n<a href=\"https://gitlab.com/mardy/mitubo\">MiTubo</a>, and that indeed becomes more and\nmore important as the number of subscriptions increases, is the ability to\ngroup subscriptions into folders. I've spent a good amount of time implementing\nthe needed support in the C++ backend, which is now able to handle nested\nfolders too, but given that building the UI parts was not a quick task and\nseeing how much time has passed since the last release, I thought of releasing\na partial implementation of the whole feature, consisting only of the ability\nto manually sort the subscriptions via drag&amp;drop (that, is no folder support).\nIt turns out this is already not a trivial work!</p>\n<p>I found a <a href=\"https://agateau.com/2016/reordering-a-listview-via-dragndrop-3/\">nice tutorial on ListView DnD\nsorting</a> by\nthe great Aurélien Gâteau which I found very inspiring, and while I didn't\nactually reuse the same code (mostly because I was already halfway through with\nmy implementation, which I started before finding his tutorial), it was helpful\nto have it as a reference. I added a few animations to make it look more\npleasant, and I'm rather satisfied with the result:</p>\n<p></p>\n<center>\n<video id=\"video\" controls preload=\"metadata\" width=\"100%\"><source src=\"http://www.mardy.it/archivos/videos/mitubo-1.3.webm\" type=\"video/webm\"></source></video><p></p>\n</center>\n<p>I'm not showing you the code yet (though, indeed, you can find it in the\n<code>DraggableListView</code> and <code>DraggableDelegate</code> items <a href=\"https://gitlab.com/mardy/mitubo/-/tree/master/src/desktop/qml\">in the source\nrepository</a>)\nbecause it's not yet in a shape where it's generally reusable in other\nprojects, but if I happen to need the same feature elsewhere I'll eventually\ntry to turn it into a couple fully reusable components.</p>\n<p>Anyway, here's what's new in this latest MiTubo release:</p>\n<ul>\n<li>Subscriptions can be sorted by means of Drag&amp;drop</li>\n<li>For systems with python 3.5 or older (such as Ubuntu Touch), use the daily\n  builds of <a href=\"https://youtube-dl.org/\">youtube-dl</a> instead of the official\n  releases</li>\n<li>Implement <strong>PeerTube search</strong> (this should reserve a post of its own!)</li>\n</ul>\n<p>You can get it <a href=\"http://www.mardy.it/mitubo\">at the usual place</a>. This time\nthere are only Linux and Windows builds as I'm a bit lazy to make a macOS\nversion, but should you need it, don't hesitate to ask!</p>",
            "value": "One feature that I've been asked to add to\nMiTubo, and that indeed becomes more and\nmore important as the number of subscriptions increases, is the ability to\ngroup subscriptions into folders. I've spent a good amount of time implementing\nthe needed support in the C++ backend, which is now able to handle nested\nfolders too, but given that building the UI parts was not a quick task and\nseeing how much time has passed since the last release, I thought of releasing\na partial implementation of the whole feature, consisting only of the ability\nto manually sort the subscriptions via drag&drop (that, is no folder support).\nIt turns out this is already not a trivial work!\nI found a nice tutorial on ListView DnD\nsorting by\nthe great Aurélien Gâteau which I found very inspiring, and while I didn't\nactually reuse the same code (mostly because I was already halfway through with\nmy implementation, which I started before finding his tutorial), it was helpful\nto have it as a reference. I added a few animations to make it look more\npleasant, and I'm rather satisfied with the result:\n\n\n\n\nI'm not showing you the code yet (though, indeed, you can find it in the\nDraggableListView and DraggableDelegate items in the source\nrepository)\nbecause it's not yet in a shape where it's generally reusable in other\nprojects, but if I happen to need the same feature elsewhere I'll eventually\ntry to turn it into a couple fully reusable components.\nAnyway, here's what's new in this latest MiTubo release:\n\nSubscriptions can be sorted by means of Drag&drop\nFor systems with python 3.5 or older (such as Ubuntu Touch), use the daily\n  builds of youtube-dl instead of the official\n  releases\nImplement PeerTube search (this should reserve a post of its own!)\n\nYou can get it at the usual place. This time\nthere are only Linux and Windows builds as I'm a bit lazy to make a macOS\nversion, but should you need it, don't hesitate to ask!"
          }
        ]
      }
    }
  ],
  "rels": {
    "stylesheet": [
      "http://www.mardy.it/assets/css/all-nocdn.css"
    ],
    "alternate": [
      "http://www.mardy.it/rss.xml",
      "http://www.mardy.it/ia/rss.xml",
      "http://www.mardy.it/it/rss.xml",
      "http://www.mardy.it/feed.atom",
      "http://www.mardy.it/ia/feed.atom",
      "http://www.mardy.it/it/feed.atom",
      "http://www.mardy.it/ia/",
      "http://www.mardy.it/it/"
    ],
    "canonical": [
      "http://mardy.it/"
    ],
    "icon": [
      "http://www.mardy.it/favicon.png"
    ],
    "next": [
      "http://www.mardy.it/index-93.html"
    ],
    "authorization_endpoint": [
      "https://indieauth.com/auth"
    ],
    "webmention": [
      "http://www.mardy.it/cgi-bin/bussator.fcgi"
    ],
    "prefetch": [
      "http://www.mardy.it/blog/2022/10/scrum-agility-and-the-human-factor.html"
    ],
    "bookmark": [
      "http://www.mardy.it/blog/2022/10/scrum-agility-and-the-human-factor.html",
      "http://www.mardy.it/blog/2022/10/performance-review.html",
      "http://www.mardy.it/blog/2022/10/mitubo-14-adds-feed-folders.html",
      "http://www.mardy.it/blog/2022/09/the-media.html",
      "http://www.mardy.it/blog/2022/09/mitubo-13-sorting-of-qml-listview-via-dragdrop.html"
    ],
    "me": [
      "mailto:info@mardy.it"
    ],
    "nofollow": [
      "https://getnikola.com/"
    ]
  },
  "rel-urls": {
    "http://www.mardy.it/assets/css/all-nocdn.css": {
      "rels": [
        "stylesheet"
      ],
      "type": "text/css"
    },
    "http://www.mardy.it/rss.xml": {
      "rels": [
        "alternate"
      ],
      "hreflang": "en",
      "title": "RSS (en)",
      "type": "application/rss+xml"
    },
    "http://www.mardy.it/ia/rss.xml": {
      "rels": [
        "alternate"
      ],
      "hreflang": "ia",
      "title": "RSS (ia)",
      "type": "application/rss+xml"
    },
    "http://www.mardy.it/it/rss.xml": {
      "rels": [
        "alternate"
      ],
      "hreflang": "it",
      "title": "RSS (it)",
      "type": "application/rss+xml"
    },
    "http://www.mardy.it/feed.atom": {
      "rels": [
        "alternate"
      ],
      "hreflang": "en",
      "title": "Atom (en)",
      "type": "application/atom+xml"
    },
    "http://www.mardy.it/ia/feed.atom": {
      "rels": [
        "alternate"
      ],
      "hreflang": "ia",
      "title": "Atom (ia)",
      "type": "application/atom+xml"
    },
    "http://www.mardy.it/it/feed.atom": {
      "rels": [
        "alternate"
      ],
      "hreflang": "it",
      "title": "Atom (it)",
      "type": "application/atom+xml"
    },
    "http://mardy.it/": {
      "rels": [
        "canonical"
      ]
    },
    "http://www.mardy.it/favicon.png": {
      "rels": [
        "icon"
      ]
    },
    "http://www.mardy.it/index-93.html": {
      "rels": [
        "next"
      ],
      "type": "text/html"
    },
    "https://indieauth.com/auth": {
      "rels": [
        "authorization_endpoint"
      ]
    },
    "http://www.mardy.it/cgi-bin/bussator.fcgi": {
      "rels": [
        "webmention"
      ]
    },
    "http://www.mardy.it/blog/2022/10/scrum-agility-and-the-human-factor.html": {
      "rels": [
        "prefetch"
      ],
      "type": "text/html"
    },
    "http://www.mardy.it/ia/": {
      "rels": [
        "alternate"
      ],
      "hreflang": "ia",
      "text": "Interlingua"
    },
    "http://www.mardy.it/it/": {
      "rels": [
        "alternate"
      ],
      "hreflang": "it",
      "text": "Italiano"
    },
    "http://www.mardy.it/blog/2022/10/performance-review.html": {
      "rels": [
        "bookmark"
      ],
      "text": "\n            October 27, 2022"
    },
    "http://www.mardy.it/blog/2022/10/mitubo-14-adds-feed-folders.html": {
      "rels": [
        "bookmark"
      ],
      "text": "\n            October 10, 2022"
    },
    "http://www.mardy.it/blog/2022/09/the-media.html": {
      "rels": [
        "bookmark"
      ],
      "text": "\n            September 15, 2022"
    },
    "http://www.mardy.it/blog/2022/09/mitubo-13-sorting-of-qml-listview-via-dragdrop.html": {
      "rels": [
        "bookmark"
      ],
      "text": "\n            September 10, 2022"
    },
    "mailto:info@mardy.it": {
      "rels": [
        "me"
      ],
      "text": "Alberto Mardegan"
    },
    "https://getnikola.com/": {
      "rels": [
        "nofollow"
      ],
      "text": "Nikola"
    }
  }
}